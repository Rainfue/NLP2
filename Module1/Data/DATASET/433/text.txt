Грид-система – это система, которая использует
связанные по сети компьютеры как единый кластер [1].
Распределенные вычисления – это модель вычислений, которая
тесно связана с грид-системами, относится к множеству компьютерных
систем, расположенных в разных местах, соединенных вместе по сети и
применяющихся для решения сложных вычислительных задач без
необходимости использования дорогого суперкомпьютера [1].
222
На сегодняшний день существует множество реализаций
распределенных вычислений с помощью грид-систем, но они требуют
слишком больших усилий для разработки как программных, так и
аппаратных средств для взаимодействия и корректной работы системы,
например, Еuropean Grid Infrastructure (EGI), Distributed European
Infrastructure for Supercomputing Applications (DEISA), BOINC,
distributed.net и другие. В статье рассмотрен подход к реализации
распределенных вычислений с помощью сервис-ориентированной
архитектуры [4] и технологии WebAssembly [3] для организации
вычислительных узлов в веб-браузере.
WebAssemby (часто сокращают до Wasm) – это открытый стандарт,
который определяет переносимый формат двоичного кода для
исполняемых программ. Основной целью Wasm является обеспечение
высокопроизводительных приложений на веб-страницах, однако он
может быть использован для выполнения и интеграции в других средах
[5].
Прежде
чем перейти к рассмотрению архитектуры самой системы, поясним,
почему выгодно использовать именно распределенные вычисления для
решения сложных задач. Некоторые преимущества вполне очевидны.
1. Нет необходимости покупать большие SMP-серверы для
приложений, которые могут быть разделены и распределены между
небольшими серверами (они стоят намного дешевле, чем SMP-серверы).
Результаты могут быть объединены и проанализированы после
завершения работы.
2. Если один из вычислительных узлов в сети выходит из строя,
существует множество других ресурсов, способных распределить
нагрузку. Задания могут автоматически перезапускаться в случае сбоя.
3. Эта модель очень хорошо масштабируется.
Но стоит учитывать и ряд недостатков такого подхода.
1. Возможно, потребуется быстрое соединение между
вычислительными ресурсами (как минимум, гигабитным Ethernet).
2. Некоторые приложения могут нуждаться в настройке, чтобы в
полной мере воспользоваться новой моделью.
Сервис-ориентированная архитектура – это стиль разработки
программного обеспечения, при котором услуги предоставляются
другим компонентам компонентами приложения через протокол связи
по сети.
Разработана система на основе сервис-ориентированной
архитектуры, состоящая из следующих компонентов: базы данных
администратора, базы данных задач, супервизора задач и клиентов
223
(вычислительных узлов), предложенная в статье [2] (рис. 1). Рассмотрим
эти компоненты подробнее.
Для правильной работы системы
необходимо обеспечить безопасность данных, включающих в себя
начальные условия и программный код. В этом компоненте будут
проходить все возможные проверки, например, тестирование программы
на ошибки или отсеивание начальных условий с пропущенными
значениями. Далее администратор системы отправляет обработанные
данные в супервизор задач.
В базе данных задач
должны храниться начальные условия и результаты, полученные от
клиентов.
Супервизор задач – это программа, отвечающая за оптимальное
распределение задач между всеми вычислительными узлами и
обеспечивающая доступ к базе данных задач.
Есть два типа клиентов: инициатор и исполнитель.
Исполнитель связывается с супервизором, который, в свою очередь,
предоставляет доступ к необходимой задаче через базу данных текущих
задач и ставит ее на выполнение, после чего отправляет полученный
результат в базу. Инициатором вычислений может быть любой
пользователь сервиса, предоставляя данные и программу для обработки,
далее сервис ставит предоставленную задачу в очередь для выполнения
остальными участниками, а инициатор становится исполнителем.
Для анализа производительности возьмем задачу поиска
количества простых чисел на заданном промежутке, поскольку она
224
может нагрузить процессор тяжелыми вычислениями и достаточно
проста в реализации.
Тестирование производилось на компьютере с процессором Intel
Core i5-3210M (2.50 GHz) в браузере Google Chrome v79 с
использованием следующих программных средств: C# для десктоп
приложения, JavaScript и WebAssembly для веб-браузера.
Были получены следующие результаты.
Таким образом, из представленных выше данных
можно сделать следующие выводы:
1) распределенную систему можно построить на основе клиентоориентированной архитектуры;
2) в качестве вычислительных узлов распределенной системы
можно использовать веб-браузер с применением технологии
WebAssembly.
Также в дальнейшем планируется исследовать возможность
многопоточных вычислений в веб-браузере при помощи веб-воркеров.
Автор благодарит В.И. Мунермана и Т.А. Самойлову за помощь в
решении поставленной задачи и подготовке статьи.

