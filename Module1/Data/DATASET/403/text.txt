При появлении такого понятия, как написание кода на JavaScript появилась возможность использовать обещания (Promises), которые позволяют получить доступ к асинхронным методам и возвращаемым значениям для синхронных методов. Async / Await являются продолжением обещаний.
В языке JavaScript существуют синхронные и асинхронные функции. Когда JavaScript выполняет функцию синхронно, он ждет завершения этой задачи, прежде чем перейти к следующей строке
кода. Когда JavaScript выполняет функцию асинхронно, он перемещает программу на следующую
строку кода до ее завершения. В качестве примера можно предоставить следующую аналогию: «синхронное» программирование — «живая» очередь, где человек не должен географически покидать
своё место, а «асинхронное» программирование похоже на получение талона для очереди, при этом
человек может свободно передвигаться и заниматься другими делами до момента как настанет установленное время получения услуги.
Один из способов написать асинхронную функцию - использовать обратные вызовы (callback
functions). Необходимо передать функцию в качестве аргумента асинхронной функции, и эта переданная функция называется «обратным вызовом», который будет вызываться после завершения задачи.
Следующие строки кода показывают, как эта функция будет вызываться после завершения задачи.
Эта «задача» могла бы получать данные из «базы данных» или чего-либо еще.
Ответ консоли после введения функции обратного вызова представлен на рис. 1.
JavaScript создал механизм в ES6, который называется «Promise» -обещание.
Обещание — это место для будущего значения. Он выполняет ту же функцию, что и обратные
вызовы, но имеет четкий синтаксис и облегчает обработку ошибок. Сначала необходимо создать экземпляр «обещания», вызывая new Promise, код представлен ниже:
В данном коде (resolve, reject) => {} – это внутренняя функция, которая принимает два аргумента
«resolve» и «reject». Resolve будет вызван, если общение было отработанно без ошибок, а reject если в
обещании произошла ошибка.
Можно получить значение, когда обещание resolves завершится, прикрепив обработчик try / catch
к его then функции. Код данной операции представлен ниже:
Async / Await — это дополнение к «обещаниям». Добавление слова «async» перед любой функцией означает, что функция всегда возвращает обещание, «await» работает только внутри функций
«async», также «await» ждёт, пока обещание разрешится (resolve) и будет готово вернуть результат.
Асинхронная функция может быть объявлена простым добавлением ключевого слова async перед функцией. Код приведен ниже:
Ключевое слово await используется для ожидания разрешения обещания и ожидания возврата
результата. Его задача - ждать только асинхронный блок. Использование await с асинхронной функцией очень похоже на создание синхронной функции. Поскольку await удерживает выполнение кода и
ждет пока «Обещание» получит resolve - тогда будет выполняться следующая строка кода: