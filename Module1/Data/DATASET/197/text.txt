С течением времени, начиная с программирования на языках 
низкого уровня, подход к разработке программных продуктов претерпел огромные изменения. Количество кода становятся больше, 
написанные приложения способны анализировать и работать с 
огромными объемами информации. Разработка и поддержка всех 
процессов требует от специалиста высокой концентрации, поскольку допущение даже самой незначительной ошибки на этапе проектирования в продакшине, может оказать негативное влияние на работу всей системы. 
По этой причине программисты изменили подход к тестированию в целом. На данный момент кроме тестирования программного 
продукта перед его вводом в эксплуатацию, производится модульное тестирование (unit testing). Данный термин описывает тесты, 
основной задачей которых является проверка каждого компонента программного продукта изолировано. Стоит отметить, что при данном подходе рекомендуются тестировать минимальные части приложения – классы, модули, метод. 
Основным ключевым понятием модульного тестирования является TDD (Test-driven development). Данный термин расшифровывается как «разработка через тестирование». Подход TDD подразумевает написание теста, проверяющего определенный код, как итог 
специалист получает тестирование черного ящика – разработчик 
знает, что подается на вход, а также что должно получиться. Цель 
TDD – получение понятного, простого, удобного и без ошибок кода. 
Использование данного подхода позволяет избежать дублирования 
кода. TDD имеет цикличную структуру и состоит из ряда итераций: 
написание теста; запуск теста (получение результата); добавления 
кода, который должен проверить написанный тест; рефакторинг 
кода.
Unit-тесты оказывают существенное влияние на IT-сообщество, 
все реже встречаются программные продукты без их применения. 
Данное утверждение обосновывается радом свойств и преимуществ, 
которые получает разработчик при использовании модульного тестирования. Основными преимуществами являются итоговое качество кода после применения тестов, а также возможность безболезненного рефакторинга кода. Это свойство достигается за счет того, 
что тесты помогают убедиться, что исходное поведение не изменилось. Данные список свойств не является исчерпывающим. 
Unit-тесты оказывают положительное влияния на модульность 
и дизайн системы. Модульные тесты также можно считать отличным источником спецификации приложения, как формальной, так и 
неформальной. Практический опыт применения unit-тестов показывает, что их чтение помогает понять граничные условия и бизнесправила, которые применяются для класса. Для успешного пользования данным свойством необходимо придерживаться правила –
качеству кода самого теста должно удалятся не меньше времени, 
чем продакшн коду, он должен легко читаться любом специалистом, следовательно, не должно возникать трудностей в его сопровождении.
Написанные тесты снижают порог вхождения для других специалистов. При написании качественного unit-теста разработчик 
вникает детально в контекст решаемой задачи, проверяет различные граничные условия, отражая все действия в комментариях. Данные 
усилия снижают время, затраченное на изучение области системы, 
последующему специалисту.
Применение модульных тестов в разработке программных продуктов экономит время специалистов при поддержке уже готового 
решения. С одной стороны, этап разработки длится дольше, за счет 
написания самих тестов, но данные действия приводят к наименьшему количеству ошибок, что в будущем сводит время решения 
данных проблем к минимуму.