В современном мире приложения становятся все более 
сложными. Основные причины этому – увеличившиеся объемы 
данных, которые необходимо обрабатывать, и увеличившееся 
количество устройств, на которых приложения должны работать [1]. 
Современные приложения и сервисы, как правило, имеют версии, как 
для настольных компьютеров, так и для мобильных устройств, причем 
под управлением различных операционных систем. В большинстве 
случаев для каждой операционной системы разрабатывается 
отдельная нативная версия приложения [2]. При этом все эти 
приложения, как правило, взаимодействуют с единым сервером при 
помощи REST API. REST – это архитектурный стиль взаимодействия 
компонентов распределенного приложения в сети интернет [3]. Он 
используется для обеспечения взаимодействия различных клиентских 
приложений с сервером в едином формате. Его основные 
преимущества заключаются в высокой производительности, 
надежности и масштабируемости. Единого «официального» стандарта 
нет, поскольку REST является лишь архитектурным стилем, но в 
большинстве случаев взаимодействие ведется при помощи протокола 
HTTP документами в формате JSON или XML. Для взаимодействия 
используются различные методы HTTP-запроса, такие как GET – для 
получения данных, POST – для отправки данных, DELETE – для 
удаления данных, OPTIONS – для описания параметров соединения с 
ресурсом [4]. Существует множество различных инструментов для 
разработки REST API. Одним из популярных решений является 
использование PHP-фреймворков, таких как Laravel, Yii2 или 
Symfony. 
Целью работы было разработать REST API сервис на базе PHP 
фреймворка Yii2. 
PHP-фреймворк Yii2 содержит в себе полноценный набор 
средств для реализации REST API, в частности: использование 
ActiveRecord, настройка формата ответа (JSON или XML), 
встроенную поддержку метода OPTIONS, поддержку фильтров, 
пагинации и сортировок. Предположим, что мы хотим разработать 
REST API для данных по записям блога. Для начала необходимо 
создать класс контроллера \app\controllers\PostController. В нём 
необходимо наследоваться от класса ActiveController и задать 
свойство modelClass как app\models\User. Модель Post, при этом, 
можно сгенерировать автоматически при помощи инструмента Crud. 
Готовый контроллер показан на рисунке 1. 
Далее необходимо настроить правила для обработчика URL. 
Для этого необходимо отредактировать настройки компонента 
urlManager в конфигурационном файле приложения. Необходимо 
добавить правило, как показано на рисунке 2. 
После этого в том же конфигурационном файле необходимо 
настроить приложение на прием данных в формате JSON. Для этого 
необходимо изменить свойства компонента request, как показано на 
рисунке 3. 
На этом наше REST API для доступа к данным записей готово 
и включает в себя методы: GET, HEAD, POST, DELETE, OPTIONS и 
некоторые другие. Для проверки работы попробуем сделать запрос с 
помощью метода GET. Результаты запроса представлены на рисунке 
4.