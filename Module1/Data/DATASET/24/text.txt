Одним из важнейших недостатков JavaScript является отсутствие
типизации. Это не только снижает скорость разработки, но и существенно замедляет исполнение кода. Удобство разработки призван повысить closure compiler от google, однако писать аннотации, в которых
указаны типы данных, чтобы ПО «подсказало» источник ошибки представляется обременительным и годным, разве что для начинающих.
Большую проблему создает объектная модель – реализация классов
(«эмуляция» классов с помощью прототипов) и их наследования очень
отличается от привычной для C++/C#/Java – разработчиков. Некоторые
из недостатков исправлены в ECMAScript 6 [1]. Это касается, в первую
очередь, блочной области видимости, лексического значения this (с помощью стрелочных функций), rest-параметров, синтаксиса описания
классов, повышения безопасности за счет введением “use strict”.
Более удобный, расширенный инструментарий для разработки
JavaScript программ предоставляет его «надстройка»/«надмножество»
TypeScript. Среди его основных особенностей – строгая типизация,
транслируемость в JavaScript, обратная совместимость с JavaScript, поддержка пользовательских типов данных, Generic-интерфейсы, наследо-вание, полиморфизм, инкапсуляция как в ООП-языках, модификаторы
доступа, возможность описать сигнатуру метода.
Многие среды разработки – Visual Studio, Netbeans, Sublime – поддерживают TypeScript на уровне плагинов, что обеспечивает возможность не только подсвечивать код, но и пользоваться всплывающей подсказкой по синтаксису и конструкциям [2].
Недостатки языка – наличие требований к описанию сигнатур методов и функций для внешних библиотек (или специальная ts версия),
не все стандартные браузерные объекты реализованы, меньшая популярность и более низкая, чем у JavaScript, скорость разработки.
Однако, при снижении скорости разработки приложения, повышается безопасность и производительность кода. Кроме того повышается
сложность поддержки приложения. Наилучшие результаты при программировании на TypeScript достигаются с ES6.
Будучи ближе к концепции ООП, TypeScript, реализует любой
из 23 классических паттернов проектирования. Кроме этих паттернов
для TypeScript созданы три специфические только для него: модуль,
замыкание, проверка на new.
Модуль преследует цели: соблюсти принцип инкапсуляции, создать
четкую структуры из подключаемых модулей, избежать конфликтов
в глобальном пространстве имен.
Функции в JavaScript формируют замыкания. Замыкание – это комбинация функции и лексического окружения, в котором эта функция
была определена [3]. Это окружение состоит из произвольного количества локальных переменных, которые были в области действия функции
во время создания замыкания. Замыкания можно использовать везде,
где обычно используется объект с одним единственным методом. Паттерн Замыкание также реализует инкапсуляцию, и, кроме того, симуляцию модификатора доступа private, хранение данных.
Проверка на new призвана обеспечить полиморфность функции и
защитить от нецелевого ее использования.