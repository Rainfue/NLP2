AJAX, состоящий из HTML, технологии JavaScript, DHTML и DOM
является замечательным подходом, который помогает преобразовать
тяжеловесные интерфейсы в интерактивные веб-приложения за счёт
использования фоновых запросов к серверу [1].
В привычной до недавнего времени классической модели построения вебприложения в ответ на запрос браузера сервер генерировал совершенно новую
веб-страницу и отправлял её обратно. После чего браузер полностью
перезагружал всю страницу. Из этого вытекают следующие актуальные
особенности использования AJAX-запросов:
- существенное ускорение загрузки н обновления страниц;
- уменьшение нагрузки на сервер.
Рассмотрим пример веб-приложения, построенного с использованием
фоновых AJAX-запросов. Предметная область связана с криптографическим
преобразованием текстовой информации. В качестве метода будем использовать
шифр Цезаря (1): 
где x – символ открытого текста, y – символ шифрованного текста, n –
мощность алфавита, k – ключ.
В нашем случае, мощность алфавита (n) будет равна 34, ключ (k) равен 5.
Для зашифровки пользователю необходимо ввести в поле текстовую
информацию, которая в фоновом режиме посимвольно будет обрабатываться на
(1)
SCIENCE TIME
545
сервере с помощью AJAX-запросов, и выводиться в зашифрованном виде в
соответствии с методом Цезаря. Спроектированное веб-приложение
представлено на рис.1.
Чтобы лучше понимать принцип работы данного веб-приложения, следует
пошагово рассмотреть структурную схему, которая представлена на рис.2. 
1. User interface представляет собой форму ввода-вывода информации.
Укажем идентификаторы (2), для того, чтобы к этим полям можно было
обратиться при помощи Javascript.
2. Для посимвольной обработки данных необходимо при вводе каждого
текстового символа отправлять запрос на сервер в фоновом режиме. Поэтому для
всех описанных событий (3) с текстовым полем необходима проверка на
правильность введенных данных, и по завершению выполним функцию
contTextarea (4).
<textarea name="working" id="working"> </
textarea>
<textarea name="result" id="result" disabled>
</textarea>
(2)
$('#working').bind("change keyup click",
function() {
// только буквы в верхнем регистре
if (this.value.match(/[^A-ZА-ЯЁ\s?]/g))
{this.value = this.value.replace(/[^A-ZАЯЁ\s?]/g, '');}
contTextarea();})
(3)
SCIENCE TIME
546
3. На третьем шаге формируется AJAX-запрос из введенных символов и
передается на сервер для последующей обработки.
В качестве параметров AJAX-запроса выступают следующие:
- type – определяет тип выполняемого запроса, используем POST, так как
пользователем может быть передано большое количество текстовой
информации;
- url – определяет адрес, на который будет отправлен запрос;
- data – данные, которые будут отправлены на сервер, в переменной text в
нашем случае хранится информация, введенная пользователем;
- dataType – тип данных, в котором ожидается получить ответ от сервера,
используем html, потому что ответ вернется в качестве значения для поля
вывода. В качестве формата передачи данных могут использоваться фрагменты
простого текста, HTML-кода, JSON или XML;
- success – функция, которая будет вызвана в случае удачного завершения
запроса, ей передадим параметр answer, который содержит данные, присланные
сервером;
- error – функция, которая будет вызвана в случае неудачного завершения
запроса к серверу.
4. Для обработки приходящей информации используем серверный язык
программирования – PHP. Принимаем переменные из POST – запроса (5). 
Чтобы зашифровать полученную информацию методом Цезаря,
необходимо каждый символ исходной строки сравнить с символами алфавита. В
случае соответствия, зная ключ (k=5), зашифрованный символ будет найден по
формуле (1).
function caesar($textArr, $alphabet, $k, $typeButt) {
// в общий алфавит необходимо добавить пробел
array_push($alphabet," ");
$y = array(); $x = array();
for($i = 0; $i < count($textArr); $i++) {
for($j = 0; $j <= count($alphabet); $j++){
// ищем в исходном массиве alphabet совпадения
if($textArr[$i] == $alphabet[$j]) {
// получаем шифрованный элемент
$y = ($j + $k) % count($alphabet);
// вычисляем по формуле подходящий элемент со сдвигом k
if($typeButt == 'true') echo $alphabet[$y];
else {
$x = ($y - $k + count($alphabet)) % count($alphabet);
echo $alphabet[abs($x)];}}}}}
Результатом работы скрипта будет массив $alphabet, который будет
вызываться с разными индексами в зависимости от типа операции: шифрование /
дешифрование.
5. Если ответ от сервера дошел, выполняется функция success и
значение поля вывода будет равно массиву $alphabet. В противном случае,
будет вызвана функция error для оповещения о возникшей ошибке. Общий
список AJAX-запросов представлен на рис.3.
Таким образом, использование AJAX сокращает время загрузки страниц,
поскольку больше нет необходимости постоянно обновлять всю страницу
целиком. Происходит ускорение загрузок страниц, и повышается удобство
использования веб-приложения пользователями. 

