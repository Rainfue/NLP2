Одна из самых важных вещей, когда разработчик начинает работать с новым фреймворком, это
его настройка. Особенно для менее опытных разработчиков очень важно, сколько времени им придется потратить на настройку среды разработки, настройку путей и т.д. В React Native есть простой и прямой способ сделать это, поскольку он связан с экосистемой NPM. Для Flutter разработчикам нужно скачать SDK, распаковать его и добавить в «PATH». Еще один действительно важный факт — это обновление проекта. Независимо от того, если обновление исправляет только незначительные ошибки, исправляет проблемы безопасности или включает новые функции. Этот процесс может стать действительно трудоёмким в React Native, так как в фреймворке есть много автономных зависимостей или других вещей. Обычно, это всегда приводит к проблемам, например, частая ошибка у разработчиков, когда
End-To-End настройка теста была4 нарушена, и разработчикам пришлось ждать, пока сопровождающие программы исправят проект. Кроме того, сам процесс обновления может показаться уродливым в
том смысле, что нужны новые конфигурационные файлы, которые разработчики часто пропускают. У
Flutter действительно простой процесс обновления, разработчику нужно только запустить flutter upgrade
и все.
Очень важно, когда речь заходит об использовании нового фреймворка, это опыт разработчика.
Не каждый разработчик знает все, и особенно не каждый язык программирования. Когда дело доходит
до React Native, разработчики будут использовать JavaScript или TypeScript, поэтому им будет довольно легко начать работу, если у них есть навыки веб-разработки. Однако самый главный опыт, который
иногда требует разработка (в зависимости от проекта) — это работа с нативным кодом (Java / Kotlin и
Objective C / Swift). Причиной может быть требование использовать очень специфическую функцию,
которая вообще отсутствует или только частично доступна как модуль React Native. Наконец, это будет
означать, что разработчику в конечном итоге потребуется копировать репозиторий и создать запрос на
извлечение. Flutter требует, чтобы разработчики использовали язык программирования Dart, который
был разработанный Google и Ларсом Баком, который принимал участие в разработке движка V8
JavaScript. Dart имеет синтаксис в стиле C (без указателей) и некоторые сходства с JavaScript. ПоАннотация: В данной статье автором рассматриваются основные сравнительные характеристики
между фреймворками React Native и Flutter.
Ключевые слова: react native, flutter, javascript, приложение, состояние, код.
COMPARISON OF FLUTTER AND REACT NATIVE IN THE DEVELOPMENT OF MOBILE APPLICATIONS
Dunaevsky Alexander Sergeevich
Abstract: This article presents the main comparative characteristics between the React Native and Flutter
frameworks.
Key words: react natively, flutter, javascript, application, state, code..
СОВРЕМЕННЫЕ ТЕХНОЛОГИИ 25
XXVIII International scientific conference | www.naukaip.ru
скольку Dart может компелироваться в JavaScript, его можно запустить в браузере [1, с. 115 ].
Как уже упоминалось ранее, добавить библиотеки / зависимости в проект React Native может
быть непросто. Иногда команда связывания react-native link module может привести к нескольким проблемам (двойное связывание или только частично). Обратить внимание, можно на то, что это не обязательно связано с React Native, а скорее с конфигурацией проекта или модуля, которого нужно связать.
Поэтому необходимо открыть проекты Android и iOS, чтобы вручную связать модуль. С Flutter этот процесс выглядит намного проще, достаточно добавить зависимость к файлу yaml с последующими символами flutter get packages. Собственный нативный или специфичный для платформы код может использоваться в обеих платформах. В React Native потребуется создать модуль, на который будут ссылаться, как упоминалось ранее. Связь между JavaScript и собственным модулем происходит через мост
очереди сообщений и объекты JSON. Flutter придерживается аналогичного подхода, называемого
platform channels.
Hot reloading (Горячая перезагрузка) — это функция разработки, которая позволяет вносить изменения и видеть их сразу, пока приложение работает. Это означает, что приложение не должно перезагружаться, что может быть очень полезно, особенно при разработке функций пользовательского интерфейса. Обе платформы имеют эти функции, но иногда React Native может затруднить настройку.
Flutter чувствует себя немного лучше в этом отношении. Стилизация и макет пользовательского интерфейса довольно просты в React Native. Тем не менее, все еще может потребоваться некоторое усилие, чтобы Android и iOS выглядели красиво. У Flutter совершенно другой собственный подход, чем у
React Native.
Управление состоянием — это определение того, как приложение обрабатывает данные и связанные потоки. В React Native, Redux - очень популярная библиотека, которая делает именно это. Она
помогает разработчику централизовать состояние приложения и предотвращает мутации данных, которые могут привести к очень сложной поиске ошибок. Redux состоит из хранилища с информацией о
состоянии приложения, действиях, редьюсерах и диспетчерах. Когда пользователь нажимает на кнопку, хранилище запускает действие и отправляет его. Хранилище решает, какой редьюсер отправляет
это действие. Затем диспачер просто принимает текущее состояние приложения, что-то с ним делает
(в зависимости от действия) и возвращает новое состояние. На этом пути состояние остается неизменным. Flutter также поддерживает Redux, управление состоянием может быть очень похожим. Когда
разработчик делает запросы к серверу, ему часто приходится работать с данными JSON. В React
Native можно использовать встроенную поддержку анализа JSON и stringify. Это очень большой недостаток, когда приходиться работать с Flutter, так как эти функции приходиться писать и преобразовывать самостоятельно.
Отладка — это функция, которая должна быть обязательной для каждого фреймворка. Она помогает разработчику анализировать проблемы в приложении, шагая по исходному коду и оптимально
отображая как можно больше информации о состоянии. Обе структуры имеют встроенную отладку. В
React Native есть тот факт, что во время отладки код JavaScript выполняется в движке браузера, что
означает, что производительность может отличаться. Кроме того, отладка для работы с React Native
очень сложна, когда некоторые зависимости замедляют процесс. Flutter имеет очень хорошую интеграцию отладки, приложение можно полностью отладить прямо из VS Code.
Когда дело доходит до тестирования, конфигурация может быть ужасной в React Native. Иногда в
какой-то момент преобразование запуска теста прерывается (код не может быть передан), и разработчик должны знать, почему это происходит и как это исправить. Это часто включает в себя добавление
или удаление плагинов / пресетов babel, что может занять некоторое время. Простота проведения тестов — это всегда хорошо, и никто не хочет об этом беспокоиться.
React Native и Flutter лучше с точки зрения производительности по сравнению с другими платформами, основанными на WebView. React Native отображает собственные представления в соответствии с кодом JavaScript, который он получает через мост. Это также дает то преимущество, что разработчик потенциально можете предоставлять обновления приложения по беспроводной сети, так что
обновляются только пакеты JavaScript приложения без промежуточного процесса в app store. Flutter
26 СОВРЕМЕННЫЕ ТЕХНОЛОГИИ
XXVIII международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
отличается от React Native тем, что имеет собственный движок рендеринга. Поскольку существует
только тонкий слой кода на C / C ++, все остальное написано на Dart, что дает разработчикам больший
контроль и лучшую производительность. Flutter может быть лучшим выбором, чем React Native с точки
зрения производительности.
И Flutter, и React Native являются отличной средой для разработки высокопроизводительных мобильных приложений на одном языке программирования. На данный момент трудно принять решение
о том, какой из них лучше, если разработчик пришёл из мира веб-разработчиков, то ему будет легче
начать работать с React Native. В противном случае, если это разработчик для Android или iOS, Flutter
может подойти им.