Сегодня клиент-серверные приложения широко применяются в производственно-сбытовой деятельности и в индивидуальном пользовании. Клиент-серверные приложения – сложные проекты, обычно являющиеся результатом труда большой команды разработчиков [1; с. 593].
Задача рационального выбора программной платформы (фреймворка) является первоочередной
при старте разработки любого клиент-серверного приложения. Для решения такой задачи необходимо
подвергать анализу особенности использования, преимущества и недостатки программной платформы.
Существуют исследования производительности программных платформ [3]. Однако за последние несколько лет такие исследования не проводились. Поэтому в ходе настоящего исследования
нами предпринята попытка актуального сравнения производительности существующих программных
платформ, а также выдвинута гипотеза о повышении производительности программных платформ
вследствие ускорившейся обработке запроса и эффективности распределения памяти в PHP 7.0. Используем PHP Framework Benchmark как программный инструментарий для проведения исследования
38 Фундаментальные и прикладные научные исследования
XIV международная научно-практическая конференция| МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
[4]. Для оценки улучшения в производительности современных поколений PHP проведем тестирование
на разных версиях (5.6/7.0/7.1).
Для исследования производительности были выбраны следующие программные платформы:
laravel-5.4, slim-3.0, zf-2.5, symfony-2.7, zf-3.0, ci-3.0, phalcon-3.0, laravel-5.3, yii-2.0, symfony-3.0.
Машина, на которой осуществлялось исследование, имеет следующие характеристики: операционная система – Linux Mint 17 Cinnamon 64-bit, Cinnamin Version 2.2.16, Linux Kernel (3.13.0-24-generic);
процессор – Intel Core i3-4160 CPU 3.60 Ghz X 2; память – 8GB; версия сервера Apache 2.4.7 (ubuntu).
Представим результаты тестирования в четырех этапах оценки: используемая память, производительность, время исполнения, число подключаемых файлов. Используется табличная форма представления результатов каждого этапа тестирования. Рассмотрим этапы в отдельности.
Характеристика «используемая память» выражает значение числа используемой программной
платформой памяти в процессе исполнения задачи (табл. 1). Показатель эффективности – снижение
числа потребляемой памяти.
Следующая характеристика «производительность» выражает число запросов, обрабатываемых
программной платформой за одну секунду (табл. 2). Показатель эффективности – увеличение числа
обрабатываемых запросов. 
Установив количество памяти занимаемой программной платформой при обработке запроса и
число запросов, которые он может обработать за одну секунду, рассмотрим время, которое система
тратит на исполнение задачи, – характеристику «время исполнения» (табл. 3). Интервал измерения –
Фундаментальные и прикладные научные исследования 39
XIV International scientific conference | www.naukaip.ru
от начала выполнения задачи до выдачи результата системой. Снижение времени исполнения является показателем эффективности. 
Число подключаемых файлов, описанных в документе «точки входа» программной платформы,
являет собой характеристику с соответствующим названием (табл. 4). Наименьшее число подключаемых документов является показателем эффективности характеристики. 
Интерпретируя табличные данные, можно говорить о существенном приросте производительности и эффективности ресурсосбережения при миграции на новые версии PHP. Так, при миграции с PHP
5.6 на PHP 7.0 усредненный прирост производительности равен 90%. При этом максимальное значение составило 200% (Zend Framework 2.5), а минимальное – 33% (Laravel 5.3). И далее – при миграции
с PHP 7.0 на PHP 7.1 усредненный прирост производительности равен 20%.
Время, которое система тратит на исполнение задачи, также снижается при миграции. Миграция
с PHP 5.6 на PHP 7.0 ускоряет систему на 44%, а с PHP 7.0 на PHP 7.1 на 14%.
В отношение характеристики «использование памяти» также произошла оптимизация. Эффективность миграции с PHP 5.6 на PHP 7.0 – 30% в этом контексте. Однако миграция с PHP 7.0 на PHP
7.1 не дало существенного прироста, а Laravel и Symfony демонстрируют тенденцию к увеличению потребляемой памяти.
Резюмируем результаты исследования. Наиболее производительной программной платформой
явился Phalcon. Число запросов, обрабатываемых Phalcon за одну секунду – 5907. Codelgniter 3 и Slim
Framework показывают менее выдающийся результат – 4019 и 2966, соответственно. Наименее производительными явились Laravel 5.3 и Laravel 5.4. Усредненный показатель этой программной платформы в разных версиях – 410 и 411, соответственно.
40 Фундаментальные и прикладные научные исследования
XIV международная научно-практическая конференция| МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
Таким образом, в результате настоящего исследования подтверждена гипотеза о повышении
производительности программных платформ вследствие ускорившейся обработке запроса и эффективности распределения памяти в PHP 7.0. Исследование может быть использовано разработчиками
при выборе программной платформы для создания клиент-серверных приложений.