На данный момент мы являемся свидетелями развития нескольких трендов
информационных технологий, потенциально определяющих дальнейший вектор будущего индустрии. Во-первых, область интернета вещей переживает настоящий бум популярности
по всему миру (рис. 1), что подтверждается целым рядом исследований. Например, в сентябре
2017 г. компания Hewlett Packard Enterprise (HPE) опубликовала результаты опроса ИТспециалистов из 20 стран мира, согласно которым по состоянию на 2017 г. примерно 57 %
компаний-респондентов уже тем или иным образом внедрили различные IoT-технологии, при
этом подавляющее большинство из них – 88 % – уже оценили позитивный экономический эффект от внедрения [1]. Согласно прогнозу консалтинговой компании IDC, достигнутый в отрасли прогресс – лишь начало глобальной цифровой трансформации. По результатам их исследования, уже в 2017 году расходы на внедрение проектов, связанных с IoT-приборами, вырастут на 17 %, а к 2021 году совокупные отметки достигнут 1,4 трлн долл. [2].
Общий объем рынка в численном выражении, согласно оценкам Juniper Research,
к 2021 г. вырастет в три раза по сравнению с 2016 г. [4], однако такой лавинообразный рост
популярности рассматриваемых решений неизбежно повлечет за собой и новые трудности,
от степени адаптации к которым зависит успех всей отрасли в целом.
Во-вторых, огромную популярность набирают решения, связанные с отказом от нативных приложений и ориентацией на веб-приложения. Примером этого может быть опыт
компании Patagonia, полностью отказавшейся от поддержки приложения в пользу оптимизации работы сайта [5], данной тенденции способствует и рост популярности Javascript (далее – JS) как универсального языка разработки (можем считать это третьим из рассматриваемых трендов): согласно исследованиям порталов Github и Stackoverflow, уже в 2016 г. этот
язык вышел на первое место по количеству реализованных проектов и созданных репозиториев [6, 7]. Рассмотрим основные причины такого лавинообразного роста популярности языка программирования, чья сфера применения еще несколько лет назад сводилась лишь к созданию анимации и прочих мелочей.
Сообщество разработчиков весьма практично подходит к вопросу использования того
или иного языка программирования при разработке продуктов и сервисов – зачастую используется наиболее удобный инструмент, полностью отвечающий требованиям поставленной задачи
[8, 9]. Таким образом, стремительное увеличение проектов, написанных на JS, во многом обусловлено появлением серверной реализации языка – Node.js, что в значительной степени унифицирует процесс разработки. В целом можно выделить два взаимодополняющих друг друга
подхода к проектированию подобных приложений, которые будут рассмотрены ниже.
Итак, перед нами стоит задача разработать веб-приложение,
которое сможет использовать данные, полученные с фитнес-трекера для удаленного мониторинга состояния пациента из группы риска. В общем схема получения данных выглядит так (рис. 4):	
Классический подход подразумевает создание трех различных версий приложения для
разных платформ: по одному для Android, iOS и веба. Однако есть в этом нечто иррациональное, от чего в процессе разработки все стараются избавиться в первую очередь – фактическое повторение одного и того же кода, что нарушает один из основных принципов написания качественного кода – DRY (Don’t Repeat Yourself). В качестве альтернативы предлагается создание гибридного приложения, что не только лишает необходимости повторять одну
и ту же работу три раза, но и значительно экономит время и финансы, необходимые для разработки. Начнем создание веб-приложения с получения информации о частоте пульса
с фитнес-трекера и постепенно превратим его в полноценное андроид-приложение.
Одна из основных проблем, встречающихся по мере разработки программного обеспечения, связанного с приборами интернета вещей, отсутствие открытого API для разработчиков с целью получения данных. Тем не менее существуют исключения из этого правила.
Так, имеются решения как от гигантов индустрии, представляющих собой своеобразных агрегаторов медицинской информации (Apple HealthKit, Google Fit), так и от частных компаний, занимающихся созданием фитнес-трекеров (FitBit SDK). Рассмотрим пример получения
данных через API FitBit, так как именно там все реализовано практически на нативном JS.
После регистрации и авторизации на сайте FitBit войдем в панель разработки FitBit SDK,
где из шаблона создадим новый проект работы с сенсорами трекера (рис. 5).
Фактически наше гибридное приложение готово, всего лишь несколько доработок
позволят превратить его в настоящий инструмент мониторинга состояния пациента
как им самим, так и врачом. Среди плюсов данного решения можно назвать универсальность
и сокращение необходимых для запуска проекта ресурсов, из минусов – подобное приложение будет работать медленнее нативного, о чем всегда нужно помнить при выборе подхода
для реализации по-настоящему высоконагруженных систем. Как можно улучшить подобное
решение? Превратить его в изоморфное, процесс создания которого описан ниже. 
В рамках популяризации JS на клиенте и на сервере сформировалась концепция SPA-приложения (Single Page Application), при котором единственный HTML-документ представляет собой оболочку для всех веб-страниц с динамически подгружаемыми стилями и скриптами. Фактически представляет собой нативное приложение,
(только не для операционной системы, а для браузера) и нивелирует классические минусы
в виде долгой перезагрузки при переходе по страницам, а также во время исполнения запросов на сервер (рис. 6). У данного подхода наблюдались и отрицательные стороны, в частности, подобные сайты крайне плохо индексировались поисковыми системами, что напрямую
связано с порядком JS-компиляции контента, не распознаваемого в выдаче поисковика, однако и здесь было найдено соответствующее решение – изоморфные приложения, код в которых способен одновременно выполняться как на клиентской, так и на серверной стороне:
при первом обращении компиляция происходит на сервере, и в браузер отдается привычный
HTML-документ, при этом после полной загрузки остальные процессы функционируют уже
в рамках классического SPA-подхода. Для достижения подобного результата активно используются JS библиотеки и фреймворки – например, React JS, являющаяся ядром такого
сайта, как Facebook.
Итак, результатом выполнения данного кода станет оптимизация работы сайта, более
быстрый отклик и общее повышение надежности в случае наличия ошибок на сервере или
в клиенте. Общая схема выглядит следующим образом: сервер практически мгновенно отдает основной контент, в то время как происходит одновременная загрузка клиентского кода.
Если этого не происходит, то выполняется обычный запрос к серверу. В зависимости от степени предварительной минификации и оптимизации данный подход позволяет сократить
время ожидания примерно на две секунды, что крайне положительно влияет на конверсию
коммерческих сайтов, а также автоматически улучшает шансы на более высокое место в выдаче поисковых систем [10].
Отдельно стоит упомянуть тот факт, что в данный момент широкое развитие получила платформа React Native, ориентированная на разработку мобильных приложений [11].
На данный момент технология еще не является зрелой и лишь проходит начальный этап своего формирования, но огромный потенциал заметен уже сейчас: веб-приложения, написанные на React JS, легко могут быть превращены в мобильное кроссплатформенное приложение, однако, по сравнению с гибридным подходом, описанным выше, тут имеются как свои
плюсы, так и минусы. Из очевидных плюсов – оптимизированная производительность на
любой платформе, из минусов – код все же придется переписывать и модифицировать,
так как отличия React JS от React Native достаточно велики. Таким образом, описанный выше метод создания нативных гибридных приложений является наиболее быстрым способом,
отлично подходящим для быстрого прототипирования и первоначального запуска проекта,
однако для более серьезного и высоконагруженного приложения стоит выбрать React Native,
как концептуально более правильную парадигму.
В данной статье были рассмотрены основные подходы создания современных веб-приложений мониторинга пульса, которые корректно работают не только в вебе,
но и в качестве нативных мобильных приложений. В ходе работы были выделены следующие подходы – классическое гибридное приложение и изоморфное приложение React JS, работающее в связке с Node JS и React Native. Необходимо помнить о том, что применение того или иного подхода в реальной жизни должно основываться на поставленных перед разработчиком и компанией задачах: если в качестве приоритетного направления рассматривается
скорейший вывод на рынок веб-приложения с одновременным захватом ниши в области мобильных приложений, то обычное гибридное приложение кажется наиболее оптимальным
выбором, так как возможные проблемы с производительностью будут в любом случае устранены с выходом следующей версии (если будет отмечена заинтересованность среди пользователей). Можно сказать, что подходит такой метод и для быстрого прототипирования.
В случае постановки более серьезных целей создания высоконагруженного комплексного
приложения следует обратить внимание на изоморфные приложения, дополненные отдельной версией React Native, что позволит в значительной степени повысить отказоустойчивость, скорость работы и охват аудитории. Уже сейчас можно с твердой уверенностью сказать, что количество разработок в области интернета вещей будет расти с каждым годом,
что делает вышеописанные технологии, позволяющие на совершенно разном уровне работать с подобными проектами, крайне актуальными.

