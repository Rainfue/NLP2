Проблема защиты конфиденциальной информации организаций в различных отраслях не теряет 
актуальности. По данным аналитического центра компании Positive Technologies – ведущего разработчика 
решений для информационной безопасности в России, количество атак на информационные ресурсы 
организаций не имеет тенденции к снижению. При этом около 70% атак являются целенаправленными, 
около 50% атак приводят к утечкам конфиденциальной информации. Чаще всего в качестве объекта атаки 
выступает сетевая инфраструктура организаций (компьютеры, серверы, сетевое оборудование) [1]. Кроме 
того по данным ещё одной ведущей российской компании-разработчика решений для обеспечения 
информационной безопасности организаций InfoWatch, значительная доля утечек (от 50% до 70%) 
происходит по вине или по неосторожности внутренних нарушителей – пользователей корпоративных 
информационных систем и сетей [2]. Одним из эффективных методов контроля действий пользователей 
является анализ сетевого трафика [3, 4]. В настоящей статье представлены результаты разработки и 
применения специализированной программы для анализа сетевого трафика с целью предотвращения 
целенаправленных злоумышленных действий пользователя.
Анализ сетевого трафика в режиме реального времени может выполняться комплексными системами 
управления информационной безопасности (SIEM – Security Information and Event Management) и систем 
предотвращения утечек (DLP – Data Leak Prevention), однако такие решения являются дорогостоящими, а 
их внедрение и эксплуатация требует дополнительных затрат на необходимое оборудование и 
привлечение высококвалифицированных специалистов. Вместо приобретения таких систем организация 
может воспользоваться услугами центра обеспечения компьютерной безопасности (SOC – Security 
Operations Center), в таком случае необходимо организовать непрерывную передачу данных от 
технических средств корпоративной информационной системы в SOC. 
В качестве альтернативы сложным многофункциональным системам комплексной защиты информации 
для анализа сетевого трафика могут быть использованы специализированные программы – снифферы 
(sniffers) [5-7]. Существует множество достаточно функциональных и удобных в использовании снифферов 
[8-9]. Однако могут возникнуть такие задачи, когда имеющихся возможностей снифферов окажется 
недостаточно. К таким задачам относится детектирование несанкционированных VPN-соединений (Virtual 
Private Network – виртуальная приватная сеть) [10]. VPN, как правило, используют в организациях для 
соединения двух или более инфраструктур, удаленных друг от друга. Трафик VPN шифрован – это дает 
гарантию, что трафик не будет прослушан и дойдет от сервера до получателя в неизменном виде. Но если 
на компьютере пользователя будет использовано несанкционированное программное обеспечение для 
установки VPN-соединений, то пользователь получит возможность предоставить злоумышленнику доступ 
к локальной сети организации [11]. Для того чтобы обнаружить факт установки несанкционированного 
VPN-соединения и выявить нарушителя, потребуется автоматизировать анализ сетевого трафика с 
учетом специфики VPN-соединений [12].
VPN – это защищенный туннель, работающий по принципу «клиент-сервер». Соответственно у 
программного обеспечения для установки VPN-соединения есть клиентская и серверная часть.
Рассмотрим принцип клиентской части. Клиент настраивает операционную систему так, чтобы все пакеты 
инкапсулировались и/или, в зависимости от настроек пользователя, с компьютера направлялись на этот 
сервер. Так же клиентская часть постоянно опрашивает сервер на наличие его доступности. Сервер же 
при получении пакета отправляет его дальше в сеть. VPN, как правило, работает по протоколу TCP. 
И известны следующие аспекты VPN:
• постоянное соединение клиента с сервером за пределами локальной сети;
• весь трафик идет по пути клиент-сервер, все запросы, которые мог бы отправлять компьютер, идут 
через этот VPN-сервер;
• все соединение проходит через один конкретный IP адрес.
Существует несколько протоколов VPN-соединений:
• PPTP;
• OpenVPN;
• WireGuard;
• SoftEther;
• SSTP;
• IPSec;
• «гибриды» IKEv2/IPSec;
• L2TP/IPSec. 
Все эти протоколы, как правило, работают на определенном (стандартном) порту протокола TCP или 
UDP, которым можно изменить, и «замаскироваться» под другой протокол, например, использовать порт 
TCP 443, что соответствует протоколу HTTPS, который так же является зашифрованным. Но различить 
HTTPS трафик от других все же можно, поскольку при установке VPN-соединения все запросы, 
отправляемые пользователем, идут через один IP-адрес, который можно вычислить по специфической 
активности – один пользователь часто обращается только к одному серверу, и как следствие будет 
довольно высокое количество запросов к подозрительному серверу. Также VPN-соединения работают по 
определенному порту, например, злоумышленник может замаскироваться под HTTPS протокол, используя 
порт TCP 443, и так оперативно выявить его не получится.
Рассмотрим следующую топологию сети (рисунок 1):
Infect-PC – это компьютер пользователя, на котором развернут VPN-клиент, Router – маршрутизатор, 
на котором настроен NAT и базовый Firewall, который блокирует все входящие соединения, PC – это 
отдельные ПК сотрудников компании.
Злоумышленник никак не сможет подключиться к данной инфраструктуре, так как работает Firewall, 
блокирующий все входящие соединения, что обеспечивает достаточную защиту внутренней сети. Но 
ничего не спасает от инсайдера, который может установить «шпиона», и тем самым создать «зараженную 
машину».
Можно отличить HTTPS трафик от VPN с помощью DPI систем или реализаций.
DPI – это Deep Packet Inspection, которым может сканировать само содержимое пакета, и отличать по 
сигнатуре пакета, «необычной» для HTTPS трафика последовательности объекта VPN соединение или 
HTTPS соединение [10]. Для обхода данного метода можно использовать HTTPS proxy поверх VPN. 
Дальше как вариант – это «простукивать» данные IP адреса, по порту, чей порт протокола является 
стандартным, например для HTTPS протокола стандартным является порт 443, и именно поэтому злоумышленники обычно используют данный порт. Для обхода данного определения валидности трафика 
обычно используют WEB-Socket, который обладает похожей сигнатурой с обычным HTTPS трафиком, 
который, по сути, является обычным HTTPS сервером, но с необычными данными. И сервер присылает 
стандартный ответ для HTTPS сервера, либо используют Knocker, который включает или выключает 
перенаправление трафика с обычного web на VPN, но в подавляющем количестве организаций все порты 
кроме 443 и 80-х портов, как правило, отключены, и есть решение – использовать Web-Knoker, который 
включает или отключает перенаправление специальной HTTP/HTTPS командой. И в нужный момент 
злоумышленник может «включить» или «отключить» маскировку VPN, и в ответ на «включенную 
маскировку» будет приходить, например, пустая веб-страница, или зеркало какого-либо сайта.
Также для отличия VPN туннеля от реального трафика можно использовать DNS, а именно постоянно 
сохранять DNS-ответы, и сопоставлять IP адреса пользователей от неизвестных IP. Например,
пользователь обращается по адресу example.com, компьютер обращается к DNS серверу, что бы тот 
ответил, какой используется IP у этого домена, и далее уже обращается по тому IP адресу, что прислал 
DNS сервер. Если в условной таблице DNS-IP нет данного IP адреса – значит, пользователь не 
обращался к DNS серверу, что уже довольно подозрительно, либо можно получать информацию об IP с 
помощью NSLookup, который предоставит DNS имя данного IP. Но более надежно будет сохранять DNSзапросы, но это не всегда эффективно, т.к. DNS запросы сохранятся в кэше, так что лучше использовать 
два варианта сразу, если нет имени, то тогда использовать NSLookup. Но ничего не мешает 
злоумышленнику арендовать у делегатора доменов свой домен, и использовать его.
Также в теории можно было бы смотреть длину Hello-пакета TLS соединения [10], но это не было бы 
особенно эффективно, так как рассматриваются VPN-туннели как нечто обобщенное, поскольку у каждого 
протокола свой метод идентификации.
Таким образом, известно, какие есть меры обнаружения VPN-подключения и соответствующие им 
меры «обхода» данного обнаружения, представленные в таблице 1.
Как видно из таблицы 1, все методы требуют только проверку вручную. Но проверять каждый ресурс 
«руками» занятие не эффективно, поскольку выполняется слишком медленно. Поэтому логичнее всего 
будет ручная проверка наиболее частообращающихся «недоверенных» ресурсов, с использованием
сочетания всех методов обнаружения в совокупности. 
И для данной проверки необходимо использовать программное обеспечение, которое будет 
формировать отчет по всем клиентам и их наиболее частому обращению к каким-либо ресурсам.
Используемое оборудование:
• Mikrotik RB750Gr2; 
• 2 x86 ПК.
Сеть будет устроена по топологии, которая показана на рисунке 1. Для начала необходимо понять, 
какие требования к программе необходимы, для мультикомплексного анализа трафика, и как следствие
для обнаружения злоумышленника.
Требования следующие:
• вывод всех клиентов;
• вывод наиболее частых запросов каждого клиента по отдельности;
• возможность отфильтровать, добавить в белый список безопасных IP адресов.
Так же для реализации сниффера необходимо сканировать трафик. У RouterOS есть необходимые 
инструменты, называется Packet Sniffer. Так же присутствует функция Streaming, которая пересылает все 
пакеты к определенному порту, в зависимости от фильтра по протоколу TSZP (TaZmen Sniffer Protocol), 
который выступает протоколом-транспортировщиком других протоколов.
Итак, перейдем к реализации. Для захвата пакетов будет создана программа на ЯП C#, которая будет 
работать с использованием библиотеки Pcup.Net [12]. Предполагается запуск внутри ОС Linux, на который 
будет установлен пакет Microsoft .Net 6. 
При получении пакета с маршрутизатора программа получает UDP пакет, и для нормального чтения 
инкапсулированных внутрь протокола TSZP пакетов необходимо проанализировать состав данного
получаемого пакета. 
Для нормального чтения данного протокола необходимо знать его структуру, перейдем к ней.
Структура TSZP пакета следующая:
• Версия (Version);
• Тип (Type);
• Инкапсулированный протокол (Incapsulated Protocol);
• Помеченные поля (Tagget Fields);
• Инкапсулированный пакет (Incapsulated Packet);
Схема протокола TSZP приведена в таблице 2.
Зная, как устроен TSZP пакет, можно его прочитать и использовать в дальнейшем.
Итак, после того как программа создана, мы наконец сможем приступить к анализу трафика.
Программа следит за всеми пакетами, отправляемым пользователем во внешнюю сеть, и сопоставляет 
клиентов и серверов, пример отчета приведен на рисунке 2.
В отчете на рисунке 2 показаны 20 наиболее популярных сервера, и при взгляде на отчет можно 
отметить сразу несколько претендентов, а именно github, yandex, VK. Далее можно определить по серверу 
WhoIS неизвестные IP адреса, например 12-й в списке 178.248.237.68, проверив по сервису WhoIS можно 
понять, что данный IP адрес принадлежит Habr`у.
Подключимся к VPN и через некоторое время проверим трафик.
Как видно из рисунка 3, за достаточно короткое время образовалось достаточно большое количество 
запросов. Посмотрев на то, что выдал NSLookup, сразу можно заметить, что IP принадлежит компании, 
которая предоставляет услуги VDS, что, скорее всего, является VPS сервером, даже если бы порт был 443.
Разработанное специализированное программное обеспечение является простым и удобным в 
использовании. Представленные результаты использования разработанной программы подтверждают её 
эффективность для решения поставленной задачи детектирования несанкционированного VPNсоединения в локальной сети организации. Исходный код программы в дальнейшем может быть 
модифицирован с учетом специфики сетевой инфраструктуры и задач конкретной организации.