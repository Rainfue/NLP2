Сегодня дистанционное образование становится все более востребованным
вследствие систематического развития информационных и телекоммуникационных
технологий. Практически каждый, кто заинтересован в получении качественного
образования, при наличии лишь компьютера и доступа в Интернет имеет возможность
общения с преподавателями, находящимися в любой точке мира. Применение технологий
дистанционного образования способствует обеспечению индивидуально-личностного
подхода к каждому ученику, построению его индивидуальной образовательной траектории;
ориентирует обучающегося на творческий поиск при получении знаний и достижении цели.
Кроме того, особенно важным считаю здесь наличие регулярной обратной связи, получение
данных обучающегося, что позволяет проводить постоянный мониторинг развития и
корректировать образовательную программу.
Современное дистанционное обучение строится на использовании нескольких
составляющих – это среда передачи данных и методы обучения, определяемые
особенностями среды.
Несмотря на то, что истоки дистанционного обучения берут свое начало еще в конце
XVIII века, а на текущий момент информационных продуктов для реализации таких
технологий достаточно много, до сих пор существует проблема создания удобного и
комфортного, но в то же время, высокотехнологичного и полифункционального для всех
участников образовательных отношений единого интерактивного информационного
пространства.
Этой проблемой я и занимаюсь в течение нескольких лет. На данный момент
получены результаты в виде нескольких прототипов приложений, ведущих к цели
построения такого информационного пространства.
Изначально была создана система, работающая в локальной сети, как отдельное
приложение, позволяющая проводить тестирование и оценивать, основываясь на
полученных результатах, уровень знаний обучающихся. Затем данная система была
переведена в режим онлайн с доступом через браузер. Последний завершенный этап -
внедрение в текущую информационную систему дополнительных способов коммуникации
– использование видео-чата, позволяющего преподавателю объединить в одной «комнате»
для занятий сразу нескольких обучающихся. Кроме того, переработана система
тестирования, тесты приведены к более универсальному виду, что позволяет применять
различные типы тестирования.
Главным преимуществом построенного решения является то, что у преподавателя
любого направления (будь то школьный учитель, преподаватель вуза, бизнес-тренер,
проводящий занятия для предприятий, специалист отдела кадров, которому нужно
провести некое вводное тестирование кандидатов и т.п.) есть возможность реализовать свой
учебный план, наполнить систему только ему нужным контентом и проводить занятия и
контроль знаний в том формате, который он выберет. Таким образом, в системе нет никаких
шаблонов, она не привязана к какой-либо учебной программе, и это позволяет использовать
её в любой области, где необходимо взаимодействие "учитель - ученик".
На данный момент ведутся исследования возможностей новых продуктов разработки
веб-приложений для улучшения функционала системы, чтобы еще больше приблизиться к
цели и построить удобное и комфортное интерактивное информационное пространство.
Так, следуя последним тенденциям, возможна смена интерфейса приложения и приведение
его к виду Single Page Application - веб-приложение или веб-сайт, который помещается на
одной веб-странице с целью обеспечения более гибкого пользовательского опыта сродни
настольному приложению. Рассматривается использование технологий AngularJS + Spring
MVC + разработанный ранее серверный каркас на связке Spring и Hibernate. Так же
исследуется возможность разработать составляющую продукта, отвечающую за "банк
данных" курсов. Для преподавателя появится возможность добавлять учебные материалы
и предоставлять к ним доступ отдельным ученикам или группам учеников. Естественно,
что на фоне этих нововведений планируется постоянная оптимизация и доработка
внутренних механизмов и доведение продукта до совершенства.
На данный момент изучаются возможности, которые дает AngularJS при построении
веб-приложения. Из основных, отвечающих поставленным целям и задачам можно
выделить следующие:
1) Связывание данных - способ автоматического обновления вида при изменении
модели, а также обновление модели при изменении вида.
2) Контроллеры добавляют поведение DOM-элементам. AngularJS позволяет описать
поведение в простой форме без шаблонного обновления DOM, регистрации колбэков или
сканирования изменений модели.
3) В отличие от других фреймворков, нет необходимости наследоваться от
собственных типов; оборачивать модель методами доступа. Только JavaScript. Это
позволяет легко тестировать код, обслуживать, повторно использовать и опять же
освободить от шаблонов.
4) Внешняя связь показывает, в каком месте приложения находится пользователь. Это
полезно, так как пользователи смогут создавать закладки и отправлять ссылки на элементы
приложения по электронной почте. Для многостраничных приложений это не проблема, но
AJAX-приложения по своей природе не такие. AngularJS сочетает в себе преимущества
внешнего связывания с поведением десктопного приложения.
5) Валидация. Проверка форм на стороне клиента важна, т.к. делает приложение
удобнее для пользователей. AngularJS позволяет задавать правила проверки формы без
необходимости писать JavaScript код.
6) Повторное использование. Использование директив для создания повторно
используемых компонентов. Компонент позволяет скрыть сложную DOM-структуру, CSS
и поведение. Что позволяет сфокусировать внимание, на том что приложение делает или
как оно выглядит.
7) Локализация. Одна из важнейших особенностей серьёзного приложения -
локализация. Angular содержит фильтры и директивы которые помогут сделать
приложение доступным для разных языков и культур.
Также проверяется возможность замены старых шаблонов страниц Tapestry при
помощи инструментов, которые дает Spring MVC.
Возможно, использование новых подходов позволит сделать построенное решение
более удобным и быстродейственным, данная тема в настоящий момент исследуется