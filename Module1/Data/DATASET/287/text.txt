Подготовка к сборке модуля – это довольно-таки сложный
процесс создания Makefile, связанный с множеством зависимостей сборки движка V8 и Node.js. Однако существует
вспомогательный проект node-gyp, автоматизирующий этот
процесс. Проект был инициирован Google и поддержан компаниями Bloomberg Finance и Yandex. Для работы node-gyp
требуется наличие Python. Инсталляция node-gyp может
осуществляется через менеджер пакетов Node.js npm:Поле target_name задает имя модуля, а поле sources –
имена исходных файлов нашего модуля.
После выполнения команды мы получим в директории
build следующие файлы:
binding.Makefile config.gypi hello.target.mk Makefile
Теперь достаточно выполнить Makefile, мы скомпилируем
объектный код для Node.js, который aвтоматически подгрузится при выполнении инструкции require.
Node.Js – кроссплатформенный продукт, однако написание addons, возможно, потребует учесть особенности разных платформ, добавление путей и зависимостей
от внешних библиотек. Ниже приведен пример .gyp-файла,
использующего libxml2, в котором с учетом кроссплатформенной зависимости добавлена JS-секция conditions: Вроде бы и все. Но, как мы уже знаем, в основе Node.js лежит асинхронный поток исполнения, построенный на функциях обратного вызова: когда сервер находится в режиме
ожидания, связанного с вводом-выводом, то в этот квант
времени сервер может обработать другой запрос, а по окончании операции ввода-вывода осуществляется вызов функции обратного вызова (callback).
Где нам может понадобиться callback? Например, мы разрабатываем драйвер для собственного хранилища данных
или демона обработки задач, основанный на неблокированных сокетах. В API мы должны предусмотреть функцию обратного вызова, в которой должна быть реализована логика
обработки данных на JavaScript. Как только ОС дала знать
(обычно через сигнал SIGIO), что обработка операции ввода вывода закончилась, мы вызываем функцию обратного вызова, которая должна быстро обработать наши данные и передать управление дальше, на обработку других запросов.
Рассмотрим, как использовать функции обратного вызова. Создадим проект модуля hello_cb, файл binging.gyp: Объема данной статьи вполне хватает для самостоятельного написания простого addon-модуля. Но, как показывает
практика, для написания addon-модулей используются операции ввода/вывода, сокетов или многотредовости. В этом
случае рекомендуем использовать встроенную в Node.js
библиотеку libuv. Обзор данной библиотеки и ее использование в Node.js требуют отдельного рассмотрения. 