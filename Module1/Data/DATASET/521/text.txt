На сегодняшний день веб-технологии имеют обширный спектр применения. Сейчас уже почти
никто не использует и не создает классические «десктоп»-приложения, все реализуется на базе интернет-технологий. Это позволило объединить один пользовательский интерфейс приложения как для
браузера, так и для классической программы; связать данные с веб-сайта и приложения в единую базу,
и использовать их в обоих случаях; пользоваться интернет-сервисами без постоянного подключения к
серверу, только при необходимости обновления. И это еще не все преимущества такого подхода. С
эволюцией ИТ-технологий эволюционировал и веб, позволив заместо громоздких многостраничных
сайтов, где под каждый элемент подгружается своя HTML-страница, создавать компактные одностраничные сайты, которые могут реализовывать все поставленные бизнес-задачи. Самым важным моментом в истории развития веба было создание языка JavaScript, без которого бы не было возможна реализация большинства функций современных интернет сайтов.
Программы на языке JavaScript называются скриптами, встраиваются в HTML и выполняются автоматически, поэтому язык считается встраиваемым. Ключевой особенностью языка является то, что
скриптам не нужна специальная подготовка препроцессора или компиляция, они запускаются на встроенных в браузеры движках, которые берут на себя процесс интерпретации и компиляции, выполняя это во время работы страницы в браузере. В дополнение можно добавить, что язык JavaScript прост для
восприятия и лёгок в использовании и поддерживается всеми существующими браузерами.
На «чистом» JavaScript пишется мало веб-приложений, ввиду небольшого количества встроенных в язык библиотек, поэтому в большинстве случаев для разработки веб-страниц используются различные фреймворки, предназначенные для создания различных веб-сайтов, сетевых приложений, сервисов или ресурсов. Они упрощают разработку и избавляют от необходимости написания рутинного
кода. Из-за большого числа библиотек в фреймворках, с их помощью можно легко разрабатывать элементы интерфейса, упростить доступ к базе данных и не писать лишний код. Фреймворк определяет
структуру веб-приложении (framework в переводе с английского буквально означает «каркас»).
Для разработки был выбран фреймворк Vue.js. Его особенность заключается в том, что он лёгок
для освоения, сохраняя при этом мощную функциональность. Vue подходит для создания сложных одностраничных приложений. Vue поддерживает модульность, т.е. можно создать множество независимых друг от друга компонентов Vue и легко внедрить их друг в друга или в отдельную страницу. Vue
отличается очень малым весом (около 16 Кб) и большим быстродействием. Исходя из всех перечисленных выше аспектов, именно фреймворк Vue.js является идеальным вариантом для построения динамической веб-страницы.
В качестве примера реализации фреймворка Vue.js мной был создан небольшой одностраничный веб-сайт для управления мероприятиями на условном предприятии. Сайт предоставляет информацию в табличном виде всех запланированных мероприятий с описанием места проведения, ответственным лицом, необходимым оборудованием и отделом. К веб-сайту была создана база данных на
PostgreSQL и приложение на ASP.NET, но в данной статье будет рассматриваться только реализация
клиентской части.
Для отображения информации на странице в виде таблицы была выбрана библиотека
DevExtreme, в которой есть компонент таблицы DataGrid. Его особенность заключается в готовой интеграции с Vue, удобной работе с отображением данных, богатый набор высокопроизводительных UIкомпонентов, а также готовые демоверсии с открытым исходным кодом на официальном сайте. Для
формы ввода данных в таблицу была выбрана библиотека c UI-компонентами Vuetify и её компонент VForms. Так же, для удобного управления состоянием веб-страницы подключена библиотека Vuex,
представляющая централизированное общее состояние для всех компонентов в приложении и правила, обеспечивающие предсказуемое изменение состояния.
На странице браузера находится таблица, которая отображает все прошедшие и запланированные встречи со следующими колонками: информация о встрече, здание и этаж, ответственный и его
отделение, необходимое оборудование.
Приложение выполнено на трёх Vue-компонентах: MainPage.vue, EditForm.vue и new.vue. Одной
из особенностью Vue является то, что приложение можно составить из множества небольших компонентов, которые будут «общаться» друг с другом и передавать необходимые данные, что, в свою очередь, снижает лишнее повторение кода, если один элемент может встречаться в нескольких местах
веб сайта. На примере MainPage.vue рассмотрим структуру компонента. Сам по себе файл компонента
представляет собой HTML-разметку, состоящую из трех элементов: шаблон (template), отвечающий за
расположение элементов на странице и привязки к ним логики; скрипт (script) – та часть, где прописана
сама логика элементов страницы на языке JavaScript; стили (style) – если требуются добавление своих
CSS классов для элементов. Код файла MainPage.vue
Таким образом, JavaScript фреймворк Vue.js является довольно универсальным инструментом при
создании современных веб-сайтов и микросервисных приложений, а так же очень прост в освоении.