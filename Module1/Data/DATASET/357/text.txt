CSS – одна из широкого спектра технологий, одобренных консорциумом W3C под
общим названием «Web Standarts». Технология CSS (Cascading Style Sheets) позволила
разделить логическую структуру документа от его представления, а также применять для
нескольких схожих документов единый стиль оформления.
Первая спецификация CSS1, принятая в 1996 году, была далека от универсального
инструмента для верстки. CSS1 на тот момент заменил элементы форматирования из HTML
(тэги <font> и <br/>) на язык описания стилей.
Появились свойства блоков, такие как высота и ширина (заменившие одноименные
атрибуты в HTML), внутренние (padding) и внешние (margin) отступы и рамки. Также в
спецификацию входили ограниченные средства по расположению элементов на странице,
такие как float и clear, предназначенные, прежде всего, для обтекания элементов текстом.
Однако из-за отсутствия в CSS инструментов, предназначенных для разметки страницы,
свойство обтекания стали использовать для создания раскладки страницы.
Разметка на float. Метод раскладки на float являлся первым достойным решением
относительно верстки на HTML-таблицах, и, в дальнейшем, даже стал использоваться в
большинстве популярных CSS-фреймворков [1]. Но, несмотря на это, данный подход имеет
ряд существенных недостатков:
1. при разметке свойством float родительский элемент, в котором расположены floatэлементы, «схлопывается» до нулевой высоты, а дочерние элементы выпадают из
основного потока. Для решения данной проблемы родительскому блоку требуется
задавать так называемый класс .clearfix, или псевдораспорку:
.clearfix:after {
content: "";
display: table;
clear: both; }
2. если float-элементы, расположенные в ряд, имеют разную высоту, то элементы из
следующей строки могут «зацепляться» за элементы первой строки, занимая тем самым
свободное место, вместо того чтобы выстраиваться друг за другом в строку. Это происходит из-за того, что изначально элемент HTML по свой природе всегда стремится к
верхнему краю документа, а потом уже влево или вправо, как ему задает свойство float.
Обходить данные проблемы можно путем отмены обтекания у каждого начального
элемента в последующей строке. Во фреймворках эта проблема решается наличием
элемента-строки (например, класс row в Bootstrap), но тогда нужно четко знать, сколько
элементов будет в ряду.
За счет того, что свойство float изначально предназначалось для обтекания картинок
текстом, для создания раскладки страницы требуется использование дополнительных
приемов и трюков. Также в такой раскладке нет возможности горизонтального и
вертикального выравнивания элементов.
Блочно-строчная разметка. В дальнейшем после выпуска спецификации CSS2 в
1998 г., стал доступен еще один способ разметки, использующий блочный, строчный и
блочно-строчный контексты форматирования (display: block/inline/inline-block) [2].
Раскладка на блочно-строчных элементах имела ряд преимуществ перед floatраскладкой. Так как эти элементы имеют свойства как блоков, так и строк, их можно
выравнивать по горизонтали за счет текстового свойства text-align, и по вертикали за счет
блочного свойства vertical-align.
Однако при разметке на inline-block можно столкнуться со следующей проблемой: при
выстраивании нескольких блочно-строчных элементов в ряд, между ними образуются
пустые текстовые узлы, или whitespaces. Их можно заметить, открыв HTML-код в консоли
браузера. Это связано с тем, что inline-block, по сути, имеет свойства обычной буквы
(символа), т.е. весь строчный блок составляет всего лишь одну букву в строке, одну единицу,
несмотря на то, что может содержать в себе множество других символов и элементов. А
следовательно, элементы inline-block, как и простой текст, имеют пробелы, которые и
появляются в HTML-разметке.
Существует несколько методов, которые используют разработчики, чтобы удалить эти
пробелы из разметки, например, удалить переносы строк в коде HTML, установить в
родительском элементе нулевой размер шрифта, добавить элементам отрицательный
внешний отступ и др.
Однако данные методы либо засоряют CSS-код лишними свойствами, либо снижают
удобочитаемость HTML-разметки. Хотя данный метод раскладки и имеет некоторые
преимущества, однако, свойство display: inline-block также, как и float, изначально не
предназначено для создания сложных разметок документа, поэтому имеет весьма скудные
возможности по настройке.
СSS3 и Box Alignment Module. Ситуация в области разметки веб-страницы
кардинально изменилась с выходом новой спецификации CSS3. Данная спецификация
является самой масштабной по сравнению с CSS1, CSS2 и CSS2.1. В отличие от предыдущих
версий спецификация разбита на модули, разработка и развитие которых идет независимо.
Значительную роль в области разметки страницы сыграл модуль CSS Box Alignment
Module Level 3 [3], который ввел новые свойства выравнивания элементов по главной и
поперечной осям, выравнивания элементов внутри контейнера, выравнивания отдельно
взятых элементов. Также данная спецификация ввела и новые значения свойств, что
позволило настраивать раскладку элементов еще проще. Например, значения flex-start/flexend выравнивают элементы от начала или от конца главной оси соответсвенно. А благодаря
значениям space-around/space-between элементы выравниваются по главной оси, распределяя
свободное место вокруг себя или между собой. На основе данного модуля выравнивания
базируются два вида раскладки, разработанных в стандарте CSS3 – Flexible Box Layout
Module и Grid Layout Module.
1. Flexbox. Одним из основных понятий во fleх-разметке являются главная и поперечная оси.
Направление осей можно изменять с помощью свойства flex-direction: column/row,
заданного для контейнера с элементами [4]. С помощью свойства flex-wrap можно
управлять выводом элементов – с переносом блоков в следующую строку или без него.
Создавать гибкую раскладку на flexbox позволяют следующие свойства:
– flex-grow: определяет, насколько будет растягиваться элемент относительно других
элементов в контейнере при увеличении размеров экрана;
– flex-shrink: определяет, насколько будет сужаться элемент относительно других
элементов в контейнере при уменьшении размеров экрана;
– flex-basis: указывает исходный размер элемента, прежде чем свободное пространство
распределится в соответствии с факторами гибкости.
Одним из преимуществ fleх-разметки по сравнению с предыдущими: высота всех
элементов автоматически подстраивается под наибольший элемент в строке. Настроить
элементы таким образом при float- и inline-block-раскладках невозможно.
Также в раскладке на flexbox можно изменять порядок блоков засчет свойства order.
Данное свойство может быть весьма полезным при адаптации веб-страницы под разные
разрешения экранов, так как зачастую требуется изменить порядок отображения элементов
на мобильных устройствах.
2. Grid Layout. Появление флексбоксов несомненно упростило решение большого
количества задач верстки, но данная технология пригодна для построения одномерных
макетов, т.е. по одной оси. По этой причине вскоре был введен новый модуль разметки
страницы (Grid Layout Module) [5], который позволяет строить макет веб-страницы
одновременно по двум осям.
Для того чтобы создать сетку в документе достаточно задать родительскому
контейнеру display: grid, настроить размеры и количество колонок и строк с помощью
свойств grid-template-columns и grid-template-rows. Чтобы разместить элементы внутри сетки,
им задаются свойства grid-column и grid-row.
В CSS-Grid вводится новая относительная единица измерения – fr, определяющаяся как
фракция или часть, т.е. если у одной колонки задана ширина в 1fr, а у второй – 2fr,
следовательно, вторая колонка будет в 2 раза большей ширины, чем первая. Данная единица
помогает легко создавать гибкие сетки.
Также, помимо большого количества настроек, предоставляемых модулем Box
Alignment, в CSS-Grid также введены новые функции:
– repeat(): определяет повторяющиеся колонки сетки, принимает два аргумента:
количество повторений и размер колонки;
– minmax(): задает минимум, до которого можно ужимать полосу, и максимум, на
который она может растянуться, если хватит места;
– fit-content(): принимает параметр, который указывает максимальный размер полосы
сетки.
В CSS-Grid также существует такое понятие как «grid-area». Это пространство внутри
контейнера с сеткой, в которое может быть помещен один или больше элементов сетки. Этот
элемент может состоять из одной или более ячеек сетки. Для работы с grid-areas существуют
два свойства:
1. grid-template-areas: свойство для контейнера сетки. Определяет шаблон сетки, ссылаясь на
имена областей, которые заданы с помощью свойства grid-area. Повторение названия
области приводит к тому, что содержимое охватывает эти ячейки. Точка означает пустую
ячейку. Сам синтаксис предоставляет визуализацию структуры сетки;
2. grid-area: свойство для дочерних элементов сетки. Дает название элементу сетки, чтобы
можно было ссылаться на него с помощью шаблона, созданного через grid-template-areas.
Таким образом можно разметить страницу, используя шаблон grid-area:
grid-template-areas: "header header"
"menu content"
"footer footer";
Одним из основных преимущест Grid Layout является то, что подобная раскладка
полностью не зависит от кода HTML и порядка следования элементов в нем, так как
положение каждого элемента на странице задается в CSS.
Несомненно, за последние годы стандарт CSS3 произвел настоящую
революцию в области разметки веб-страниц: возникновение таких технологий как Flexbox и
CSS-Grid упростило решение огромного количества задач в верстке и позволило избежать
проблем, существовавших ранее в разметках на float и inline-block. На данный момент
Flexbox поддерживается практически на равне с inline-block (более 95%), что позволяет
применять данную технологию для большинства задач при верстке. Что касается CSS-Grid,
так как данный модуль является достаточно новым (февраль-март 2017 года), ее поддержка
браузерами пока не достаточно высока (76,7%). Также стоит отметить, что излишне частое
использование Flexbox и Grid на странице может давать нагрузку на производительность, так
как эти модули содержат большое количество настроек, поэтому не стоит использовать
Flexbox и Grid в тех задачах, которые можно решить с помощью float или inline-block, чтобы
не перегружать браузер.

