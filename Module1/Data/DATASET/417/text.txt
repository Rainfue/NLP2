Для построения веб-приложения с возможностью обеспечения связи
между пользователями необходимо было подобрать соответствующий набор
инструментов разработки.
Так как разработку приложения необходимо было ускорить, был выбран
единый язык программирования, а именно JavaScript, который отлично
подходит для быстрого прототипирования приложений.
Веб-приложение построено на современных фреймворках для языка
JavaScript React и Express. Использование фреймворков также обусловлено
малым временем, отведенным на выполнение поставленной задачи.
React отвечает за клиентскую часть и позволяет при правильной
настройке обеспечить должную структурированность проекта, тем самым
увеличивая скорость работы. Клиентский фреймворк включает в себя
функционал, отвечающий за взаимодействие непосредственно с HTML DOMдеревом. React – это «реактивный» фреймворк, позволяющий обеспечить связь
между данными и HTML разметкой.
Express в свою очередь отвечает за серверную часть и позволяет
существенно сократить синтаксис Node.js (серверный JavaScript), при этом не
сильно теряя в скорости работы.
Так как приложение является достаточно большим, с точки зрения
взаимодействия различных объектов с отличающимися типами данных, то
было принято решение использовать в проекте TypeScript. TypeScript – это
компилируемый, типизированный вариант JavaScript. Типизация помогает
облегчить процесс отладки во время внештатных ситуаций, также позволяет в
разрабатываемой IDE получать подробную информацию об объекте
взаимодействия, что существенно увеличивает скорость разработки при работе
с незнакомыми типами данных. Для того, чтобы TypeScript работал корректно с
его окружением, а именно с React, его необходимо настроить. Для настройки в
корне проекта необходимо создать конфигурационный файл с названием
«tsconfig.js»[1].
Так как веб-приложение в ходе своего функционирования подразумевает
плотное взаимодействие с физическими компонентами системы, а именно с
видеокамерой и микрофоном, необходимо настроить хостинг для разработки с
повышенной безопасностью. Внимание к безопасности обусловлено не только
заботой о конечном пользователе, но и требованиями выставляемыми
современными браузерами. Для того, чтобы иметь возможность использовать
веб-приложения с любого устройства необходимо применение SSL
шифрования, которое позволяет использовать защищенный протокол https и
тем самым иметь возможность делегирования доступа к микрофону и
видеокамере.
Разработка и дальнейшее тестирования приложения осуществляется в
локальной сети, что позволяет уйти от издержек, возникающих при оплате
сервера, SSL сертификата и выделенный домен. Согласно стандарту
безопасности браузера Google Chrome, устройство может выдавать доступ на
использование микрофона и видеокамеры, для сайтов с SSL шифрованием или
если доступ запрашивается от localhost [2, c. 7].
Для проверки соединения между несколькими пользователями
используется сервис для разработки glitch.com. Непосредственно на сайте есть
возможность развернуть веб-приложение его клиентскую и серверную части.
Веб-сервис glitch позволяет развернуть текущий проект на React и Express.
Сервис выдает поддомены домена glitch.com, поэтому веб-приложение будет
защищено SSL-шифрованием.
Архитектура данных приложения рассредоточена как на стороне сервера,
так и на стороне клиента. Все потому, что React как представитель паттерна
СОВРЕМЕННЫЕ ВЫЗОВЫ И ПЕРСПЕКТИВЫ МОЛОДЕЖНОЙ НАУКИ
153
МЦНП «Новая наука»
MVVM хранит часть данных в своем представлении [3]. Информация,
касающаяся соединения конкретного пользователя, то есть id пользователя,
валидное в системе имя пользователя, хранится на стороне клиента, а вот
информация обо всех соединениях для возможности обеспечения связи между
всеми участниками соединения уже хранится на стороне сервера. Имя является
валидным, если в текущей сессии оно является уникальным.
Архитектура приложения включает в себя сущности: соединение или
«Connection», пользователь или «User» и контроллер соединения или
«ConnectionController». Каждый пользователь может иметь одно соединение, в
свою очередь группу соединений контролирует соответствующий контролер.
Диаграмма классов представлена на рисунке 1.

Контролер соединений, обеспечивает регулирование новых, а также
существующих соединений. В общем виде он отвечает за следующие функции:
1. Обработка подключения к точке доступа новых пользователей и
отключения текущих
2. Создание и удаление точки доступа
3. Обмен мультимедийной информацией.
Соединение – это сущность, отвечающая за хранение и обработку
данных, конкретного пользователя. «Connection» является связующим звеном
между «User» и «ConnectionController». «Connection» обеспечивает:
1. Инициализацию создания новой точки доступа.
2. Инициализацию подключения к точке доступа и отключения от не?
3. Обработку изменений в соединении между пользователем и сервером.
Пользователь – это сущность, отвечающая за работу непосредственно с
интерфейсом. Если «Connection» отвечает за связь между «User» и
«ConnectionController», то «User» обрабатывает все действия оператора сайтом.
Пользователь подразделяется на авторизированного и неавторизированного.
Неавторизированный пользователь, как пользователь с ограниченным набором
действий, обладает следующими возможностями:
1. Обрабатывать сам факт взаимодействия с интерфейсом при
подключении и отключении.
2. Отслеживать ввод нового имени и хранить текущее имя.
3. Отслеживать ввод данных при авторизации.
При авторизации пользователь получает специальные права, а именно
возможность создавать новую точку доступа используя кнопку «Создать
комнату», а также удаление точек доступа, созданных пользователем, нажатием
на кнопку «Удалить». Каждая комната может содержать n-ое количество
пользователей, где n напрямую зависит от вычислительных мощностей сервера,
а также скорости его интернет-соединения.
Архитектура интерфейса приложения состоит из (рис.2):
1. Компонента заголовка – Header
2. Компонента-обертки для списка точек доступа (комнат) –
RoomContainer
3. Компонента для блока управления – RoomControls
4. Компонента комнаты – Room
Заголовок представляет из себя поле, растянутое вдоль верхней части
экрана, с фиксированной шириной контентной части. Слева в заголовке
располагается логотип сайта, справа – панель с всплывающим окном для
авторизации.
RoomContainer позволяет держать блок управления и комнаты в пределах
контентной части, тем самым позволяя при последующих расширениях, то есть
при переходе от экранов с разрешением в 1280 пикселей к экранам с
разрешением в 1920 пикселей, иметь одну и ту же ширину блока
функциональной части, а боковые поля делая адаптивными.
Блок управления состоит из двух блоков. Первый блок содержит
текстовое поле, позволяющее задать имя пользователя. Второй блок включает в
себя кнопку «Создать комнату». Блок управления является дочерним блоком по
отношению к RoomContainer.
Компонент комнаты является главным функциональным блоком
приложения. Он включает в себя блок элементов управления и сопутствующей
информации, видео и текстовый блоки. Блок элементов управления содержит
уникальный идентификатор комнаты, кнопки «Закрыть» и «Удалить». Видео
блок – это блок, включающий в себя видеотрансляции всех его участников.
Текстовый блок открывается фиолетовой округлой кнопкой в углу блока видео
