Языки программирования высокого уровня предназначены специально
для того, чтобы быть удобным инструментом для программиста. Их
характерной чертой является высокая степень абстракции, предусматривающая
короткое и ёмкое описание тех понятий и функций, которые низкоуровневые
языки программирования описывают затянуто и усложненно.
При разработке высокоуровневых языков программирования соблюдался
принцип независимости сущности алгоритмов от того, на каком конкретном
оборудовании будет запускаться программа. Ответственными за связь с
оборудованием становятся инструментальные программы, трансформирующие
код, написанный на высокоуровневом языке, в элементарные машинные
команды. Программа-транслятор компилирует текст, переводя его с
определенного языка высокого уровня в элементарные команды, понятные
конкретному компьютерному оборудованию. Например, создан специальный
транслятор для компиляции текста на языке Fortran в элементарные команды
микропроцессоров семейства x86. 
Преимущество языков высокого уровня состоит не только в облегчении
достижения целей программирования, но и в универсальности программ,
пригодных для работы на различных платформах. Разработка интерпретаторов
и трансляторов призвана оптимизировать связь между программами на
высокоуровневых языках, и разными операционными системами. В идеале
исходный код (текст программы, написанный на языке высокого уровня) не
нужно модифицировать под конкретную платформу. [2]
Бытует мнение, что программное обеспечение, созданное на
высокоуровневом языке, готово к использованию на любом компьютере. На
деле это справедливо лишь для программ, почти не взаимодействующих с
операционной системой (расчеты или обработка данных). Большая часть
интерактивных программ использует функции, сильно различающиеся в разных
операционных системах. Так, для создания графических изображений на экране
в программах под Microsoft Windows используются функции Windows API, не
совпадающие с теми, которые применяются в системах, поддерживающих
стандарт POSIX. Наиболее часто для решения подобных задач они используют
интерфейс X-сервера.
Можно привести много примеров программных библиотек, скрывающих
нестыковки системных вызовов разных операционных систем от прикладных
программ. Минус – такие библиотеки ограничивают перечень доступных
возможностей конкретных операционных систем. [1]
Компьютерная программа представляет собой специальный текст из
большого количества строк, созданный так, чтобы объяснить машине
последовательность выполняемых действий. Наиболее примитивные
программы состоят из сотен строк кода, а в сложных и масштабных программах
количество строк измеряется миллиардами.
Компьютерный код представляет собой пошаговую инструкцию по
выполнению заданных действий. Он содержит не только наборы двоичных
чисел, но и слова из определённого списка плюс дополнительные символы.
Прочитывая код, компьютер получает задание по выполнению операций,
которые необходимо проделать с используемыми данными.
Вам знаком Twitter? Вообразите вместо Twitter’а большое помещение с
миллионами компьютеров, содержащих информацию о сообщениях и даты
рождения миллионов пользователей. 
Подсчет показывает, что на сегодняшний день человечество изобрело
более тысячи различных языков программирования, хотя далеко не все из них
нашли полезное применение.
Описание языка программирования можно задать посредством указания
парадигмы, которая определяет способ категоризации видов функций. Пример:
JavaScript, являющийся неизменным лидером по популярности среди языков
программирования. Он удобен тем, что может работать в любом веб-браузере.
Этот язык имеет богатый набор функций: поддерживает императивные,
структурируемые, объектно-ориентированные и управляемые событиями
парадигмы.
Примечательное свойство языков программирования: два языка, схожие в
парадигмах, имеют подобный синтаксис. Тот, кто изучил JavaScript, сможет
понять до 3/4 кода на Python или Ruby, настолько эти языки схожи.
Для написания программы сначала нужно придумать алгоритм –
последовательность шагов, которые следует осуществить, чтобы достигнуть
нужной цели. Конкретное наполнение при этом может отличаться. Например,
при совершении покупки в интернет-магазине покупатель выполняет строго
определенную обязательную последовательность действий: совершает выбор
товара, заполняет покупками виртуальную корзину, определяется с методом
оплаты, заполняет адресные данные для доставки, и, наконец, подтверждает
заказ. Можно выбрать другой товар, другие сроки и другой адрес, но алгоритм
(программный код) будет одним и тем же. [4]
Благодаря разнообразию существующих трансляторов, переводящих язык
высокого уровня в элементарные команды, программист при написании кода на
языке высокого уровня может не задумываться о том, на каком конкретном
оборудовании будет работать созданное им программное обеспечение. [5]
Кроме преимуществ, отдаленность высокоуровневых языков от проблем
аппаратной реализации имеет свои недостатки. Например, теряется
возможность создания простых и однозначных инструкций к используемому
аппаратному обеспечению. Программы, при создании которых использовались
высокоуровневые языки, созданы с расчетом на легкое понимание
программистом. Низкоуровневые языки сложнее для понимания человеком, но
зато они учитывают требования конкретной компьютерной архитектуры и не
нуждаются в интерпретации. Программы, написанные с использованием языка
высокого уровня, требуют гораздо больше компьютерной памяти. 
Одной из попыток снять существующее противоречие стало включение
поддержки низкоуровневого языка (ассемблера) в целый ряд современных
профессиональных языков высокого уровня.
Одно из преимуществ высокоуровневых языков – способность работать с
комплексными структурами данных. Многие из них поддерживают строковые
типы, операции вывода и ввода файлов. [3]
Подведем итог. Основные преимущества высокоуровневых языков
программирования: низкий объём исходных кодов, легкость использования,
существенное сокращение времени, которое необходимо затратить на
разработку программного обеспечения.