138
осуществлялось изменение направление обзора камеры. Вместо этого, будет
использовано свойство «position». Таким образом, так как радиус сферы, на
которую была наложена текстура сферической панорамы музея, добавлялся при
изменении угла обзора, в данной ситуации это значение необходимо убрать и
камера будет изменяться относительно позиции в центре сферы. Данное
изменение не понесет дополнительных ресурсных затрат.
В остальном потребуется переход самом коде, так как фреймворк Angular
поддерживает TypeScript, а исходная логика была написана на JavaScript. Стоит
отметить, что TypeScript — это язык программирования с открытым исходным
кодом, разработанный и поддерживаемый Microsoft. Он является строгим
синтаксическим надмножеством JavaScript, добавляющий к языку
необязательную статическую типизацию. Он транслируется в JavaScript.
Поскольку это надмножество JavaScript, существующие программы JavaScript
также являются действительными программами TypeScript.
Пользовательский интерфейс также должен содержать справку по работе с
программным средством. Карта музея должна быть интегрирована в сцену в
выдвигающемся меню, чтобы была возможность её скрыть. Она не должна
занимать большую часть экрана в раскрытом режиме, но пользователю должно
быть удобно, переключаться между точками обзора на карте и ориентироваться
по ней. На рис. 1 продемонстрировано как будет выглядеть интерфейс после
миграции на фреймворк Angular.
Рис. 1. Пользовательский интерфейс программного средства после миграции
139
На главном экране также располагается основной вид на трехмерную сцену
музея. Справа и слева присутствуют кнопки для того, чтобы пользователь мог
выдвинуть элементы для навигации (карту музея) и меню с дополнительной
информацией. На рис. 2 представлен интерфейс веб-приложения до миграции.
Рис. 2. Пользовательский интерфейс, до миграции
Как видно на рис. 1 и 2, вместо трех кнопок с выпадающем меню было
принято решение использовать одну кнопку «Навигация», с вложенными
подпунктами, которые также могут раскрываться. Таким образом данный метод
позволит динамически добавлять дополнительные этажи, комнаты и точки
обзора при необходимости. Данный элемент пользовательского интерфейса был
импортирован из специального фреймворка для пользовательского интерфейса
для проектов Angular. Стоит отметить, что в исходном проекте использовалась
библиотека Bootstrap для интеграции более сложных элементов управления.
Кроме изменения в навигации в выпадающем меню, сама выдвигающаяся
панель также была уменьшена в размере, по ширине карты помещения. В
исходном проекте выдвигающееся меню было реализовано при помощи java
script и JQuery, после миграции было использован элемент из фреймворка
Angular material.
Благодаря асинхронным возможностям Angular, изображение панорамы
определенной точки, куда переходит пользователь, будет передаваться занимая
меньше времени и как следствие, сама сцена будет отрисовываться за более
короткий промежуток времени, чем в исходном приложении.
На рис. 3 отображен измененный угол обзора для исходной точки обзора.
140
Рис. 3. Изменение угла обзора в приложении после миграции
Изменение точки обзора производится при помощи карты музея, путем
выбора необходимой точки, после чего изменяется текстура окружающей сферы.
Данные обработчики были реализованы при помощи технологии привязки.
Причем в некоторых случаях для отслеживания прокрутки колесика мыши,
привязка осуществлялась на все окно, но при этом она работает только когда
сцена активна, то есть если пользователь вызвал выдвигающуюся панель,
данный обработчик блокируется. Помимо этого, были сделаны привязки для
касаний, чтобы обработчик корректно работал для сенсорных устройств ввода.
Таким образом, миграция позволила уменьшить размер проекта, а также
разделить его на легко читаемые части. В процессе разработки были созданы три
компонента: основная сцена и две панели интерфейса, а также сервис для
вычисления необходимых данных для трехмерной сцены. В результате проекту
была обеспечена возможность быстрой и легкой расширяемости.
