Аббревиатура РНР означает Personal Hypertext Preprocessor —персональный гипертекстовый
препроцессор. Он представляет собой язык написания скриптов, которые будут размещаться на сервере. Среди его многочисленных преимуществ уместно будет упомянуть возможность работы с базами 
данных. PHP был создан в 1994 году датским программистом Расмусом Лердорфом и изначально 
представлял собой набор скриптов на другом языке Perl [1].
Открывая веб-страницу в окне браузера, вы фактически запускаете диалог между компьютерами
через Интернет. Это диалоговое окно, которое приводит к появлению веб-страницы, наглядно показано 
на рисунке 1. 
Каждый раз, когда браузер запрашивает страницу по адресу, веб-сервер посылает обратно содержимое того же файла catalog.html. Ответ веб-сервера изменится только в том случае, если кто-то 
отредактирует запрошенный файл на сервере. Но если вы используете РНР, то сервер сможет сделать 
что-то большее со своей стороны диалога [2]. На рисунке 2 наглядно показано, что происходит, когда 
веб-браузер запрашивает страницу, созданную РНР. 
Чтобы получить доступ к базе данных MySQL и изменять её содержимое, необходимо сначала 
установить соединение между базой данных и PHP-скриптом.
Существуют традиционные mysql_функции, но они уже устарели, поэтому мы рассмотрим, как 
использовать расширение MySQLi и PHP Data Object (PDO) для подключения к MySQL.
Рассмотри первый способ: подключение к MySQL с улучшенным расширением MySQL MySQLi –
это расширение, которое поддерживает только базы данных MySQL.
PHP-скрипт для подключения к базе данных MySQL с использованием процедурного подхода 
MySQLi выглядит следующим образом:
<?php 
$servername = "localhost"; 
$database = "database"; 
$username = "username"; 
$password = "password"; 
// Create connection 
$conn = mysqli_connect($servername, $username, $password, $database);
// Check connection 
if ($conn->connect_error) {
die("Connection failed: " . $conn->connect_error); 
} 
echo “Connected successfully”; 
mysqli_close($conn);
?>
Пояснение кода:
Первая часть скрипта состоит из четырех переменных (имя сервера, база данных, имя пользователя и пароль) и их соответствующих значений. Эти значения должны соответствовать вашим данным 
о подключении. (строки 2-5 кода).
Далее идет основная функция PHP mysqli_connect(). Он устанавливает соединение с указанной 
базой данных. (строка 7 кода).
Затем приводится “если утверждение”. Это часть кода, которая показывает, было ли установлено соединение. При сбое соединения оно выдает сообщение о сбое соединения. Функция die печатает сообщение, а затем выходит из скрипта. (строки 9-11 кода).
Если соединение выполнено успешно, отобразится “Connected saccessfully”. (строка 12).
Когда скрипт завершается, соединение с базой данных также закрывается. Если вы хотите завершить код вручную, используйте mysqli_close.
Так как расширение MySQLi позволяет подключить только базу данных MySQL, рассмотрим второй способ с помощью PDO, который подойдёт и для остальных СУБД. PDO- это расширение, которое 
также служит для подключения баз данных. Данное расширение поддерживает как серверные, так и 
клиентские разработанные инструкции. (PDO не будет работать на версиях старше 5.0).
PHP-код для подключения к базе данных MySQL через расширение PDO:
<?php 
$servername = "localhost"; 
$database = "database"; 
$username = "username"; 
$password = "password"; 
$charset = "utf8mb4"; 
try 
{ $dsn = "mysql:host=$servername;dbname=$database;charset=$charset";
$pdo = new PDO($dsn, $username, $password); 
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); 
echo “Connection Okay”; 
return $pdo } 
catch (PDOException $e)
{ echo “Connection failed: ”. $e->getMessage(); } 
?>
Пояснение кода:
У нас есть пять переменных (имя сервера, база данных, имя пользователя, пароль и кодировка) 
и их значения. Эти значения должны соответствовать вашим данным о подключении.
Имя сервера будет localhost. Если вы подключены к онлайн-серверу, введите имя этого сервера.
Переменная charset сообщает базе данных, в какой кодировке она будет получать и отправлять 
данные.
Большим преимуществом PDO является то, что у него есть класс исключений, который решает 
любые потенциальные проблемы в запросах к базе данных. Он решает эти проблемы с помощью блоков try и catch.
Первым параметром в блоке try and catch является DSN, который обозначает имя источника 
данных (базы данных). Это имеет решающее значение, поскольку определяет тип и имя базы данных, а также любую другую дополнительную информацию. В этом примере используется база данных 
MySQL. Однако, как было сказано ранее, PDO поддерживает различные типы баз данных. Для другой 
базы данных, нужно заменить часть синтаксиса (mysql) используемой базой данных.
Далее следует переменная PDO. Эта переменная устанавливает соединение с базой данных. 
Она имеет три параметра:
1. Имя источника данных (dsn).
2. Имя пользователя для вашей базы данных.
3. Пароль для вашей базы данных.
Далее приведен метод setAttribute, добавляющий два параметра в PDO:
1. PDO:ATTR_ERRMODE
2. PDO:ИСКЛЮЧЕНИЕ ERRMODE_EXCEPTION
Этот метод вызывает исключение в случае сбоя запроса.