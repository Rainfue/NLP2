Чтобы полностью понять AngularJS, важно сначала взглянуть на веб-разработку и ее развитие за
последние два десятилетия. За это время мы перешли от создания страниц с разметкой и гиперссылками
к созданию полностью интерактивных и многофункциональных приложений в браузере. Три основных
инструмента существуют как основа этой платформы веб-разработки на клиенте, включая HTML,
JavaScript и CSS. Хотя эти три компонента по-прежнему являются краеугольным камнем веб-разработки,
на их основе было построено множество новых платформ и библиотек для упрощения работы (или для
удовлетворения сложных требований). Но давайте вернемся к основным инструментам на мгновение.
HTML, конечно, обеспечивает семантическую разметку содержимого на странице. HTML 5 предлагает несколько новых тегов, в первую очередь ориентированных на семантическую структуру документа, включая Article, Section и Footer, и это лишь некоторые из них. За прошедшие годы разработчики отошли от разметки HTML, чтобы обеспечить визуальную или дизайнерскую структуру, и теперь
больше полагаются на CSS для определения этих вещей. CSS определяет не только визуальные ат-
76 ФУНДАМЕНТАЛЬНЫЕ ОСНОВЫ ИННОВАЦИОННОГО РАЗВИТИЯ НАУКИ И ОБРАЗОВАНИЯ
VI международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
рибуты, такие как размер шрифта, цвета и видимость, но также размер и выравнивание элементов на
странице. По мере развития CSS он добавил более продвинутые функции, такие как предпроцессоры
Sass и LESS [1], которые добавляют уровень интерактивности через декларативный язык. CSS также
является основным компонентом, позволяющим адаптировать веб-сайты к различным устройствам и
разрешениям экрана.
И еще есть JavaScript, который позволил нам создавать приложения в браузере. JavaScript позволяет нам брать семантическую разметку вместе со стилями, применяемыми через CSS, и делать их более динамичными в браузере, а не использовать статические ресурсы, которые загружаются один раз и
применяются. JavaScript позволяет нам взаимодействовать с объектной моделью документа (DOM) для
изменения дерева HTML или данных на странице. Например, страница может загружать данные с сервера с помощью другого HTTP-запроса, инициированного через JavaScript, а затем может изменять данные
на странице, добавляя или заменяя существующие данные HTML. Это делает страницы более отзывчивыми и уменьшает полную загрузку страниц в браузере. Вы также можете использовать JavaScript для
изменения стилей CSS, применяемых к определенному объекту или набору объектов на странице. Это
позволяет странице реагировать на ввод пользователя и изменять макет или стили.
Нельзя отрицать, что сочетание HTML, CSS и JavaScript позволило создать несколько удивительных интерфейсов. Однако расширенные требования в приложении могут привести к необходимости написания более сложного или сложного JavaScript. Кроме того, поскольку JavaScript не является
компилируемым языком, повторное использование сценариев часто становится упражнением с копированием и вставкой. По этой и другим причинам разработчики создали фреймворки или библиотеки
инкапсулированных функций для использования в приложениях. Эти библиотеки часто облегчают разработку более сложных взаимодействий между тремя основными столпами веб-разработки.
Каркасы и библиотеки
Фреймворки предоставляют набор конструкций для построения вашего приложения, в то время
как библиотеки представляют собой наборы полезных функций, инкапсулированных в один или несколько файлов JavaScript - и в этом нет недостатка. Например, jQuery - это популярная библиотека,
которую вы можете использовать во всей логике своего приложения для управления структурой страницы или изменения стиля и макета элементов. AngularJS является примером фреймворков, используемых для создания приложения.
Следить за всеми новыми библиотеками сложно и не всем нужно. По мере того, как библиотеки и
интегрированные среды представляются сообществу, разработчики с явной потребностью в этой функциональности будут использовать и тестировать новые решения. После обратной связи и нескольких
версий наиболее жизнеспособные решения поднимутся на вершину, будут представлены на конференциях и в блогах и станут широко известны как надежные инструменты. Вышеупомянутый jQuery, созданный Джоном Резигом, является отличным примером этого. Он начинался как легкая библиотека для
упрощения модификации DOM, которая представляет собой структуру HTML веб-страницы.
В то время как разработчики изо всех сил пытались создавать приложения, которые работали в
разных браузерах, используя различные доступные API, Резиг создал jQuery как способ упростить выбор элементов DOM. Он сделал это с помощью того же синтаксиса селектора, что и в CSS. После выбора элементы можно легко манипулировать, прикреплять обработчики событий или полностью удалять из документа. Поскольку разработчики проверили это в своих приложениях и дали обратную
связь, библиотека улучшилась и теперь является опцией по умолчанию во многих приложениях. Фактически, многие другие библиотеки и фреймворки теперь зависят от jQuery.
Одностраничные приложения
Тип приложения в котором содержимое на странице динамически загружается называют одностраничным приложением (SPA), так как логика и взаимодействие приложения происходят на одной странице,
при этом новые данные и содержимое загружаются динамически. В настоящее время существует несколько структур приложений, которые пытаются упростить процесс создания одностраничных приложений с функциями маршрутизации, привязки данных, шаблонов на стороне клиента и оболочек AJAX
(асинхронный JavaScript и XML) для доступа к данным - и все это, наконец, приводит нас к AngularJS.
ФУНДАМЕНТАЛЬНЫЕ ОСНОВЫ ИННОВАЦИОННОГО РАЗВИТИЯ НАУКИ И ОБРАЗОВАНИЯ 77
VI International scientific conference | www.naukaip.ru
AngularJS
В качестве основы для создания одностраничных приложений AngularJS предоставляет набор
функциональных возможностей, позволяющих значительно сократить объем написанного кода и усилия, необходимые для обеспечения функциональности приложения. Он предписывает определенные
аспекты дизайна вашего приложения в качестве компромисса за предоставляемые им функции.
AngularJS также описывается как инфраструктура или архитектура Model-View-Controller (MVC), потому
что она использует модульный подход к созданию ваших приложений. Каждое представление определено в HTML, который имеет модуль контроллера JavaScript и модель, которая управляет взаимодействием. Более того, AngularJS существует достаточно долго, чтобы тестироваться в больших приложениях, и прошел несколько ревизий.
AngularJS состоит из одного или нескольких файлов JavaScript, в зависимости от функциональности, которую будет использовать ваше приложение. Вместо одного раздутого файла JavaScript, добавленного ко всем вашим приложениям, существует основной файл, который включает основные функции
инфраструктуры и дополнительные файлы или модули, которые можно добавить в базовую среду.
AngularJS и различные модули могут быть добавлены в приложение с помощью таких менеджеров
пакетов, как NPM, Bower или NuGet. Все менеджеры пакетов предоставляют отдельные пакеты для основного и дополнительных модулей, и все приложения требуют установки основного модуля с добавлением дополнительных модулей, таких как Route или Resource, добавляемых по мере необходимости.