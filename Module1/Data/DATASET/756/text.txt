React Native – фреймворк для создания кроссплатформенных мобильных
приложений от Facebook, анонсированный в феврале 2015 года. Как и в
«обычном» React для веб, UI приложения собирается из кирпичиков – компонентов, которые реагируют на изменение своего состояния (state) и свойств им
переданных (props), но, в отличие от веб, рендерятся в нативные контролы. В
идеале, используются принципы иммутабельности и чистые фунции, что обеспечивает простоту и изолированность тестирования. И тут стоит заметить, что
сам по себе React очень простой, и эта простота переходит и в мобильную
часть.
Рисунок 1– Схема работы React Native
Для работы приложения написанного на React Native выделяются 2 потока:
основной и вспомогательный. Основной поток необходим для работы нативной
части приложения и отображения элементов. Данный поток используется и в
стандартных приложения написанных под мобильные устройства. Вспомогательный поток отвечает за работу JavaScript.
Основным отличием React-native от фреймворка react являются компоненты. В React-native не используется стандартная для веба верстка при помощи
языка HTML.
Приложения, написанные с использованием React Native, не являются мобильными веб-приложениями т.к. react native использует те же базовые блоки
для построения интерфейса, что и Android и IOS приложения.

Производительность – это основная проблема приложений, написанных на
React Native. Происходит это из-за того, что приложения используют для работы язык JavaScript.
Для решения этой проблемы можно использовать технологию
WebAssembly.
Анализ технологии WebAssembly
WebAssembly – это новый открытый формат байт-кода, исполняемого современными браузерами. Он позволяет переносить код, написанный на таких
языках как C, C++, Rust, в низкоуровневые ассемблерные инструкции и использовать его в сети. Формат имеет компактные размеры, высокую производительность, близкую к нативной, и может одновременно работать с JavaScript. Благодаря принципу работы данной технологии устройств тратит меньше времени на
исполнение команд.
В качестве языка, который будет компилироваться в WASM формат возьмем язык Rust. Сегодня данный язык один из немногих имеет официальный инструмент для компилирования модулей в wasm формат.
Принцип работы приложения
Приложения разрабатываемое с использованием данного стека должны
реализовывать клиент-серверную архитектуру. Использование подобной архитектуры позволит принести в разработку приложения следующие плюсы.
1. Гибкость в выборе технологий для wasm.
2. Изолированность модулей упростит автоматическое тестирование.
3. Упрощение оптимизации кода приложения под wasm.
Реализация приложения
Для работы JavaScript React Native использует движок JavascriptCore. Версия, используемая для работы React Native, не поддерживает работу технологии
WebAssembly из коробки, что значительно усложняет интеграцию данных технологий между собой. К счастью сегодня уже существуют специальные полифилы которые способны добавить возможность использовать WebAssembly в
любую среду выполнения JavaScript кода. Для работы был выбран полифил
webassemblyjs. Чтобы установить данный полифил в проект необходимо находясь в папке с проектом необходимо через терминал выполнить следующую
команду: npm i webassemblyjs.
Для продолжения работы с технологией WebAssembly необходимо выполнить следующий алгоритм действий.
1. Загрузить скомпилированный модуль wasm.
2. Сконвертировать полученную информацию в формат ArrayBuffer.
3. Выполнить команду: WebAssembly.instantiate(<скомпилированный буфер>).

Вместе с тем что Javascript Core не поддерживает WebAssembly, так же
данная версия движка не поддерживает конвертирование в arrayBuffer через
FileReader, поэтому использование WebAssembly для разработки кроссплатформенных мобильных приложений на текущий момент как минимум затруднено. Для дальнейшей работы над интеграцией данных технологий необходимо
написать специальные модули для конвертирования, полученного байт кода в
arraybuffer