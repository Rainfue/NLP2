В настоящее время интернет представляет собой высокоинтеллектуальную сферу, где происходит обмен, хранение и обработка огромного
массива информации. Потребителем этих данных является пользователь,
то есть человек.
Создание сайтов с отзывами и характеристиками товара той или иной
категории – один из наиболее выгодных и перспективных инструментов
онлайн бизнеса и разработки. На сегодняшний день системы управления
сайтами дают возможность реализовывать любые требования пользователя.
Именно поэтому, в рамках научного исследования, нами был разработан сайт «BeerJa», на котором совершеннолетние пользователи могут
получать информацию о различных видах пива, а также оставлять свои
отзывы и комментарии. Актуальность нашей работы основывается на
том, чтобы помочь с выбором тем людям, которые употребляют алкогольные напитки. Сделать их покупки более приятными и мобильными.
Ведь на нашем сайте собраны и опубликованы отзывы пользователей,
которые является важным критерием для выбора потенциальным клиентом данного товара.
По этой причине можно достигать не только внешних маркетинговых
целей таких, как публикация отзывов в качестве рекламы, но и внутренних. Сбор и анализ информации по каналам обратной связи позволяет
более точно определить целевую аудиторию, её желания и потребности.
Система управления сайтом предоставляет возможность добавления,
редактирования и удаления содержимого страниц, баз данных и документов.
База данных для данного приложения представлена в JSON-формате
нереляционной базы данных MongoDB Atlas [1].
Нереляционные базы данных используют разнообразные модели данных для доступа к данным и управления ими. Базы таких типов оптимизированы для приложений, которые работают с большим объемом данных, нуждаются в низкой задержке и гибких моделях. Все это достигается путем смягчения жестких требований к непротиворечивости данных, характерных для других типов БД.
В нашей работе предоставлено две сущности: USER (ПОЛЬЗОВАТЕЛЬ) И REVIEW (ОБЗОР). Созданы они были с помощью фреймворка
mongoose. Нужно учитывать, что mongoDB также самостоятельно создает идентификатор для каждой записи. Идентификатор BSON со 12-
битным значением, в котором 4 бита – это отметка времени (секунды с
начала эпохи), 3 бита – идентификатор машины, 2 бита – идентификатор
процессора, и трехбитный счетчик.
Обработка данных осуществлялась путем взаимодействия front-end с
back-end через CRUD-операции, с последующим взаимодействием backend с БД mongoDB Atlas. Например, Пользователь вводит свои регистрационные данные, которые, при срабатывании триггера обращается к
серверной части back-enda. Back-end проверяет валидность данных, и,
при их валидности создание запись в базе данных. На front-end же, возвращается ответ от back-enda, в котором либо описана ошибка (если
пользователь не ввел какое-то поле) или прилетает, что действие успешно выполнено [2].
Создание UX-UI дизайна осуществлялась путем использования библиотеки компонентом material UI для React.js. Так же использовался
стиль CSS-In-JS для создания собственного дизайна внутри. jsx файлов.
В качестве среды разработки использован IDE WebStorm. Использован язык Javascript, база данных mongoDB. Использованы многочисленные библиотеки. Для front-enda был выбран фреймворк React.js, для
back-enda Express.js.
На сайте присутствуют следующие модули:
a) Страница регистрации пользователя;
b) Каталог алкогольных напитков с обзорами;
c) Личный кабинет пользователя;
d) Страницы с отзывами.
Страница с регистрацией или авторизацией пользователя являются
стартовыми страницами на нашем сайте, чтобы несовершеннолетние пользователи не смогли просматривать его содержимое. На данной
вкладке пользовать может запомнить свои данные (в таком случае они
сохраняются в LocalStorage, если сохранять данные не нужно, то в
SessionStorage). Также пользователю доступна функция восстановления
пароля по почте.
Каталог алкогольных напитков включает в себя поиск пива по имени
и ключевым словам. Весь каталог состоит из 400 экземпляров. Также
можно включить фильтрацию по особенностям пива (алкоголь, горечь и
цвет). Фильтрация происходит по принципу «больше, чем <значение>».
В личном кабинете пользователя данные берутся из данных Mongodb
Atlas, фотография добавляется из облачного хранилища данных
clouniary. Также есть возможность смены пароля [3].
На странице с отзывами пользователь может оставлять комментарии,
которые будут появляться автоматически у всех юзеров, использую
WebSockets.
Необычные решения с кодом включают в себя следующие позиции:
1) Создание jwt-стратегии для авторизации пользователя по генерируемым токенам:
В перспективе мы собираемся внедрить jwt-стратегию, так как это позволит генерировать access token для безопасной авторизации запросов.
Добавить mailer-функции, чтобы у пользователей была возможность
привязать свой email к аккаунту, восстановить аккаунт в случае утери
пароля. А также усовершенствовать CRUD-запросы, чтобы оптимизировать наш сайт. Отдельное внимание хотим уделить SEO разработкам,
чтобы продвинуть нашу страницу в ТОП Google и Яндекс, а также составить шаблоны генерации и формирования метатегов. 