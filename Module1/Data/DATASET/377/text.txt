Если вы хотите изучить React, важно сначала получить четкое представление о некоторых основных концепциях JavaScript.
Во-вторых, React основывается на ключевых концепциях, таких как методы JavaScript map(),
filter() и reduce(). Так что это делает эти методы обязательными для изучения.
Как использовать метод map().
Предположим, у вас есть массив arrOne, в котором вы сохранили несколько чисел, и вы хотите
выполнить некоторые вычисления для каждого из них. Но вы также не хотите возиться с исходным
массивом. Здесь на помощь приходит map(). Метод map() поможет вам сделать это:
Рис. 1. Пример нежелательного массива
Аннотация: сопоставление, фильтрация и уменьшение — три наиболее полезных и мощных метода
обработки массивов высокого порядка. В этой статье вы увидите, как работает каждый из этих методов
массива высокого порядка. Вы также узнаете, где можно их использовать и как их использовать, с помощью аналогий и примеров.
Ключевые слова: массив, стрелочная функция, элемент массива, переменная.
USING THE MAP (), FILTER (), AND REDUCE () METHODS IN JAVASCRIPT
Dzamikhova A.A.,
Shausheva Z.H.,
Koshiev K.H.,
Kirin D.A.
Abstract: matching, filtering, and augmentation are the three most useful and used methods for processing
high-order arrays. In this article, you see how each of the high-speed array methods works. You will also learn
where they can be used and how to use them through similar and examples.
Key words: array, arrow function, array element, variable.
34 НАУКА, ИННОВАЦИИ, ОБРАЗОВАНИЕ
III международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
map() принимает максимум три аргумента: значение/элемент, индекс и массив.
Рис. 2. Запись метода map()
Допустим, вы хотите умножить каждый элемент на 5, не изменяя при этом исходный массив.
Рис. 3. Листинг примера
Рис. 4. Результат выполнения программы
В имеющийся массив arrOne с 6 элементами инициализируется стрелочная функция multFive с
«num» в качестве аргумента. Это возвращает произведение num и 5, где переменная num получает
данные методом map().
Как использовать метод filter().
Этот метод используется для фильтрации массива на основе заданных вами условий. Метод
filter() также создает новый массив.
Возьмем пример: предположим, у вас есть массив arrName, и в этом массиве хранится набор чисел. Теперь вы хотели бы посмотреть, какие числа можно разделить на 3 и составить из них отдельный
массив.
Рис. 5. Код из примера
Рис. 6. Результат выполнения кода
Давайте разберем этот код. Здесь у нас имеется массив arrNum с 7 элементами. Затем мы инициализируем функцию divByFive с «num» в качестве аргумента. Он возвращает true или false каждый
раз, когда для сравнения передается новое число, где переменная «num» получает данные методом
filter().
НАУКА, ИННОВАЦИИ, ОБРАЗОВАНИЕ 35
III International scientific conference | www.naukaip.ru
Затем инициализируем другую переменную arrNewNum, в которой будет храниться новый массив, который создаст метод filter().
Таким образом, метод filter() будет выбирать каждое значение этого массива, начиная с индекса
[0], и выполнять операцию над каждым значением. Затем он сформирует новый массив с вычисленными значениями.
Как использовать метод reduce()
Допустим, вас попросили найти сумму всех элементов массива. Теперь вы можете использовать
цикл for или метод forEach(), но reduce создано для такого рода задач.
Метод reduce() уменьшает массив до одного значения, выполняя требуемую операцию над элементами вместе.
Давайте возьмем приведенный выше пример и используем для него сокращение:
Рис. 7. Использование метода reduce()
Рис. 8. Результат выполнения метода
Все то же самое, что и с методами map() и filter(), но важно понимать, как работает метод reduce
внутри.
У метода reduce() нет определенного синтаксиса. Давайте рассмотрим самый простой, и он даст
вам представление обо всех способах использования функции reduce().
Рис. 9. Пример синтаксиса для функции reduce ()
Взгляните на этот синтаксис. Здесь reduce принимает два аргумента, a1 и a2, где a1 действует
как накопитель, а a2 имеет значение индекса.
Теперь при первом прогоне переменная равна нулю, а a2 содержит первый элемент массива.
Что делает reduce, так это то, что оно бросает значение в переменную, которая содержит a2, и увеличивает его до следующего. После этого метод reduce() выполняет операцию над обоими операндами. В
данном случае это дополнение.
Таким образом, в основном a1 является аккумулятором, который в настоящее время равен нулю, а
a2 содержит 15. После первого прогона содержится 15, а a2 содержит следующее значение, равное 39.
0 + 15 = 15
Теперь, при втором запуске, reduce выбрасывает значение a2, 39, в аккумулятор, а затем выполняет операцию над обоими операндами.
15 + 39 = 54.
Теперь, при третьем прогоне, в аккумуляторе есть сумма 15 и 39, что равно 54. a2 теперь содер-
36 НАУКА, ИННОВАЦИИ, ОБРАЗОВАНИЕ
III международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
жит 20, которые метод сокращения отбрасывает в аккумулятор