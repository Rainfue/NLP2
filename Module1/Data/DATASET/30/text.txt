Как бы хорошо не был написан 
программный код, рано или поздно он приходит в негодность. Основными 
причинами являются: необходимость модернизации, обнаружение ошибок 
(так называемых «дыр»), обновление языка программирования и другие. 
Таким образом, жизненный цикл программы представляет собой замкнутую 
цепь постоянной модернизации.
В процессе модернизации программного кода возникает множество 
проблем, основной из которых является стиль оформления. Каждый 
программист является новатором, так как в процессе написания 
программного кода изобретает стиль оформления, который, по его мнению, 
лучше предшествующих. Данные действия порождают проблемы 
последующей модернизации различными программистами одного и того же 
программного кода, что влияет на скорость и качество программирования. 
Для решения подобных проблем были разработаны рекомендации по 
стандартизации (standards recommendations), ограничивающие 
программиста, делая при этом программный код универсальным.
Базовый стандарт оформления кода описывает стандартные 
элементы, являющиеся существенными для обеспечения высокой 
технической совместимости кода, созданного и/или поддерживаемого 
различными разработчиками.
Во всех файлах, содержащих программный код на языке php
необходимо использовать только теги «<?php» и «<?=». Файлы также нужно 
представлять только в кодировке UTF-8 без BOM-байта.
В файлах следует либо объявлять структуры (классы, функции, 
константы и т.п.), либо генерировать побочные эффекты (выполнять 
действия) (передавать данные в выходной поток, модифицировать 
настройки и т.п.), но не следует делать одновременно и то, и другое. Под 
«побочными эффектами» понимается реализация логики, не связанной с 
объявлением классов, функций, констант и т.п. – даже подключение 
внешнего файла уже является «побочным эффектом». «Побочные эффекты» 
включают (но не ограничиваются этим перечнем): передачу данных в 
выходной поток, явное использование require или include, изменение 
настроек, генерирование ошибочных ситуаций или порождение 
исключений, изменение глобальных или локальных переменных, чтение из 
файла или запись в файл и т.п.
Ниже представлен пример файла, содержащий в себе как объявления 
структур, так и порождение побочных эффектов, т.е. ситуации, которой 
стоит избегать:
<?php
// побочный эффект: изменение настроек
ini_set('error_reporting', E_ALL);
// побочный эффект: подключение файла
include "file.php";
// побочный эффект: передача данных в выходной поток
echo "\n";
// объявление
function foo()
{
// тело функции
}
?>
Следующий пример демонстрирует файл с объявлениями без 
побочных эффектов – то есть образец рекомендуемой реализации:
<?php
// объявление
function foo()
{
// тело функции
}
// условное объявление -- это НЕ побочный эффект
if (! function_exists('bar')) {
function bar()
{
// тело функции
}
}
Каждый класс должен располагаться в отдельном файле и в 
пространстве имён с хотя бы одним верхним уровнем (именем 
производителя). Имена классов должны быть объявлены с использованием 
т.н. «StudlyCaps» (каждое слово начинается с большой буквы, между 
словами нет разделителей). Имена методов должны быть объявлены с 
использованием т.н. «camelCase» (первое слово пишется в нижнем регистре, 
далее каждое слово начинается с большой буквы, а между словами нет 
разделителей). Код, написанный для PHP 5.3 и более новых версий, 
ДОЛЖЕН использовать формальные пространства имён:
<?php
// PHP 5.3 и новее:
namespace Vendor\Model;
class Foo
{
}
В коде, написанном для PHP 5.2.x и ниже, СЛЕДУЕТ при именовании 
классов соблюдать соглашение о псевдопространствах имён с префиксом в 
виде имени производителя (Vendor_):
<?php
// PHP 5.2.x и ранее:
class Vendor_Model_Foo
{
}
Константы классов должны быть объявлены исключительно в 
верхнем регистре с использованием символа подчёркивания для разделения 
слов:
<?php
namespace Vendor\Model;
class Foo
{
const VERSION = '1.0';
const DATE_APPROVED = '2012-06-01';
}
Какой бы вариант именования свойств ни был выбран ($StudlyCaps, 
$camelCase или $under_score), следует сохранять его неизменным в рамках 
некоторого разумного объёма кода (например, на уровне производителя, 
пакета, класса или метода).
Выводы. Проектирование информационной системы всегда 
начинается с определения цели проекта [4]. Соблюдая данные 
рекомендации по оформлению программного кода, программист сможет 
писать программные продукты, которые с легкостью смогут 
модернизировать другие программисты. Также освоение чужого 
программного кода будет проходить намного быстрее и проще. Успешность 
проекта в огромной мере зависит от обеспеченности информационной 
системой с момента ее запуска на протяжении всего времени ее 
эксплуатации [4] многих условий, но четкое выполнение указанных правил 
поможет избежать многих ошибок.