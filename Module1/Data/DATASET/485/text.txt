Работа выполнена в рамках темы НИР № 615892 «Исследование и разработка в области
информационных технологий».
В работе проведен сравнительный анализ серверных фреймворков на платформе Node.js. В качестве
критериев оценки использовались измерения качества исходного кода фреймворков с помощью
метрик программного обеспечения, валидности исходного кода, поддерживаемости и
производительности.
Ключевые слова: веб-программирование, веб-приложения, JavaScritpt, фреймворки, метрики
программного обеспечения.
JavaScript является языком программирования для клиентской веб-разработки. Он
также стал популярным среди разработчиков веб-серверов. Одной из основных причин его
растущей популярности является создание и развитие Node.js. Node.js является платформой
для разработки сервисов и веб-приложений. Фактически, это позволяет разработчикам
создавать серверные приложения на JavaScript. Таким образом, разработчику не нужно
использовать два разных языка для создания клиентской и серверной части [1–4].
В данной работе был проведен сравнительный анализ трех серверных фреймворков для
Node.js: Express.js, Koa.js и Sails.js. Express.js и Koa.js используют подход промежуточного
программного обеспечения (ПО). Sails.js использует подход MVC. Выбор основан на
информации, расположенной на официальных Github-репозиториях данных продуктов
(табл. 1). Ключевым параметром является количество «звезд», которые отражают количество
благодарностей, выраженных разработчикам.В данном исследовании проведены измерения и оценки качества исходного кода
фреймворков с помощью метрик ПО, валидности исходного кода (отсутствие ошибок и
предупреждений выполнения), поддерживаемости и производительности.
Метрики были вычислены при помощи утилит plato (github.com/es-analysis/plato) и
complex-report (github.com/philbooth/complexity-report). Тесты валидации были проведены
при помощи инструмента ESLint (https://github.com/eslint/eslint). Результаты подсчета метрик
выбранных фреймворков представлены в табл. 2.Из результатов значений метрик были получены следующие выводы. Sails.js содержит
больше всего комментариев в исходном коде, однако имеет самую высокую
цикломатическую сложность, глубину вложенности и количество критических ошибок. В то
время как Koa.js содержит в своем коде меньше всего комментариев, но имеет самые низкие
показатели цикломатической сложности и количества ошибок и самый высокое значение
индекса поддержки кода. Express.js содержит больше всего ошибок листинга кода.
Показатели поддержки фреймворков демонстрируют насколько велико его сообщество
и насколько хорошо ведется разработка и сопровождение пакета его разработчиками зависимостей, меньше открытых вопросов и запросов на слияние. Sails.js имеет более частые
обновления.
Для измерения производительности использовалась утилита Apache Bench, которая
посылала GET-запрос на корневую конечную точку для каждого тестового приложения.
Тестовые приложения, написанные на трех рассматриваемых фреймворках, реализовывали
идентичную функциональность: посылали в ответ простую строку «Hello World!».
Необходимо обратить внимание, что данная методика тестирования не обязательно
соотносится с поведением в реальном мире, а скорее проверяет теоретическое максимальное
количество запросов, которые могут быть обработаны.
Apache Bench была настроена на одновременное выполнение 100 запросов до тех пор,
пока не завершится 50 000 запросов или не истечет 20 с. Затем записывались запросы в
секунду. Как Apache Bench, так и сервер были размещены в одной и той же среде, удаляются
любые факторы, которые могут привести к нестабильности сети. Результаты тестирования
производительности представлены в табл. 4.Из результатов проведения тестирования производительности были получены
следующие выводы: наилучшие показатели производительности демонстрирует Koa.js, в то
время как Sails.js является самым медленным из рассматриваемых фреймворков. Данные
результаты напрямую коррелируют с показателями метрик ПО, рассчитанных ранее.
Попробуем сделать общий вывод из того, что уже известно о трех рассматриваемых
фреймворках. Определим, для каких проектов в целом лучше подходит каждый из них.
Express.js подходит для:
– больших проектов, предполагающих кастомизацию;
– случаев, когда необходима долгосрочная поддержка приложения.
Koa.js подходит для:
– как небольших, так и средних проектов, которые предполагают развитие в перспективе;
– для проектов с высокой степенью кастомизации;
– для облегчения долгосрочной поддержки приложений.
Sails.js подходит для:
– быстрого старта проекта;
– приложений реального времени, где требуется моментальная реакция;
– приложений, не требующих долгосрочной поддержки.
