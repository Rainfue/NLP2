Целью работы является исследование скорости загрузки приложений,
разработанных на основе фреймворков Vue.js и React.js.
В настоящее время технологии веб-разработки являются неотъемлемой частью
современного мира. Бизнес, организации, государственные компании и корпорации
используют веб-приложения или веб-сайты.
Язык JavaScript является основополагающим для разработки frontend-части
приложения: реализации удобных и отзывчивых пользовательских интерфейсов
различной сложности. В связи с этим, технологии веб-разработки стремительно
развиваются, стараясь облегчить разработку нового функционала. Использование
фреймворков и готовых библиотек считается уже неотъемлемой частью процесса
разработки веб-приложения.
Выбор фреймворка (библиотеки) для использования является сложным и
нетривиальным вопросом, так как при выборе следует опираться на достоинства и
недостатки каждого. Также немаловажную роль играет сложность и архитектура
разрабатываемого приложения.
В качестве фреймворков для анализа были выбраны React и Vue [3]. React.js
является доминирующей̆ технологией JavaScript и занимает превалирующую долю
рынка разработки, поддерживается Facebook, Instagram и сообществом разработчиков.
Vue также занимает одну из лидирующих позиций на рынке frontend-разработки, при
этом являясь самым молодым веб-фреймворком [1]. Указанная технология
позиционирует себя как современный̆ прогрессивный̆ фреймворк и составляет
достойную конкуренцию технологиям, разработанным ранее.
В связи с вышеизложенным, возникла потребность разобраться в особенностях
выбора технологии при разработке клиентской части приложений, плюсах и минусах
использования каждой из них.
Для проведения исследования были разработаны базовые приложения (ToDo List)
на каждой из указанных технологий, написанных с помощью фреймворка Vue JS и
библиотеки React JS, общий вид приложения представлен на рисунке 1.
Для дополнительной нагрузки при рендеринге приложений, добавлены методы
обращения к фейковому API (https://jsonplaceholder.typicode.com/todos). Вид кода,
написанного для обращения к API на React JS и Vue JS, представлен на рисунках 2 и 3.
В качестве критериев для сравнения скорости рендеринга приложений были
выбраны следующие:
1. DOMContentLoaded Event.
2. First Paint.
3. First Contentful Paint.
4. Largest Contentful Paint.
5. Run Microtasks.
6. Parse HTML.
7. Loading.
8. Scripting.
9. Rendering.
10. Painting.
11. Total (blocking time).
12. Скорость выполнения запросов к API [2].
Для сравнительного анализа использовались следующие инструменты
разработчика:
1. Google Chrome (110.0.5481.177).
2. Chrome DevTools (Performance, Lighthouse).
Операционные системы, использованные для проведения эксперимента:
1. macOS Monterey 12.1.
2. Windows 10.
Результаты, полученные в ходе эксперимента, приведены далее в таблице.
В результате эксперимента установлено, что по общей производительности при
рендеринге страницы Vue работает быстрее и превосходит React по следующим
показателям: общее время отрисовки страницы (total), скорость выполнения запросов к
API, Run Microtasks, Parse HTML, Scripting, Rendering, Painting.
Кроме того, было установлено, что в приложениях небольшого объема Vue JS
работает с большей скоростью.
