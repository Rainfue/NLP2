В современном мире, где технологии развиваются стремительно, каждый третий человек
использует информационные технологии в работе и повседневной жизни. С каждым днем
появляются новые сервисы, разрабатываются новый функционал и обновляются приложения.
По данным Росстата 85% жителей России используют интернет ежедневно. Служба вебаналитики StatCounter опубликовала рейтинг популярности браузеров за 2022 год. Чаще
остальных используют Google Chrome (66,64%), на втором месте Microsoft Edge (10,07%), на
третьем – Safari от Apple (9,61%). Результат исследований подтверждает тот факт, что
интернет является неотъемлемой частью жизни человека.
Огромное количество веб-сервисов и ресурсов покрывают разные потребности, но, к
сожалению, удовлетворить абсолютно все нужды не представляется возможным с
экономической и технической точки зрения. Так, благодаря API новые приложения интегрируются с существующими программными системами, что, в конечном итоге,
увеличивает скорость разработки, потому что каждую функцию не требуется писать
самостоятельно с нуля. API (Application Programmable Interface) – это программный
интерфейс, который позволяют двум программным компонентам взаимодействовать друг с
другом, используя набор определений и протоколов. В определении API интерфейс можно
рассматривать как контракт между двумя программами, которая одна предоставляет другой.
Так, к примеру, система метеослужбы содержит ежедневные данные о погоде.
Приложение погоды на телефоне или интегрированное на главную страницу браузера
«обменивается» с этой системой через API и показывает ежедневные обновления погоды на
телефоне. API позволяет настроить как разные компоненты программы должны эффективно
взаимодействовать и используется повсеместно, что показывает важность данной технологии.
Современные веб-приложения реализуются с помощью графического интерфейса
(фронтенда), с которым взаимодействует пользователь, и бэкенда, который скрыт от
конечного пользователя и обеспечивает работу всего приложения, обрабатывая запросы от
«клиента» и производя соответствующие действия.
В настоящее время частой практикой является разбиение приложения на отдельные
небольшие приложения с ограниченной функциональностью – микросервисы, которые
реализуют микросервисную архитектуру. Так, изначально данный подход использовали
только на стороне бэкенда, но вскоре был реализован и на стороне фронтенда.
Среди многочисленных плюсов миркосервисной архитектуры есть и минусы, один из
которых: каждый микросервис реализует уникальный программный интерфейс, поэтому
фронтенд должен знать о каждом API, в связи с этим образуется жесткая сцепка между двумя
сторонами. Также со стороны сервера могут поступать данные, не подходящие под нужды
«клиента», допустим нефильтрованные данные, следовательно, браузер должен затратить
больше ресурсов.
Решением данной проблемы является создание единого программного интерфейса,
который будет знать о всех микросервисах, а также вынести несложную логику на отдельный
уровень, которая обеспечивает контроль над данными. Этим промежуточным уровнем
является BFF [3].
Backend for Frontend (BFF) – паттерн проектирования для разработки веб-приложений,
основанный на идее API Gateway (единое окно), был разработан в компании SoundCloud.
Gateway также является паттерном, так, оба этих шаблона используют один контракт для
доступа к разным API. BFF используют в случаях, когда необходимо получать доступ от
разных API и когда реализованы микросервисы.
Возможности BFF [4]:
• взаимодействовать с микросервисами и получать от них данные;
• преобразовать данные в соответствии с необходимым представлением;
• отправлять данные «клиенту».
Традиционный подход использует один gateway для всех «клиентов». Благодаря BFF
покрываются потребности каждого «клиента», к примеру, мобильного, десктопного
приложений, веб-сайта и т.д., так как возможно создать API для каждого. То есть возможность
поддерживать несколько BFF позволяет избавиться от ограничений бэкенда и от хранения
всего в одном месте. В связи с этим упрощается разработка сервисов, работающих с разными
«клиентами».