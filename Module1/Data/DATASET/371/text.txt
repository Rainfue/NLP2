IndexedDB является объектно-ориентированной базой данных и представляет
собой NoSQL хранилище, которое располагается на стороне клиента, позволяя ему
постоянно хранить данные локально в своем браузере в формате JSON.
Такая возможность позволяет создавать веб-приложения и работать с ними как
в онлайн, так и в офлайн режимах с возможностью обращения к данным с помощью
специального API интерфейса, написанного на языке JavaScript.
В хранилище «IndexedDB» можно хранить различные типы данных: строки,
числа, даты, объекты и файлы.
Доступ к этим данным осуществляется в асинхронном режиме. Клиент
производит запрос к базе данных и регистрирует функцию обратного вызова. По
результатам запроса он получает либо сами данные, либо сообщение об ошибке, если
запрос был завершен неудачно. Каждый из этих вариантов обрабатываются отдельно
с помощью соответствующей функции.
В хранилище «IndexedDB» могут находиться множество баз данных с разными
именами и с разными версиями. Для работы с определенной из них необходимо
первоначально подключиться к ней или создать ее, при условии, что такая база или ее
версия ранее не была создана. Это осуществляется с помощью одного и того же
метода «open» интерфейса «IndexedDB», предоставляемого любым браузером по
умолчанию. Например, на рисунке 1 показано как подключиться или создать новую
базу с именем «test».
Рисунок 1. Создание или открытие базы данных «test» в хранилище «IndexedDB»
Методу «open» вторым параметром передается версия открываемой базы
данных. В данном примере это версия номер 1.
Если такой базы или ее версии в хранилище не существует, то вызывается
функция обратного вызова «onupgradeneeded», в теле которой предусматриваются все
действия, необходимые для создания новой базы данных или ее новой версии.
В данном пример в базе данных «test» создается хранилище объектов с именем
«fio» и первичным ключом «id», значение которого будет автоматически
увеличиваться на единицу при добавлении каждого очередного объекта в это
хранилище, при этом сама база данных «test» создается автоматически (рис. 2).
Рисунок 2. Созданная база данных «test»
Изначально само хранилище объектов внутри созданной базы данных является
пустым, но у него уже существуют два поля: первое для хранения уникального
идентификатора каждого объекта, а второе – для хранения данных самого объекта
(рис. 3).
Рисунок 3. Пустое хранилище объектов «fio»
Для работы с хранилищем объектов используются четыре базовых CRUDоперации:
1. Создание (Create).
2. Чтение (Read).
3. Обновление (Update).
4. Удаление (Delete).
Для демонстрации работы всех этих операций был разработан несложный
интерфейс веб-страницы (рис. 4), который позволяет задавать фамилию, имя и
отчество пользователя и сохранять эти значения в локальной базе данных.
Рисунок 4. Интерфейс веб-страницы для работы с данными
Для сохранения нового объекта сначала необходимо создать транзакцию с
указанием названия соответствующего хранилища. Для этого используется метод
«transaction» ранее открытой базы данных. После этого любой объект добавляется в
хранилище с помощью специального метода «add» (рис. 5).
Рисунок 5. Сохранение данных в хранилище объектов «fio»
Всем объектам, которые впервые сохраняются в хранилище, автоматически
назначается уникальный идентификатор «id», который добавляется в конце данных
каждого сохраняемого объекта (рис. 6).
Рисунок 6. Добавленные объекты в хранилище «fio»
Получить список всех объектов, находящихся в хранилище, можно с помощью
специального метода «getAll» (рис. 7).
Рисунок 7. Чтение всех объектов из хранилища «fio»
Как и все другие операции этот метод выполняется внутри определенной
транзакции и использует функцию обратного вызова, которая выполняется тогда,
когда запрос на получение всех объектов будет выполнен успешно.
Для получения определенного объекта из хранилища вместо метода «getAll»
необходимо использовать метод с именем «get». Он в качестве параметра принимает
первичный ключ объекта и возвращает все его данные, если такой объект в хранилище
существует (рис. 8).
Рисунок 8. Получение данных определенного объекта
Данный метод выполняется также внутри транзакции и его результат
обрабатывается с помощью соответствующей функции обратного вызова, при этом
транзакцию обязательно необходимо открывать с модификатором «readonly», т.е.
только для чтения.
Для обновления данных определенного объекта необходимо использовать
специальный метод «put» (рис. 9).
Рисунок 9. Обновления данных определенного объекта
Этому методу необходимо передавать в списке параметров данные
обновляемого объекта с обязательным указанием уникального идентификатора. Если
объекта с таким идентификатором в хранилище не существует, то он будет не
обновлен, создан заново.
Для выполнения удаления определенного объекта необходимо использовать
специальный метод «delete», которому в качестве единственного параметра
передается уникальный идентификатор удаляемого объекта (рис. 10).
Рисунок 10. Удаления определенного объекта из хранилища
При успешном завершении транзакции на удалении объекта выполняется
соответствующая функция обратного вызова «oncomplete».
Если необходимо одновременно удалить все объекты из хранилища, то вместо
метода «delete» достаточно вызвать метод «clear».