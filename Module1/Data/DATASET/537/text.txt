Постановка проблемы. Большое количество front-end разработчиков на
этапе верстки сталкиваются с двумя основными проблемами:
1. Проблема большого объема CSS кода, при котором разработчику становится сложно компоновать селекторы.
2. Необходимость регулярного копирования CSS кода.
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
№ 1 (15) 2017 В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ
138
CSS препроцессоры призваны помочь в решении этих проблем.
Цель статьи – рассмотреть принцип использования препроцессора SASS
в совокупности с Compass.
Изложение основного материала. Препроцессоры представляют собой
небольшие компьютерные программы, запускаемые при выполнении своих задач обработки в фоновом режиме.
SASS – это инструмент web-разработки, расширяющий возможности
стандартного CSS, добавляя, при этом, возможности стандартных языков программирования, такие как: переменные, циклы, условные операторы, наследование (насколько это возможно в CSS) [1].
На официальном сайте можно скачать и установить SASS [2]. Для работы
на Linux и Windows необходимо предварительно установить gem (на Mac OS
gem входит в состав ОС), так как с помощью него, в терминале командой gem
install sass устанавливается sass локально, после чего команда gem install
compass устанавливает Compass.
Далее в терминале необходимо перейти в папку с проектом и воспользоваться командой compass init после чего будут созданы необходимые папки с
файлами (рисунок 1).
Рисунок 1. Результат команды compass init
Необходимо создать файл с расширением html. После чего возможно использование вышеуказанных инструментов в проекте, для этого следует открыть папку проекта в текстовом редакторе (Sublime Text, Brackets и тд). Основной процесс написания стилей происходит в файле screen.scss, а весь код
компилируется в файл screen.css, однако при необходимости можно изменить
расположение и названия взаимодействующих файлов. Сделать это можно в
файле config.rb.
У SASS есть 2 синтаксиса:
1. Sass – отличается отсутствием фигурных скобок, в нём вложенные
элементы реализованы с помощью отступов;
2. SCSS (Sassy CSS) – использует фигурные скобки, как и сам CSS [2].
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ № 1 (15) 2017
139
В рассматриваемом примере будет использован SCSS, так как он ближе к
обычному CSS, а значит более удобен. Наконец, чтобы происходящее в
screen.scss отображалось в файле screen.css необходимо в терминале ввести команду compass watch.
Препроцессор SASS дает возможность создавать переменные, в которых
могут хранить несколько значений, например, названия шрифтов (рисунок 2).
Рисунок 2. Пример объявления переменных в SASS
Sass позволяет вкладывать CSS селекторы таким же образом, как и в визуальной иерархии HTML. Однако чрезмерное количество вложенностей делает
документ менее читабельным и воспринимаемым, что считается плохой практикой [3] (рисунок 3).
Рисунок 3. Использование вложенности
Оператор «&» относится к селектору, в котором он используется. Как
видно из примера выше значение этого оператора равно селектору «a» (рисунок 4). На рисунке 4 видно преимущество SASS над “чистым” CSS в котором
приходится указывать дополнительные селекторы.
Рисунок 4. Сравнение SASS и CSS
SASS включает в себя большое количество встроенных функций, которые
позволяют быстро изменить стиль элемента (рисунок 5). С перечнем доступных
функций можно ознакомиться на официальном сайте SASS, в разделе с доку-
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
№ 1 (15) 2017 В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ
140
ментацией.
Рисунок 5. Использование функций darken и transparentize
Одной из самых удобных возможностей SASS является наследование,
оно позволяет избавиться от копирования повторяющихся селекторов, например, если необходимо применить к определенному .btn2 те же свойства что
имеются в .btn1 [4] (рисунок 6).
Рисунок 6. Применение наследования
Простое выражение @extend избавляет разработчика от необходимости
копировать код и облегчает работу другому разработчику, который будет просматривать и править код. В результате работы препроцессора, в конечном
файле (CSS) появится конструкция, представленная на рисунке 7.
Рисунок 7. Результат работы оператора @extend
Директива @for выводит набор стилей заданное число раз. Для каждого
повторения используется переменная-счётчик для изменения вывода. Директива имеет две формы: @for $var from <начало>through <конец> и @for $var from
<начало> to <конец>, различие которых в словах through и to. Форма from ...
through, диапазон включает значения <начало> и <конец>, а форма from ... to не
включает значение <конец> [5] (рисунок 8).
Рисунок 8. SASS-цикл
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ № 1 (15) 2017
141
Директива @if принимает выражение и использует стили, вложенные в
нее в случае, если выражение возвращает любое значение, кроме false или null
[6] (рисунок 9).
Рисунок 9. SASS-условия
Используя SASS, разработчик имеет возможность писать собственные
функции, в отличие от стандартного CSS. Синтаксис миксинов следующий
@mixin имя_миксина (аргументы через запятую) {тело миксина}. Также удобно выделять миксин в отдельный файл, например, «_имяФайла.scss». Символ
нижнего подчеркивания нужен для того, чтобы препроцессор не создавал отдельный файл CSS файл, в этом нет необходимости, работа происходит с одним
CSS файлом – screen.css (рисунок 10).
Рисунок 10. Использование mixin
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
№ 1 (15) 2017 В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ
142
Чтобы вставлять миксин непосредственно в код, необходимо воспользоваться директивой «@include имя_миксина» и он автоматически отобразиться в
CSS файле.
CSS имеет возможность импорта, которая позволяет разделить CSS-файл
на более мелкие части и облегчить их в обслуживании. Но у этого способа есть
весомый недостаток: каждый раз, когда CSS использует @import в CSS создается еще один HTTP-запрос. Sass берет идею импорта файлов через директиву
@import, но вместо создания отдельного HTTP-запроса Sass импортирует указанный в директиве файл в тот, где он вызывается, то есть на выходе получается один CSS-файл, скомпилированный из нескольких фрагментов.
В примере разделим файл screen.scss на отдельные файлы, а уже в него
импортируем каждый из них (рисунок 11).
Рисунок 11. Содержимое файла screen.scss
Выводы. В статье был рассмотрен пример использования препроцессора
SASS-SCSS, продемонстрированы преимущества перед стандартным CSS. Однако есть еще много других полезных возможностей применения SASS, упрощающих работу разработчику. К каждому из них есть подробная документация,
которая поможет разработчикам самостоятельно освоить материал. 