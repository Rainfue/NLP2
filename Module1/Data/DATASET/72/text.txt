Распределенная информационная система в узком смысле, с позиции 
программного обеспечения (ПО) – это совокупность взаимодействующих друг 
с другом программных компонент. Каждая из таких компонент может 
рассматриваться как программный модуль (приложение), исполняемый в 
рамках отдельного процесса [1]. Реализацию технологии взаимодействия 
обеспечивает семейство взаимодействующих протоколов. Современные 
распределённые информационные системы рассматриваются как 
распределенные системы программного обеспечения. Связь между цепочкой 
взаимодействующих процессов — суть распределенных систем.
Иногда распределенной информационной системой называют такую 
распределённую систему, в которой функционирует более одного сервера БД.
Однако в рамках нашей статьи мы рассмотрим только простейший вариант.
В рамках статьи будет рассмотрено решение следующей задачи. Таблица 
бензин-цена (HTML страница) находится н веб-сервере. Администратор 
бензоколонки ежедневно обновляет её вручную – меняет цену бензина, заходя 
по ip адресу через браузер на HTML страницу (адрес известен администратору). 
Администратор в интерактивном режиме меняет только значение цены -
бензин-цена, через браузер и результат изменений возвращает на сервер.
Таблица целиком не копируется, копируются только изменения.
Клиент работает только в режиме чтения таблицы бензин-цена (HTML 
страница размещается на сервере).
Концептуальная модель статического и интерактивного сервиса 
распределенной информационной системы представлена на рисунке 1.
Прикладная архитектура информационной системы представлена на 
рисунке 2. Система состоит из двух компонентов: браузера, размещающегося 
на рабочих станциях и веб-сервера, размещающегося на сервере.
Рассмотрим построение виртуальной инфраструктуры, которая по своему 
составу будет повторять состав ИС, описанный выше в постановке задачи. 
Системная архитектура решения представлена на рисунке 3.
Виртуализация — процесс представления набора вычислительных 
ресурсов, или их логического объединения, который даёт какие-либо 
преимущества перед оригинальной конфигурацией. Обычно 
виртуализированные ресурсы включают в себя вычислительные мощности и 
хранилище данных. Практически это выглядит следующим образом. Сначала 
на физический сервер устанавливается специальная операционная система, 
которая называется гипервизором. Затем "поверх" гипервизора устанавливается 
одна или несколько гостевых операционных систем, в каждой из которых 
может быть развернуто свое приложение.
С точки зрения гостевой операционной системы сервер с гипервизором 
выглядит как сервер, который состоит из "виртуальных" стандартизованных.
серверных компонентов (процессоры, память, контроллеры дисковой 
подсистемы, жесткие диски и так далее), хотя "реальные" компоненты 
физического сервера могут быть какими угодно. Совокупность таких 
"виртуализированных" серверных компонентов, гостевой операционной 
системы и приложения называется виртуальной машиной(VM). На одном 
физическом сервере может быть размещено несколько виртуальных машин.
Таким образом, гипервизор изолирует гостевые операционные системы 
от аппаратного обеспечения и обеспечивает разделение ресурсов физического 
сервера между виртуальными машинами.
Виртуализация сервера с использованием VMware Workstation.
Для виртуализации сервера воспользуемся программным обеспечением 
компании VMware, доминирующей на рынке продуктов виртуализации 
серверов и рабочих станций. Дистрибутив VMware Workstation поставляется в 
виде одного исполняемого файла: VMware_Workstation.exe. После запуска 
исполняемого файла на экране появляется окно, показывающее процесс 
подготовки к установке программы. Выбираем установку стандартного пакета 
VMware. В будущем всегда можно будет добавить компоненты, которые не 
входят в стандартный пакет. Для начала установки нажимаем кнопку «Install», 
откроется окно, показывающее процесс установки.
При первом запуске программы будет предложено создать новую 
виртуальную машину. После выбора этого варианта откроется окно мастера 
создания виртуальных машин, который поможет быстро и просто создать и 
настроить виртуальную машину.
Гостевая операционная система на виртуальную машину ставится 
практически так же, как и на обыкновенную ЭВМ. Установка операционной 
системы начнется автоматически после завершения создания виртуальной 
машины, и через несколько секунд на экране откроется окно с мастером 
установки Windows Server 2003. Согласившись на установку операционной
системы, попадаем в меню менеджера дисков, выбираем нужный нам вариант и 
ждем, пока закончится процесс форматирования. Происходит копирование 
файлов и компьютер перезагружается.
Виртуализация рабочих станций.
Виртуализация рабочих станций выполняется аналогично виртуализации 
сервера.
Соединение и настройка соединения рабочих станций.
Заходим в Панель управления -> Сетевые подключения.
Щелкаем по подключению к локальной сети правой кнопкой мыши и 
кликаем на “Свойства”. Выбираем “Протокол интернета (TCP/IP)” и щелкаем 
на “Свойства”.
Указываем IP-адрес. Можно указывать любой из диапазона 
192.168.ххх.ххх. Главное, чтобы на двух компьютерах они не повторялись. То 
есть, если на одной 192.168.1.48, то на другой 192.168.1.68.
Далее необходимо чтобы оба компьютера были в одной Рабочей группе. 
Для настройки рабочей группы надо щелкнуть на Моем компьютере правой 
кнопкой и перейти в “Свойства”:
Нажимаем “Изменить” на вкладке Имя компьютера и вводим название 
рабочей группы.
Два компьютера в сети должны иметь одно и то же название Рабочей 
группы.
На этой же вкладке можно указать название компьютера в сети.
Чтобы проверить, действительно ли два компьютера теперь находятся в 
одной ЛВС, нужно запустить Командную строку и ввести команду ping, с 
указанием ip-адреса другого компьютера в сети. Например, ping 192.168.1.48, 
или ping 192.168.1.68.
Все IP-пакеты достигли машины с указанным адресом и вернулись 
обратно.
Установка WEB-сервера
Для создания Web-сервиса [1] нужно будет установить на компьютер 
SRV1 локальный Web сервер. Для начала серверу необходимо добавить роль 
Web-сервера. В Windows Server 2008 эта роль называется Internet Information 
Services или IIS. Для добавления заходим в «Пуск» — «Администрирование» 
— «Диспетчер сервера». Раскрываем вкладку «Роли» и нажимаем «Добавить 
роли».
Запустится «Мастер добавления ролей», нажимаем «Далее» и в списке 
выбираем «Веб-сервер (IIS)».
Нажимаем 2 раза «Далее» и попадаем на страницу выбора служб ролей. 
Помимо уже отмеченных служб, отмечаем «ASP.NET», «Расширяемость .NET», 
«CGL», «Расширения ISAPI», «Фильтры ISAPI», нажимаем «Далее» и 
«Установить».
После завершения установки в Ролях появилась вкладка «Веб-сервер 
(IIS)», в которой содержится «Диспетчер служб IIS» (Также он доступен через 
«Пуск» — «Администрирование» — «Диспетчер служб IIS»)
В диспетчере мы видим наш сервер, и вкладку «сайты», по умолчанию 
содержащую «Default Web Site». Этот сайт состоит из приветственной 
страницы IIS. Мы можем просмотреть ее открыв Internet Explorer и в строке 
адрес введя http://localhost
Можно сразу удалить эту страницу, кликнув в «Диспетчере служб IIS» по 
ней правой кнопкой и выбрав «Удалить».
Разработка HTML страницы для клиента.
Создать HTML-страницу можно в обычном блокноте (Пуск > Все 
программы > Стандартные > Блокнот > Создать новый файл > Сохранить с 
расширением файла .php).
HTML-документ должен заключаться в теги <html> и </html>. Они 
обозначают границы документа. HTML-документ делится на две части: голову 
документа <head> и тело <body>. Для них также обязательны закрывающие 
теги: </head> и </body> соответственно. Тег <head> записывается сразу после 
тега <html> и в нем заключена информация о названии страницы, мета-теги, и 
т.д. Сразу за </head> следует тег <body>, в котором будет само содержание 
сайта и страницы: текст и таблицы.
Сама таблица в HTML создаётся тегами <TABLE> и </TABLE> 
(помещаются между тегами <body> и </body>), строки таблицы (помещаются
между тегами <TABLE> и </TABLE>) тегами <TR> и </TR>, а столбцы
таблицы (помещаются между тегами <TR> и </TR>) тегами <TD> и </TD>.
Создадим таблицу, состоящую из двух строк и двух столбцов. HTML-код будет 
выглядеть так:
Открыв страницу Default.php, увидим следующее:
Если есть другие типы горючего то повторяем строки.
По умолчанию, таблица в браузерах представляется без рамки. Чтобы 
рамка таблицы была видна, используется атрибут «border»:
Проверим набранный код на ошибки и сохраним в папке 
C:\inetpub\wwwroot в файл с именем Default.php. Только сделаем при этом две 
важные вещи.
1. Сохраним HTML-код в кодировке UTF-8. Для этого в диалоговом окне 
сохранения файла Блокнота найдем раскрывающийся список Кодировка и 
выберем в нем пунктUTF-8.
2. Заключим имя файла в кавычки. Иначе Блокнот добавит к нему 
расширение txt, и наш файл получит имя Default.php.txt.
Теперь осталось открыть Default.php в Web-обозревателе и посмотреть на 
результат. В браузере клиента набираем ip адрес сервера 192.168.0.1 с
указанием требуемой страницы default.php. Должны увидеть актуальную 
таблицу с марками топлива и их ценами.
Разработка HTML страницы для администратора
Разрабатываем интерактивную страницу для ежедневной актуализации в 
блокноте и помещаем C:\inetpub\wwwroot\admin. Пример:
<!DOCTYPE html>
<html>
 <head>
<title>123 </title>
 <script type="text/javascript" 
src="http://yandex.st/jquery/1.6.0/jquery.min.js"></script>
 <script 
src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js">
</script>
 <meta charset="utf-8">
 <style>
 .filterInput{
 margin: 0;
 padding: 0;
 width: 50%;
 margin-left:10px;
 border: 0px;
}
.btn {margin-left:630px; margin-top:20px;}
 
 </style>
</head>
<body>
<?php 
$texttest= $_POST['texttest']; //получаем значение ячейки
$file = fopen("primer.txt", "w"); //открытие нового файла 
пример тхт для записи
$file2 = fopen("primer.txt", "r");
$text = $texttest; 
$con = fwrite ($file, $text); //производится запись в файл 
параметра цена бензина
$val = fgets($file2); //получение данных из файла
fclose($file); //закрытие файла
$texttest1= $_POST['texttest1']; 
$file1 = fopen("primer2.txt", "w");
$file3 = fopen("primer2.txt", "r");
$text1 = $texttest1;
$con1 = fwrite ($file1, $text1);
$val1 = fgets($file3);
fclose($file3);
?>
<form name="test" method="post" action="">
 <table border="1px" id="editable" style="width:300px;" 
align="center">
<tr>
<td>Бензин</td>
<td>Цена</td>
</tr>
<tr>
<td>АИ-95</td>
<td> <input type="text" name="texttest" 
class="filterInput" value="<?echo $val; ?>"></td>
</tr>
<tr>
 <td>АИ-98</td>
 <td> <input type="text" name="texttest1" 
class="filterInput" value="<?echo $val1; ?>"></td>
</tr>
</table> 
 <input type="submit" name="tests" class="btn" 
value="Сохранить" > 
 </form>
 </body>
</html>
Проверка работоспособности
Тестирование работоспособности информационной системы.
Клиент – адрес набора – скрин
Администратор – адрес набора – скрин 
