	
Сегодня практически каждая титульная страница веб-сайта содержит сложную
динамичную графику. Не теряют своей популярности браузерные игры и небольшие
интерактивные элементы на страницах, предполагающие активное взаимодействие с
пользователем и реагирование на его действия с другими объектами на отрисованной
сцене. Существует множество веб-сайтов, частично или полностью реализующих
функционал графических редакторов для редактирования фото, совместной работы над
графикой, изменение формата и улучшение качества изображения.
Для решения таких задач недостаточно обработчиков событий стандартных
HTML-элементов, и даже SVG-графика, хотя и обеспечивает высокую интерактивность и
масштабируемость вместе с простотой обработки событий, не способна компенсировать
своими преимуществами недостатки производительности при рендере сложных сцен со
множеством объектов. Поэтому исследователи и опытные разработчики рекомендуют для
отрисовки таких сцен применять элемент HTML5 Canvas.
Например, результаты экспериментов зарубежных исследователей свидетельствуют
[3], что HTML5 Canvas демонстрирует наилучшие показатели из всех инструментов
визуализации графики. Эксперты объясняют это тем, что графика отрисовывается
динамично в HTML-элементе, в то время как каждый графический элемент,
сформированный методом SVG, обладает соответствующим тегом в древовидной
структуре DOM и требует внесения изменений в DOM для обновления отображаемого
контента. По утверждению экспертов, WebGl может значительно превзойти canvas и SVG
в ситуациях простых анимаций, поскольку достигает стабильной FPS в 60 кадров в
секунду. Также WebGL показывает лучшие результаты по FPS при анимации элементов. В
случае WebGL FPS сильно снижается при использовании сложных анимаций множества
элементов, но всё равно остаётся более высокой, чем для canvas и SVG. По оценке
экспертов, наибыстрейшего времени рендеринга заданного количества элементов
достигает HTML5 canvas. Похожие выводы были сделаны и другими исследователями [7],
в ходе их эксперимента было выдвинуто и доказано предположение, что отображение
текстовой информации негативно сказывается на производительности инструментов,
основанных на canvas. По наблюдению авторов статьи, падение производительности
WebGL происходит только при отображении текста. Таким образом, HTML5 Canvas
лучше подходит для динамической и интерактивной графики, такой как игры, анимации
или обработка изображений. Но, в отличие от SVG, HTML5 Canvas имеет один элемент,
который не является частью DOM дерева. Для изменения изображения на холсте
необходимо перерисовывать его целиком или частично с помощью JavaScript. SVG имеет
множество графических элементов, которые являются частью DOM дерева. Для
изменения изображения в SVG можно использовать как JavaScript, так и CSS. Такая
реализация HTML5 Canvas создаёт ряд неудобств при реализации графики внутри
94
фреймворков и библиотек, следующих декларативному стилю программирования. Так,
затраты разработчика на реализацию самой простой сцены с одним объектом, с которым
может взаимодействовать пользователь, при использовании HTML5 Canvas серьёзно
возрастают, и к тому же появляется необходимость частично нарушать концепции
программирования, лежащие в основе React. При этом далеко не всегда реализация
графики требует использования сложных высокоуровневых инструментов, таких как PixiJS
[5] или PhaserJS [4], поскольку они сами по себе являются самостоятельными
инструментами, их сложнее встроить в логику компонентов React, а избыточная
функциональность влияет на производительность.
Наилучшим выходом для реализации графики на HTML5 Canvas в React
представляется применение библиотек, которые адаптируют имеющиеся самостоятельные
инструменты под концепции React или предлагают собственное решение. Была
исследована документация библиотек JavaScript, предлагающих решения для работы с
HTML5 Canvas совместно с React.
React-konva – это библиотека JavaScript для рисования сложной графики на холсте
с использованием React. Она предоставляет способ создания и управления графическими
элементами на холсте с использованием компонентов React и включает в себя такие
функции, как перетаскивание, наслоение и обработка событий. Библиотека react
поддерживает практически все основные фигуры: Circle, Rect, Sprite, Image, Ellipse, Line,
Text, и т.д., действий drag&drop, анимаций, фильтров, кэширования, обработка события
клика [1]. По утверждению разработчиков, использование холста без библиотеки может
быть быстрее, поскольку react-konva поставляется с двумя уровнями абстракций – Konva и
React. Для многих приложений его производительность по-прежнему очень хороша.
Для того, чтобы удобно использовать Pixi.js в React, существует библиотека
@pixi/react, которая предоставляет реактивные и декларативные привязки к Pixi.js. Она
позволяет рисовать на Canvas с помощью JSX и React-компонентов, основывается на
react-three/fiber [6], рендерере React для three.js, и пользуется той же базовой логикой и
API, поддерживает все графические формы, фильтры, маски и другие возможности Pixi.js.
Библиотека оптимизирует эффективность и синхронизацию с виртуальной DOM React с
помощью сравнения текущего и следующего состояния графа сцены и вносит только
необходимые изменения в приложение Pixi. Он также определяет приоритеты
обновлений на основе взаимодействия с пользователем или видимости объекта.
На рисунке 1 представлен пример кода, демонстрирующий декларативный способ
описать отрисовываемые объекты в библиотеках react-konva и адаптации pixi.js для React:
Рисунок 1 – пример отрисовки объекта с помощью библиотек
react-konva и @pixi/react.
«Научно-технические инновации и веб-технологии» № 1/23 95
Похожим образом работают и другие адаптации инструментов для встраивания в
React и самостоятельные инструменты. В различных источниках и публикациях опытных
разработчиков также встречаются упоминания других библиотек, в основном решающих
специфические задачи отображения определенных видов данных, например, графиков,
диаграмм, графов или молекулярных структур. Ввиду того, что данные, которые
необходимо визуализировать, структурированы и практически неизменны, эти
библиотеки не предполагают использования Canvas HTML5 и предпочитают более
универсальные способы реализации, такие как стилизация простых элементов DOM и
SVG-графика.
Для экспериментального подтверждения преимущества в производительности
одной из двух описанных библиотек было разработано простое приложение на React,
использующее «ленивую» загрузку двух компонентов, один из которых использует reactkonva, а другой – pixiJS/react. Библиотеки отрисовывают на холсте множество объектов,
которые раз в 10-100 миллисекунд перемещаются. Для навигации между сценариями
используются кнопки, созданные с помощью библиотеки rebass [2], предоставляющей
доступ к стилизации элементов через пропсы. Внешний вид приложения при активации
сценариев эксперимента с библиотекой react-konva и pixi/react представлен на рисунке 2
соответственно.
Рисунок 2 – Внешний вид главной страницы приложения в сценарии
эксперимента с react-konva (верхний) и pixi/react (нижний).
Существует множество показателей производительности рендеринга, которые
могут быть измерены и оптимизированы. Некоторые из них это:
1. Время до первого рендера (Time to First Render) – это время, которое требуется
браузеру для отображения первого содержательного контента на странице.
2. Время до интерактивности (Time to Interactive) – это время, которое требуется
браузеру для того, чтобы страница стала полностью интерактивной и отзывчивой на
действия пользователя.
3. Количество кадров в секунду (Frames per Second) – это частота, с которой
браузер обновляет изображение на экране. Чем выше этот показатель, тем плавнее
анимация и взаимодействие с пользователем.
4. Задержка ввода (Input Latency) – это время, которое проходит между действием
пользователя (например, нажатием кнопки или щелчком мыши) и реакцией браузера на
это действие. Чем меньше этот показатель, тем быстрее и приятнее работает интерфейс.
5. Использование памяти (Memory Usage) – это количество памяти, которое
занимает ваше приложение в браузере. Чем больше памяти используется, тем больше
вероятность того, что браузер будет замедляться или зависать [8].
96
Сравнение основных показателей производительности и других факторов,
которые могут повлиять на выбор библиотеки, представлено в таблице 1. Показаны
средние значения, полученные в результате усреднения нескольких измерений в двух
разных браузерах – Opera GX 97.0 и Microsoft Edge 112.0. Вес файла влияет на время
первой загрузки компонента, для измрения данной величины и была использована
ленивая загрузка с целью разделения кода на фрагменты, получаемые отдельно. На
рисунке 3 представлен пример отчёта инструмента измерения производительности
страницы Lighthouse для сценария с библиотекой pixi/react при 1000 объектов [9].
Таблица 1 – Сравнительная таблица показателей производительности react-konva и
pixi/react.
Библиотека Количество
объектов
FPS,
кадр/с
Вес
файла
Оценка
Lighthouse
Примечания
React-konva 100 54 1.3 87 Заметно сглаживание
1000 35 21 отрисованных объектов
7000 7 11
Pixi/react 100 60 2.4 79 Для отрисовки простых
фигур частично
необходимо писать
последовательность
отрисовки, как для
canvas без
использования
библиотеки
1000 5
9
43
7000 2
7
36
Рисунок 3 – Отчет Lighthouse для react-pixi
Полученные результаты эксперимента позволяют сделать следующие выводы:
1. Библиотека Pixi/react лучше оптимизирована для работы с большим
количеством движущихся объектов, но значительное падение производительности при
количестве объектов больше 1000 сохраняется для обеих библиотек.
2. Для простых фигур pixi/react требует использовать компонент Graphic,
предполагающий отрисовку последовательными функциями, как при использовании
canvas без библиотек, тогда как react-konva предоставляет готовые компоненты для
реализации геометрических фигур и пропы для определения их параметров и цвета.
3. Заметна разница в сглаживании отрисованных фигур, вероятно, pixi/react
необходимо использование дополнительных фильтров и параметров для достижения
хорошего качества изображения, что может повлиять на производительность.
В заключение можно рекомендовать react-konva для реализации простых сцен с
небольшим количеством объектов, а для сложных динамичных сцен – pixi/react.
Разработчикам, плохо знакомым с синтаксисом HTML5 canvas, также рекомендуется
использовать react-konva. В целом библиотеки ускоряют процесс разработки графики при
условии, что разработчик знаком с React и его основными концепциями.