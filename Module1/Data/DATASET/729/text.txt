Разработка серверной части: Сначала разрабатывается серверная часть
приложения, которая отвечает за обработку запросов от клиентов. Это может
быть реализовано с использованием различных серверных технологий, таких
как PHP, Ruby on Rails, Node.js и другие.
II. Разработка клиентской части: После того как серверная часть готова,
разрабатывается клиентская часть приложения. Это обычно включает в себя
разработку HTML, CSS и JavaScript кода. JavaScript используется для создания
интерактивности на стороне клиента.
III. Обработка данных: Для обмена данными между клиентом и сервером обычно
используется AJAX или Fetch API. Это позволяет асинхронно загружать
данные без перезагрузки страницы.
IV. Управление состоянием: Управление состоянием приложения может быть
сложной задачей в классическом подходе. Часто разработчики используют
глобальные переменные или куки для хранения состояния приложения.
V. Обновление интерфейса: После получения данных с сервера, клиентская часть
приложения обновляет интерфейс, чтобы отобразить новую информацию.
React - это популярная библиотека JavaScript, разработанная Facebook (деятельность
организации Meta Platforms Inc, ее продуктов Instagram и Facebook запрещена в Российской
Федерации), которая упрощает создание интерактивных пользовательских интерфейсов.
Процесс создания веб-приложений с использованием React выглядит следующим образом:
1. Компонентная архитектура: В React приложении интерфейс разбивается на
компоненты, которые могут быть многократно использованы. Каждый
компонент отвечает за отображение определенной части интерфейса.
Тенденции развития науки и образования -15-
2. Управление состоянием: React предоставляет средства для удобного
управления состоянием приложения. Состояние компонентов хранится
локально, и React автоматически обновляет интерфейс при изменении
состояния.
3. Виртуальный DOM: React использует виртуальное DOM (Virtual DOM) для
оптимизации обновления интерфейса. Вместо обновления реального DOM при
каждом изменении, React сначала обновляет виртуальный DOM, а затем
эффективно применяет изменения к реальному DOM.
4. Разделение логики и представления: React позволяет разделять логику и
представление компонентов, что делает код более чистым и поддерживаемым.
5. Современные инструменты: Сообщество React разработчиков активно
работает над разработкой инструментов и библиотек, упрощающих разработку
веб-приложений, таких как Redux для управления состоянием, React Router
для навигации и многие другие.
Сравним оба подхода:
 Классический подход требует разработки как серверной, так и клиентской
части приложения, что может занять больше времени и усилий.
 React упрощает создание интерфейса и управление состоянием приложения
благодаря компонентной архитектуре и виртуальному DOM.
 В React разработчики могут использовать современные инструменты и
библиотеки, что улучшает производительность и сопровождаемость кода.
Оба подхода имеют свои преимущества и недостатки, и выбор зависит от конкретных
требований проекта и опыта разработчиков. Однако React стал популярным выбором благодаря
своей эффективности и удобству разработки, что делает его привлекательным вариантом для
многих веб-приложений. В отличие от этого, веб-приложения не требуют установки
дополнительного программного обеспечения на рабочую станцию. Существуют два главных
подхода к разработке веб-приложений: классический подход и подход, использующий
различные инструменты, такие как Angular, React, Vue и другие. Основная цель данной работы
состоит в более подробном рассмотрении классического подхода и подхода, использующего
библиотеку React, и их последующем сравнении для выявления их преимуществ и недостатков.
Классический метод разработки веб-приложений появился еще во времена начала
Интернета. Он включает в себя написание файлов CSS и JavaScript, которые затем
объединяются в HTML-документе. Несмотря на свой долгий возраст, этот подход все еще
применяется из-за своей простоты в освоении. Однако с помощью данного метода сложно
реализовать интерактивные веб-приложения, так как он больше подходит для статических
страниц.
React - это библиотека JavaScript с открытым исходным кодом, разрабатываемая и
поддерживаемая Facebook (деятельность организации Meta Platforms Inc, ее продуктов
Instagram и Facebook запрещена в Российской Федерации). Она облегчает создание
интерактивных пользовательских интерфейсов, эффективно обновляя и отображая только те
компоненты, которые изменились при изменении данных. На сегодняшний день использование
библиотеки React и связанных с ней пакетов является одним из наиболее популярных подходов
к разработке веб-приложений. Было проведено сравнение данных методов разработки вебприложений.
Рисунок 1. Структура html документа.
-16- Тенденции развития науки и образования
Процесс создания минимальной страницы с содержимым различается для обоих
подходов. Для классического подхода достаточно создать HTML-файл и задать структуру
документа, как показано на рисунке 1. В случае использования библиотеки React для запуска
базовой страницы потребуется выполнить несколько дополнительных шагов. Это включает
установку Node.js, генерацию структуры приложения с помощью команды create-react-app,
переход в созданный проект и запуск страницы через команду npm start.
Рисунок 2. Синтаксис JSX.
Касательно создания и поддержки крупных веб-приложений, использование
классического метода требует искусственного разделения технологий, размещая разметку и
логику в разных файлах. Это усложняет создание динамических страниц из-за слабой связи
между логикой и разметкой. Подход с использованием React рекомендует применение JSX,
надстройки над JavaScript, которая позволяет легко понимать код и представлять DOM-модель,
обеспечивая более четкое описание интерфейса.
React автоматически учитывает ключевые механизмы пользовательского интерфейса:
 Обработка пользовательских событий.
 Динамическое изменение состояний.
 Подготовка данных для последующей отрисовки на экране.
Для этого библиотека React использует компоненты, которые объединяют в себе как
разметку, так и логику. Для вставки JavaScript кода в JSX достаточно обернуть его в фигурные
скобки. Пример циклической подстановки элемента массива в тег div показан на рисунке 3.
Рисунок 3. Внедрение JS кода в JSX.
Однако различия проявляются и в скорости отрисовки страниц. В классическом подходе
при изменениях страница полностью перезагружается, так как приходят новые данные с
сервера. Это приводит к перерисовке всей структуры страницы (DOM-дерева), что может
занять много времени, особенно при наличии множества объектов.
С библиотекой React возможно создание интерактивных веб-приложений, которые
выполняют множество действий и отвечают на них мгновенно. Все обновления данных
происходят в режиме реального времени без полной перезагрузки страницы. Скорость работы
React-приложения обеспечивается благодаря механизму, который отслеживает изменения
элементов и обновляет только их, минимизируя затраты. Эффективность также обеспечивается
виртуальным DOM-деревом - легковесной копией реального DOM. Вместо непосредственной
работы с DOM, изменения вносятся в копию, а затем применяются к реальному DOM. Этот
подход значительно увеличивает скорость работы, так как избегает сложных операций с
реальным DOM.
В заключение, были рассмотрены два подхода к реализации веб-приложений:
классический и с использованием библиотеки React. Проведено их сравнение на основе
выбранных критериев. Хотя создание минимальной страницы проще и быстрее с классическим
подходом, разработка и поддержка приложений с использованием React происходит более 