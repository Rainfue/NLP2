Разработчики серверных программных решений в процессе своей деятельности могут сталкиваться с необходимостью использования данных
из сторонних источников. Такими источниками
могут быть, например, интерфейсы разработки
приложений (АРІ) либо веб-страницы со структурированными данными. Некоторые источники данных при этом сопровождаются технической документацией. Однако документация
не всегда обладает всей полнотой необходимой
информации.
Для предотвращения возможных ошибок разработчик должен опираться на следующую информацию об используемых сторонних данных:
1. Наименования возможных полей.
2. Типы данных каждого поля.
3. Возможность иметь пустое значение
(пиІІаЫе-признак поля).
4. Обязательность наличия каждого поля.
5. Диапазон возможных значений - для числовых типов.
6. Диапазон возможной длины строки - для
строкового типа.
7. Диапазон возможного количества элементов - для массивов.
8. Ассоциативность/диссоциативность - для
массивов.
9. Примеры возможных значений для каждого поля [1].
В данной работе описывается разработка прикладной библиотеки для анализа типов и структуры сторонних данных на языке программирования РНР.
В языке программирования РНР существуют следующие типы данных, объединённые в
группы.
Скалярные типы: логический (Ъооі), целочисленный (іЫ), числа с плавающей точкой (йоаі или
йоиЫе) и строковый (йМп§) [2]. Представляют собой элементарные типы данных. Присутствуют в
большинстве языков, однако, в отличие от реализации в некоторых языках (например )5), данные
этих типов не являются экземплярами соответствующих классов. Для работы с данными скалярных типов в языке РНР реализованы специальные
операторы и функции.
Смешанные типы: массив (аггау), объект
(оЪ]ей), саІІЪаск-функции (саІІаЪІе) и итерируемый тип (йегаЫе) [3]. Массив и объект представляют собой структурированные типы для
упрощения разработки и для логического объединения данных (также объекты являются частью
реализации парадигмы объектно-ориентированного программирования). СаІІЪаск-функции
(или функции обратного вызова) - обычные, анонимные и стрелочные функции с поддержкой
обратного вызова. В отличие от остальных типов
данных, крайне редко используются для обмена
данными между информационными системами.
НегаЪІе - псевдоним для данных, которые мож- І253
но перебирать с помощью рһр-цикла £огеасһ, а
также использовать в генераторах с оператором
уіеЫ £гот. Такими данными являются массивы и объекты классов, реализующих интерфейс
Тга^егйаЫе. Типы данных саІІаЫе и ііегаЫе не будут рассматриваться в данной статье из-за специфичности их применения.
Наконец, специальные типы - переменная
без значения (пиіі) и ссылка на внешний ресурс
(гезоигсе) [4]. В отличие от других типов, пиіі редко бывает единственным возможным значением
переменной или поля. Чаще всего пиіі используется в паре с другими типами. В таком случае переменная или поле приобретает свойство пиІІаЫе.
Важно точно устанавливать пиІІаЫе переменные и
прямо указывать это в коде во избежание непредвиденных ошибок при исполнении. Переменные
и поля типа гейоигсе в свою очередь хранят ссылки на внешние ресурсы, которые создаются и используются специальными функциями. В состав
ссылки на ресурс входят тип ресурса (строка) и его
идентификатор (целое число).
Помимо существующих типов данных также
важно отслеживать условные типы: пустая строка,
пустой массив, числовая строка.
Для анализа сторонних данных была разработана и выгружена в открытый доступ библиотека
ҒіеЫйЗсаппег (с англ. «сканер полей»). Она предоставляет разработчикам широкие возможности для изучения структуры сторонних данных.
Библиотека расположена в СіІПиЪ-репозитории
и доступна всем желающим по адресу һйрй://
§йһиЪ.гат/ки^аЫіп/ҒіеЫй5саппег.
Библиотека устанавливается как сторонний
пакет посредством менеджера пакетов Сотройег.
Для установки достаточно в папке с проектом
выполнить команду «сотройег гедшге ки^аЫіп/
ЪеЫй-йсаппег». Если на компьютер установлен
менеджер пакетов Сотройег и команда сотройег
корректно обрабатывается командной оболочкой,
пакет будет успешно установлен в папку ^епһог.
Для описания каждого типа данных были
созданы соответствующие классы в пространстве
имен Ки^аЫіп\ҒіеЫй5саппег\Турей, расширяющие абстрактный класс Ки^аЫіп\ҒіеЫй5саппей\
Туре. В каждом из этих классов реализованы следующие методы, которые требует родительский
класс Туре:
1. риЪІіс йіаііс £ипсііоп сһесНУа1ие($^а1ие): Ъооі
- проверка принадлежности значения данному
типу;
2. риЪІіс йіаііс Ыпсһоп §еіСоһе(): йігіп§ - получение кода текущего типа (Іпіедег, 5Ъп§, Вооі...);
3. риЪІіс £ипс!іоп аһДУаІие^аІие): ^оЫ - обработка еще одного возможного значения для поля
данного типа.
Каждое поле данных (переменная, элемент
массива, поле объекта) представлено в виде экземпляра класса Ки^аЫіп\ҒіеЫй5саппей\ҒіеЫ,
содержащего следующие свойства:
1. аггау $іурей - возможные типы данных зна-
■ Труды университета №1 (86) • 2022
чения поля;
2. ІЫ $пи11_питЪег - количесгво случаев, когда
поле имело пустое значение (пиІІ);
3. іЫ $по1_ехій1й_питЪег - количество случаев, когда элемент массива или поле класса не
существовало;
4. ІЫ $ехійН_питЪег = 0 количество случаев,
когда поле существовало.
Исходя из значений перечисленных свойств
можно получить общие сведения о поле.
Для сканирования данных необходимо создать экземпляр класса Ки^аЫіп\ҒіеЫй5саппег\
ҒіеЫй5саппег, а затем передать в него данные, вызвав метод йсап(). При этом важно передать как
можно больше вариантов однородных данных с
различным содержимым. Например, если данные берутся из метода стороннего интерфейса
разработки приложений (АРІ), который принимает на входе номер страницы, желательно перебрать несколько страниц.
После успешного сканирования, поле гейиҺ
созданного объекта станет экземпляром класса
ҒіеЫ. Именно в нем будет сохраняться результат работы сканера после каждой итерации
сканирования.
Рассмотрим пример использования данного
решения. В качестве данных возьмем открытый
АРІ проекта Соо§1е Воокй. Данный проект располагает большим объемом информации о книгах и
других печатных изданиях.
Для поиска по базе сторонним разработчикам
необходимо выполнить НТТР-запрос по следующему адресу: һйрй://№№№.§оо§1еарій.гат/Ъоокй/
^1/уо1итей?д=текст_запроса [5].
Получим результаты для различных текстов
запроса и просканируем через ҒіеЫй5саппег (рисунок 1).
В результате выполнения данного скрипта
пользователю отобразится информация в доступном виде (рисунок 2).
В результате отобразится результат работы в
форматированном виде, удобном для человеческого восприятия. Опираясь на полученные данные, сторонний программист сможет лучше ознакомиться с данными, принимаемыми из внешних
серверов [6].
Рассмотрим другой пример: анализ данных,
возвращаемых АРІ сервиса получения информации об ІР-адресах. Далее приведен исходный код
примера (рисунок 3) и результат его выполнения
(рисунок 4).
На примерах виден общий алгоритм работы
с библиотекой. Для начала пользования сканера
создается экземпляр класса ҒіеЫй5саппег. Далее
производится запрос к сторонним АРІ, и дальнейшее декодирование полученных данных, при его
необходимости. Полученные данные передаются
методу йсап() экземпляра класса ҒіеЫй5саппег.
Обратите внимание, что получение однородных данных и их передачу в сканер необходимо
производить несколько раз. Это повышает точность их описания.
В качестве входных данных подойдут не только ответы сторонних АРІ, закодированные в ІЗО^
или ХМ^ форматах, но и любые другие виды форматированных данных [7].
Представление результата в виде объектов
классов дает широкий спектр возможностей,
включая автоматическую генерацию классовоберток и документации.
В результате разработки библиотеки ки^агйіп/
ҒіеІДйЗсаппег удалось создать удобный и необходимый современным разработчикам инструмент
для получения подробной информации о структуре и типах сторонних данных. Были изучены и
применены тонкости разработки на языке программирования РНР.
Разработанная библиотека имеет потенциал
дальнейшего развития. Размещение ее в отдельном репозитории на СіҒНиЪ дает возможность
сторонним разработчикам принимать участие в
разработке проекта.