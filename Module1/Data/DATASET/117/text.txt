Низкая рыночная цена и массовость производства микрочипов позволили людям создавать устройства интеллектуального управления в новые сферы деятельности, например, в так 
называемых «умных домах». Умное устройство – это электронное устройство, обычно подключаемое с помощью беспроводных сетей, которое может работать в некоторой степени 
автономно и интерактивно [1].
На рынке умных устройств есть самые различные устройства: от чайников и термометров, до звуковых систем и подушек. «Умный» дом объединяет в себе множество «умных 
устройств», образующих систему, управляемую единым центром. Также, в планах у учёных 
есть идея о построении умного кампуса или даже университета [2].
Однако, интерфейс взаимодействия пользователя с «умным» домом зачастую остается 
традиционным, с помощью ручного ввода команд или с помощью графической консоли, что 
не во всех случаях является удобным. В некоторых случаях удобнее использовать голосовые 
команды для управления устройствами. С данной задачей могут помочь голосовые помощники, такие как: Cortana, Siri, Алиса, Google Assistant, Google Now, Alexa, Viv, Ozlo и д.р.. Из 
всех перечисленных только Siri и Алиса могут понимать русскую речь и взаимодействовать с 
устройствами умного дома. Однако, Siri доступна только для устройств на операционной системе iOS, а Алисе для каждого запроса необходимость постоянное подключение к интернету, так как каждый запрос производится через поисковую систему, и весь функционал представляет из себя модифицированное взаимодействие с умной поисковой строкой в браузере 
[3]. А значит для любого, даже самого незначительного запроса отсутствие интернета становится непреодолимой преградой. Так же постоянная передача пользовательских и телеметрических данных умного дома в интернет влечёт за собой угрозу нарушения безопасности и 
конфиденциальности.
В итоге, принято решение создать голосового помощника для управления умным домом и умными вещами, который, на сколько это возможно, не требует доступа в интернет.
Для создания качественной системы требуется предварительное создание её проекта 
(логической модели) и построение прототипа, на котором можно будет производить тестирование. 
Основные требования к системе:
 поддержка русской речи;
 отсутствие необходимости подключения к сети интернет для управления устройствами «умного» дома;
 небольшие аппаратные требования (потенциально аппаратная реализация на операционной системе Linux на базе платформы Raspberry Pi);
 использование только бесплатных инструментов.
Для учёта существующих наработок в данной предметной области необходимо рассмотреть, оценить достоинства и недостатки существующих готовых решений. Также из их
описания можно понять принципы работы, алгоритмы обработки данных, используемые инструменты.
После составления перечней доступных инструментов на каждый этап обработки команд необходимо их проанализировать и выбрать наиболее подходящие под перечисленные 
выше условия.
Далее требуется построить логическую модель системы с учётом требований и функциональных характеристик всех выбранных инструментов.
На данный момент, существует несколько схожих решений. Так, например, в работе [4] 
авторы спроектировали и построили голосового помощника для взаимодействия с операционной системой Windows на русском языке, однако библиотека для распознавания голоса 
использует интернет, и голосовой помощник может взаимодействовать только с Windows. В 
работе [5] голосовой помощник рассчитан на работу с Raspberry Pi и взаимодействием с умными устройствами, не требует подключения к интернету, но рассчитан на работу с английским языком.
Автор статьи [6] смог реализовать голосовой помощник для управления умным устройством, не требующий подключения к интернету, на языке программирования C#, однако архитектура приложения является монолитной и плохо расширяемой.
Для создания приложения решено использовать язык программирования Python, так 
как, благодаря своей гибкости он позволит быстро создать и настроить прототип будущего 
приложения. Кроме того, все основные инструменты обработки речи и текста, описанные 
ниже, разработаны в виде библиотек именно для использования в программах, написанных 
на этом языке.
На рис. 1 приведён целевой алгоритм обработки голосовых команд. 
1. Получение голосовой команды может быть реализовано как постоянное прослушивание и ожидание специальной команды, например, «Эй, Гугл» или как нажатие клавиши и 
голосовой ввод команды. Каждый из этих методов имеет недостаток, постоянное прослушивание звука – это потенциальная угроза безопасности для пользователя, а использование 
ввода с помощью дополнительных действий снижает удобство использования.
2. Автоматическая обработка звука от посторонних шумов может иметь негативный 
эффект, поэтому целесообразно провести отдельное исследование эффективности существующих библиотек.
3. Распознавание речи и преобразование её в текст может быть выполнено как с помощью готовых библиотек, так и с помощью собственной нейросетевой модели, которую необходимо будет обучить на большом количестве данных.
4. Выполнение команды предполагает использование ОС Raspberry Pi, однако нужно 
предоставить пользователю возможность использовать команды операционной системы 
Windows и macOS.
5. Выдача ответа пользователю должна быть реализована как с помощью голоса, так и 
с помощью текста, причём голос должен быть реализован на разных языках и потенциально 
обладать разными голосами.
Для распознавания речи можно или самим придумать решение, или использовать готовые библиотеки. Так как существует огромное количество вариаций готовых решений, создавать новое является не совсем целесообразным. Различные облачные сервисы, например, 
Google API, обладают высоким качеством по сравнению с аналогами [7], но всё же требуют 
подключения к интернету, и поэтому данный вариант не подходит для решения поставленной задачи.
Библиотека Speech Recognition [8] предназначена для обработки голосовых сообщений 
и приведению их в текстовый формат. Модель Vosk [9], работу с которой поддерживает 
Speech Recognition, предоставляет более качественное распознавание голосов на многих популярных языках. Достоинства и недостатки указаны в табл. 1. Для реализации системы выбрана легковесная модель Vosk. 
Далее этап очистки текста можно выполнить стандартными средствами языка Python. 
На этапе векторизации тоже доступно несколько хороших, но альтернативных решений, 
приведённых в табл. 2.
Из перечисленных вариантов в табл. 2, для того чтобы уменьшить, которая может появиться при распознавании голосовых команд, можно использовать библиотеку fuzzywuzzy 
[11]. Данная библиотека использует расстояние Левенштейна для нечёткого сравнения строк.
Для преобразования текста в речевые ответы подходят библиотека pyttsx3 [12] и синтезатор речи RHVoice [13], особенности которых указаны в табл. 3 Для синтеза речи на русском языке выбран синтезатор речи RHVoice, голос с именем «Ирина».
На рис. 2 в виде блоков представлена целевая архитектура программно-аппаратного 
комплекса для решения поставленной задачи. У каждого из блоков своя зона ответственности. Для программной части системы можно использовать микросервисную архитектуру, 
позволяющую осуществлять разработку и обновление программы по частям, внести модульность в систему [14]. 
В первую очередь, в независимости от выбранной архитектуры, нам нужен сервис для 
взаимодействия с базой данных. В ней будут храниться шаблоны голосовых команд. Пользователь сможет самостоятельно создать шаблоны команд и привязать к ним соответствующие 
фрагменты исполняемого кода для взаимодействия с устройствами «умного» дома. Также 
база данных должна содержать таблицу пользователей для распознавания по голосу и таблицу устройств, в которой будут храниться параметры взаимодействия (протоколы, адреса, 
порты и т.д.).
Для настройки системы планируется разработать специальное приложение для мобильных устройств.
Блок, отвечающий за распознавание и синтез речи, не должен использовать подключение к интернету и при этом достаточно быстро обрабатывать запросы и отвечать на них.
Выполнение команд производится с помощью библиотеки OS, позволяющей запускать 
команды на различных операционных системах.
Код основного блока должен отвечать за то, чтобы связывать разные блоки для возможности сохранять модульную структуру приложения.
Блок логирования должен отвечать за запись чтение логов. 
Блок команд отвечает за выполнение команд под разными операционными системами. 
Так же в будущем возможно расширение проекта: добавление чат бота для взаимодействия преимущественно на мобильных устройствах, а подключение к умным устройствам 
должно быть реализовано через роутер.
В данной работе был проведён анализ существующей проблемы: отсутствия интернет 
независимого голосового помощника для управления умными вещами. Были рассмотрены 
схожие готовые решения, был проанализирован ряд инструментов для построения программы, была спроектирована архитектура приложения.