Технология Node, достаточно свежа, и постоянно предлагает новые
решения. Технологическая база достигшая высокого уровня зрелости
гарантирует, что потраченное на её изучение время будет полностью оправдано.
При работе с Node необходимо помнить о двух обстоятельствах. Первое, основой Node является JavaScript, который используется для разработки сценариев на
стороне клиента, но так же можно применить и CoffeeScript. Во-вторых, Nodeэто не JavaScript, это технология предназначенная для сервера, а значит
некоторые средства и функции у них отличаются (Рис. 1.). [1]
Но почему именно Node, если это почти одно и то же, что и браузерный
JavaScript?
Одним из главных преимуществ Node перед JavaScript является то что в
Node.js разрабатывается только одна реализация веб- приложения, а не все
возможные реализации под дюжину браузеров. Node был задуман как платформа
для создания веб-приложений, ориентированная на ввод-вывод данных. Часть
функциональности по умолчанию относятся к асинхронному вводу-выводу и
соответственно пользователю не нужно беспокоится о производительности.
Также не стоит беспокоится по поводу программных потоков выполнения, вебприложение на Node исполняется в единственном программном потоке. [2]
На примере Apache, рассмотрим работу веб-сервера. В поддержке Apache
есть две модели мультипроцессорной обработки (MPM) поступающих запросов.
В первой модели для каждого запроса выделяется отдельный исполняющийпроцесс, который длится до тех пор, пока запрос не будет выполнен, во второй
модели выделятся отдельный поток программного исполнения для каждого
запроса. [3]
В первой модели также известной как модель prefork, может создаваться
такое количество процессов, какое указанно в конфигурациях Apache.
Преимущество данной модели в том, что приложения, к которым обращаются с
использованием запросов, например PHP-приложения, не всегда является
многопоточным. Основным недостаткам являются то, что каждый запущенный
процесс расходует оперативную память (Рис. 2). [4]
Во второй модели (MPM) также известной как worker, используется более
эффективная схема процесс- поток, когда для каждого запроса создается
отдельный программный поток. С точки зрения использования памяти эта
модель более эффективна, но она требует, чтобы все приложения были
многопоточными. Хотя нет гарантии что множество различных библиотек,
используемых с интерпретатором этого языка, также безопасно в отношении
потоков (Рис. 3). [5]Вне зависимости от используемой модели, все созданные запросы
обрабатываются
в параллельном режиме. Если к веб-приложению в любой момент времени
обращаются сто человек, то все сто запросов обрабатываются одновременно.
В Node всё происходит немного по-другому. При запуске приложения
создается один единственный поток. Приложение выполняется и ожидает когда
будет совершен запрос на ввод или вывод данных. Когда приложение получает
запрос то ни один другой запрос не обрабатывается пока не будет обработан
текущий запрос. [6]
Всё это может показаться неэффективным, но Node работает а
асинхронном режиме, функцию обратного вызова и цикл обработки событий.
Обработчик событий в циклическом режиме опрашивает опрашивает
конкретные события и в нужный момент вызывает обработчика событий. В Node
обработчиком событий является функция обратного вызова.
В отличие от других однопоточных приложений, когда к Nodeприложению делается запрос, оно должно, в свою очередь, запросить какие-то
ресурсы (например, обратиться к базе данных или получить доступ к файлу). В этом случае Node инициирует запрос, но не ожидает ответа на этот запрос.
Вместо этого запросу назначается некая функция обратного вызова. Когда
запрошенное будет готово (или завершено), генерируется событие,
активизирующее соответствующую функцию обратного вызова, призванную
что-то сделать либо с результатом запрошенного действия, либо с
запрошенными ресурсами. [6]
Если пять человек обращаются к Node-приложению в одно и то же время
и приложению нужно обратиться к ресурсам из файла, для каждого запроса Node
назначает свою функцию обратного вызова событию ответа. Когда для каждого
из них ресурс становится доступен, вызывается нужная функция обратного
вызова, и запрос удовлетворяется. В промежутке Node-приложение может
обрабатывать другие запросы либо для того же приложения, либо для какогонибудь другого.
Хотя приложение не обрабатывает запросы в параллельном режиме, в
зависимости от своей загруженности и конструкции можно даже не заметить
задержки в ответе. А что лучше всего, приложение очень экономно относится к
памяти и к другим ограниченным ресурсам. [7]
Несложно заметить эффективность работы сервера на Node хотя в нем и не
используется многопоточное вычисление запросов. Асинхронное вычисление
обеспечивающее достаточную производительность и поддержка современных
технологических решений делают Node.JS самой популярной средой для запуска
JavaScript-приложений.