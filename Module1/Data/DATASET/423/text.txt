Особенность современной веб-разработки – бурное расширение сфер
применения веб-приложений и рост их сложности, многообразие используемых
технологий и инструментов при отсутствии строгих стандартов для них. Это
приводит к тому, что в настоящее время отсутствует единая универсальная
среда разработки (Integrated Development Environment, IDE), в которых были бы
интегрированы все нужные возможности для решения типичных задач вебразработчика, возникающих при создании и развертывании веб-приложений,
например:
– запуск препроцессоров CSS и HTML. Во время разработки разметка в
файле может задаваться с помощью шаблонизатора Pug, а стили в проекте
могут описываться с помощью усовершенствованных языков Sass, Less, Stylus.
Затем код на этих языках должен трансформироваться в обычный HTML и CSS,
которые понимает браузер;
– склейка файлов. Стили CSS и сценарии JavaScript в проекте принято
держать в разных файлах, соответствующих компонентам, к которым относятся
эти стили и сценарии. Однако в итоговом варианте проекта, который будет
выставляться на сервер, должен быть один объединенный файл со всеми
стилями и один файл со всеми сценариями;
– минификация исходных файлов. Итоговые файлы, размещаемые на
сервере, должны иметь минимально возможный размер. Из них нужно удалить
все лишние пробелы и комментарии, переименовать переменные, чтобы их
имена содержали одну или две буквы; 
– оптимизация файлов ресурсов. Для экономии трафика и увеличения
скорости работы веб-сервиса следует уменьшать объем ресурсов, высылаемых
клиенту с сервера. К задачам оптимизации относятся сжатие изображений,
минификация SVG-файлов, создание спрайтов для изображений;
– валидация JavaScript-кода и его автоматическое тестирование;
– автоматическая сборка целевых файлов для выставления на сервер при
изменении файлов проекта;
– запуск отладочного сервера, обеспечивающего автоматическую загрузку
и перезагрузку страниц разрабатываемого проекта в браузере при изменении в
файлах проекта.
Так как единого универсального инструмента для решения таких рутинных
вспомогательных задач нет, то веб-разработчикам приходится использовать
разнообразные сторонние инструменты и утилиты. В принципе, подобные
служебные программы могут быть написаны на любых языках
программирования, но сейчас общепринятой практикой является
использование утилит и библиотек, представляющих собой сценарии на языке
JavaScript, но которые выполняются не в браузере, а под управлением
платформы Node.js непосредственно в локальной операционной системе
разработчика [1]. Подобные сценарии, которые принято называть пакетами,
хранятся в облачном репозитории на официальном сайте
https://www.npmjs.com/. Управлять пакетами можно с помощью стандартного
пакетного менеджера npm (node package manager), входящего в состав Node.js.
В репозитории npm-пакетов можно подобрать готовые утилиты
практически для любых типичных задач веб-разработчика, однако потребуется
потратить время и усилия на их поиск, анализ пригодности, установку,
изучение и настройку под конкретную задачу или проект. Если к работе над
проектом присоединяется новый человек, то перед началом разработки ему
тоже придется воспроизвести все эти вспомогательные операции. Таким
образом, много времени веб-разработчика тратится непроизводительно – не на
реализацию функционала приложения, а на настройку окружения для удобной
и надежной разработки конкретного проекта с одной стороны и на подготовку и
оптимизацию готового приложения для его эффективной работы на
промышленных веб-серверах с другой.
Для более эффективного использования возможностей npm-пакетов работу
с ними можно автоматизировать с помощью npm-сценариев [1] или
специальных менеджеров задач, позволяющих в одном отдельном JavaScriptсценарии описать все процессы и этапы сборки веб-приложения в виде
отдельных задач, а также управлять этими задачами.
Одним из самых популярных современных менеджеров задач является
Gulp (официальная веб-страница проекта https://gulpjs.com/). Каждая отдельная
задача (например, транспиляция файла стилей в формате Sass в обычный CSS
или минификация сценария JavaScript и т. д.) решается с помощью одного или
нескольких плагинов Gulp, представляющих собой npm-пакет в специальном
формате. Задача самого Gulp – связать плагины между собой (для этого используется механизм потоков Node.js) и запускать задачи с помощью
отдельных команд или автоматически при изменении содержимого файлов, за
которыми Gulp следит.
Архитектура Gulp соответствует принципам модульной стратегии
проектирования и программирования, когда программа строится из
стандартных компонент, соединенных друг с другом через унифицированный
интерфейс [2], и принципам программирования, основанного на
инструментальных средствах (softwaretools), которые также лежат в основе
оболочек и сценариев командной строки в Unix-подобных операционных
системах [3]:
– для решения некоторой задачи разрабатываются программы небольшого
размера, каждая из которых выполняет строго одну функцию решаемой задачи;
– поставленная задача решается путем взаимодействия небольших
программ за счет последовательной обработки передаваемых данных каждой из
них;
– при разработке этих небольших программ ориентируются на их
максимально независимое использование, чтобы их можно было применять для
решения каких-либо других задач. Таким образом, постепенно создаются
инструментальные средства для дальнейшего универсального применения;
– большинство инструментальных средств разрабатываются в виде
программ, представляющих из себя фильтры, которые читают поток данных из
стандартного ввода и записывают обработанные данные в стандартный вывод;
– инструментальные средства соединяются друг с другом в сценариях
посредством перенаправления ввода/вывода и создания программных
конвейеров (направление выходного потока одной программы на вход другой).
В Gulp каждая задача (task) представляет собой конвейер, по которому
данные передаются от одного плагина к другому. В отличие от конвейеров в
командных файлах операционной системы, где основным форматом данных
выступают текстовые файлы, конвейеры в менеджере задач Gulp работают с
файловыми Vinyl-объектами. Эти объекты фактически представляют собой
файлы, имеющие два свойства: path (полный путь до файла) и contents (буфер
или поток с содержимым файла). Любой плагин для Gulp всегда принимает
набор Vinyl-объектов, обрабатывает их и отдает набор измененных Vinylобъектов дальше.
Под большинство стандартных задач веб-разработчика можно найти
готовые плагины на сайте https://gulpjs.com/plugins или https://www.npmjs.com/.
При необходимости для специфических задач можно создавать плагины для
Gulp самостоятельно. Рассмотрим процесс создания таких плагинов на примере
задачи удаления отладочной информации из сценариев JavaScript,
использующихся в проекте (команды console, window.console, alert, debugger и
т. д.).
Для разработки плагина gulp-delete-js-debug, решающего данную задачу,
понадобились четыре npm-пакета: 
– Vinyl – библиотека для генерации vinyl-объектов, соответствующих
обрабатываемым сценариям JavaScript;
– Through2 – обертка над потоками для более простой и удобной работы с
ними. Разработчики Gulp рекомендуют для работы с потоками использовать
именно этот плагин;
– Plugin-error – для вывода ошибок плагина;
– Jest – библиотека для модульного тестирования создаваемого JavaScriptкода.
В плагине gulp-delete-js-debug экспортируется одна функция main(), в
которую передается список операторов для отладки, которые должны быть
удалены из JavaScript-файлов.
В main() создается поток, по которому проходят обрабатываемые Vinylобъекты в виде файлов, содержащих данные в форме буфера. Содержимое
каждого файла преобразуется с помощью одного регулярного выражения,
сформированного для удаления всех требуемых отладочных операторов. После
этого файл передается далее по конвейеру для обработки следующим плагином
Gulp.
Исходный код нашего плагина размещен в репозитории GitHub
(https://github.com/ex2life/gulp-delete-js-debug). Использовать его в своих
проектах можно совместно с другими плагинами Gulp, установив в качестве
зависимости для разработки (devDependency) с помощью стандартных
механизмов npm (npm install --save-dev gulp-delete-js-debug). Операция для
копирования JavaScript-файлов из исходного каталога в целевой с
одновременным удаление ненужной отладочной информации оформляется в
виде задачи Gulp и добавляется в файл gulpfile.js. отладочной информации
оформляется в виде задачи Gulp и добавляется в файл gulpfile.js. При этом из
сценариев JavaScript будут удалены все строки, в которых встречаются
ключевые слова, перечисленные в параметре itemsForDelete:
const gulp = require('gulp');
const gulpDeleteJsDebug = require("gulp-delete-js-debug");
gulp.task('toProd', done => {
gulp.src("src/**/*.js")
.pipe(
gulpDeleteJsDebug({
 itemsForDelete: ['console, debugger']
})
)
.pipe(gulp.dest("dest/"));
done();
});
Самостоятельно разработанные плагины для Gulp можно размещать в
централизованном репозитории npm на сайте https://www.npmjs.com/, делая их
общедоступными, либо просто использовать в своих личных проектах. Также
плагины вместе с описаниями и автоматизированными тестами для проверки
правильности их функционирования можно хранить на сервисах GitHub или Bitbucket – в этом случае другие пользователи смогут оставлять сообщения об
ошибках в плагинах и предлагать изменения для их улучшения. 