В настоящее время широкое распространение получили программы на
нетипизированных скриптовых языках, одним из повсеместно используемых языков
является JavaScript. С ростом производительности персональных компьютеров и
встраиваемых систем использование языка JavaScript стало возможно не только для
выполнения небольших скриптов на веб-страницах, но и целых веб-приложений [1].
Пользователи Интернета предъявляют высокие требования, как к оформлению, так и
к функциональности сайтов. Для создания интерактивных сайтов разработчики используют
библиотеки JavaScript, такие как JQuery, чтобы автоматизировать решение наиболее типичных задач и упростить решение более сложных [2].
Сейчас трудно найти веб-приложение, которое не содержит в себе сторонние
библиотеки [3]. Многие веб-приложения содержат по крайней мере одну библиотеку
JavaScript с известной уязвимостью. Однако, устаревшие библиотеки могут создавать
угрозы, позволяющие скомпрометировать сайт, что повлечет за собой финансовые убытки,
снижение доверия клиентов, а также потерю репутации [4-9]. В связи с этим возникает
необходимость безопасного использования библиотек JavaScript в веб-приложениях.
Библиотеки JavaScript представляют собой сборник классов и/или функций на языке
JavaScript. Сторонние библиотеки называются внешними зависимостями. В подавляющем
большинстве библиотеки используют семантическое версионирование. Номер версии
представляется как major.minor.patch, например, 1.0.1. Основной компонент версии (major)
увеличивается, когда в API библиотеки нарушается обратная совместимость,
второстепенный компонент (minor) увеличивается, когда в API добавляются новые
функции без нарушения обратной совместимости, а номер версии
(patch) увеличивается, если были исправлены ошибки также без нарушения обратной
совместимости.
Сторонние модули, такие как реклама, социальные сети или другие виджеты, которые
часто встроены в веб-страницы, обычно реализованы с помощью JavaScript [9]. Кроме того,
эти скрипты также могут загружать библиотеки без ведома сайта, а уже загруженные
библиотеки могут получить полные привилегии на самом сайте. Таким образом, даже если
веб-разработчик обновляет собственные зависимости библиотек, устаревшие версии могут
по-прежнему включаться в плохо поддерживаемый контент сторонних разработчиков.
Кроме того, некоторые библиотеки JavaScript содержат свои копии внешних библиотек, от
которых они зависят.
Частой уязвимостью в библиотеках JavaScript является Cross-Site Scripting (XSS),
которая позволяет злоумышленнику внедрять вредоносный JavaScript код в веб-сайт. В
частности, если библиотека JavaScript принимает входные данные от пользователя и не
проверяет их, то возникает уязвимость XSS, и все веб-сайты, использующие эту
библиотеку, становятся уязвимыми.
Другие уязвимости в библиотеках JavaScript включают случаи, когда библиотеки
могут передавать входные данные в eval() или document.write(), что может привести к
выполнению вредоносного скрипта или изменению разметки веб-страницы.
Злоумышленники используют эти возможности, чтобы украсть данные из сессий
пользователей, инициировать транзакции от имени пользователя или разместить
поддельный контент на веб-сайте.
Современные веб-приложения часто используют популярные сторонние библиотеки
JavaScript и, следовательно, рискуют унаследовать уязвимости, содержащиеся в этих
библиотеках.
Подводя итоги данной работы, можно сделать следующие выводы:
1. Библиотеки часто не подключаются непосредственно на самой веб-странице, но при
этом они могут быть подключены другим контентом, таким как рекламный код. Такие
подключения библиотек имеют более высокую степень уязвимостей, чем подключение
библиотек напрямую.
2. Отсутствие обратно совместимых версий может повлиять на возникновение
уязвимостей.
3. Если всегда указывать символ «*» в версиях библиотек, то обновления таких версий
могут сломать веб-приложения из-за обновления компонента major.
4. Указывая фиксированные версии, обновления библиотек придется производить
вручную, причем необходимо будет отслеживать выпуск новой версии.
5. Если указывать версии библиотек с префиксом, то они будут обновляться только
до версии, в которой изменился компонент patch.
Предложенный анализатор защищенности библиотек позволит обнаружить уязвимые
библиотеки в веб-приложениях, избегая приведенные трудности.
 