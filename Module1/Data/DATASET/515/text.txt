Программирование – это всегда создание чего-то нового и прогрессивного. И
каждый уважающий себя разработчик должен быть в курсе новых технологий, ведь они
могут помочь облегчить процесс создания того или иного продукта. Next, Nuxt и Nest - это
три фреймворка, написанные на JavaScript, которые могут сбить даже опытных
программистов одними только похожими названиями. Эти три фреймворка являются
отражают рендеринг на стороне сервера и тесно связаны с React, Vue и Angular (тремя
наиболее широко используемыми интерфейсными фреймворками) соответственно. В
данной статье мы рассмотрим каждый из них по-отдельности. Рассмотрим их
преимущества и недостатки перед друг другом и обоснуем выбор одного из них при
создании приложения. 
И начнем мы обзор с фреймворка под названием Nuxt.js
Цитата с официального сайта фреймворка:
“25 октября 2016 команда zeit.co анонсировала Next.js, фреймворк для приложений
на React с серверным рендерингом. Через несколько часов после этого объявления родился
Nuxt.js — воплощение аналогичной идеи для Vue.js.”
Nuxt.js - это высокоуровневый фреймворк, основанный на Vue. Это бесплатная
платформа для приложений с открытым исходным кодом, основанная на Vue.js, а также на
Node.js, Webpack и Babel.js . Nust входит в состав универсального приложения, которое
использует «мета-фреймворк», а также разрабатывает одностраничные приложения Vue.
Основная цель создания приложений с Nuxt.js - сделать его более гибким при создании
любого проекта, потому что Nuxt помогает разработчикам быстро создавать сложные,
быстрые и универсальные веб-приложения.
Рассмотрим основные показатели, которые помогут сделать выбор разработчика в
сторону этого фреймворка:
• Его основная область применения - рендеринг пользовательского
интерфейса, при этом он абстрагируется от связи клиент / сервер.
• Статический рендеринг приложений Vue и получение всех преимуществ
универсального приложения без сервера
• Автоматическое разделение кода (предварительно обработанные страницы)
• Настройка через командную строку с помощью стартового шаблона
• Отличная структура проекта по умолчанию
• Возможность создания своих компонентов и легкая настройка переходов
между ними
• Компиляция ES6 / ES7 без дополнительных плагинов и сторонних
фреймворков
Также данный фреймворк имеет и ряд недостатков, которые мы обязаны
рассмотреть:
• Небольшое сообщество, которое предполагает меньше ресурсов и
потенциально менее обширную документацию.
• Отсутствие некоторых распространенных надежных плагинов /
компонентов. (Карты Google, календарь, векторные карты). Некоторые компоненты для
этого существуют, но, как правило, они не очень хорошо поддерживаются.
• Нужно углубляться в более сложные компоненты / плагины. Если вы хотите
разработать что-то очень гибкое, для этого вам нужно перейти к рендерингу functions /
jsx. (например, визуализировать содержимое слота в другом месте / компоненте).
• Высокий трафик может вызвать нагрузку на ваш сервер
• Вы можете запрашивать и управлять DOM только в определенных свойствах
Рассматривая данный фреймворк более отстраненно, главным его минусом является
предпоследний пункт. Если изначально предполагается, что на данном фреймворке будет
создан одностраничный сайт или простое приложение, то его мощностей и алгоритмов
обработки информации безусловно хватит, но возможна ситуация, когда на сайт может
зайти одновременно не одна тысяча пользователей. И тогда данный фреймворк может
показать себя не с лучшей стороны.
Перейдем ко второму фреймворку – Next.js
Если сравнивать все три фреймворка, то самый популярный фреймворк, который вы
получите, - это Next.js из двух других. Давайте посмотрим, что же такого интересного в
этом фреймворке, что он популярен и любим разработчиками.
Next.js - это фреймворк Javascript, который использует React для создания
рендеринга на стороне сервера и статических веб-приложений. По мнению каждого
разработчика, это лучший инструмент для создания веб-сайтов, потому что он обладает
замечательными функциями и преимуществами, которые делают его первым вариантом для
создания веб-приложений.
Рассмотрим основные преимущества данного фреймворка:
• Каждый компонент по умолчанию отрисовывается на сервере.
• Автоматическое разделение кода для более быстрой загрузки страницы
• Не загружается ненужный код
• Простая маршрутизация на стороне клиента (на основе страниц)
• Среда разработки на основе Webpack, поддерживающая быструю замену
модулей (HMR)
• Простая реализация получения данных с сервера
Фреймворк, как и все, имеет свои недостатки, которые представлены ниже:
• Next.js не является серверной частью; если вам необходима внутренняя
логика, такая как база данных или сервер учетных записей, вы должны сохранить это в
отдельном серверном приложении.
• Next - это мощный инструмент, но если вы создаете простое приложение, его
может оказаться излишним.
• Все данные должны быть загружены как с клиента, так и с сервера.
• Перенос серверного приложения на Next.js - это не быстрый процесс, и в
зависимости от проекта может потребоваться слишком много работы.
Данный фреймворк является по-своему мощным и в чем-то в разы привлекательнее
нежели два других фреймворка. Однако в отличии от предыдущего, для простого
приложения он может иметь излишнюю логика, которая, опять же, может сказаться на
времени загрузки сайта и приложения.
И последним фреймворком является Nest.js.
Прогрессивная платформа Node.js для создания эффективных, масштабируемых
серверных приложений корпоративного уровня на основе TypeScript и JavaScript (ES6, ES7,
ES8), Nest в значительной степени вдохновлена Angular.
Nest - это платформа для создания эффективных масштабируемых серверных
приложений Node.js. Он использует современный JavaScript, построен на TypeScript
(сохраняет совместимость с чистым JavaScript) и сочетает в себе элементы ООП (объектноориентированное программирование), FP (функциональное программирование) и FRP
(функциональное реактивное программирование).
Nest использует Express, но также обеспечивает совместимость с широким спектром
других библиотек, таких как, например, Fastify, что позволяет легко использовать
множество доступных сторонних плагинов.
Рассмотрим преимущества фреймворка, часть из которых делают его лучше чем
всеми известный Angular:
• В веб-фреймворке на основе TypeScript возможно строгое определение типа.
• Фреймворк очень ориентирован на аннотации, и все, от конечных точек до
документации Swagger, создается из них. Конечные точки чистые и простые, а аннотации
упрощают разработку.
• Структура папок в Nest.js в значительной степени основана на Angular. Это
позволяет минимизировать время простоя при первом проектировании службы Nest.
• Поскольку Nest.js представляет собой модульную структуру, легко
экспортировать универсальные модули и повторно использовать код в нескольких
проектах.
• Компоненты получают свои собственные папки, причем модуль приложения
и основной файл находятся в корне. Эта простая структура позволяет уделять больше
внимания дизайну конечных точек и их потребителей, а не структуре приложения.
Недостаток у него один и очень большой, данный фреймворк очень молодой. Он не
имеет обширной документации, а значит там не освещаются проблемы и “узкие” места,
которые могут возникнуть при работе с ним. В отличии от Angular, Nest не имеет
поддержки крупной мировой корпорации, коей для Angular является Google.
Целью данной статьи было обзор каждого из фреймворков, чтобы понять их
преимущества друг над другом. Как было сказано в начале они являются последователями
одних из трех самых широко используемых фреймворков на данный момент - React, Vue и
Angular. И зачастую разработчики будут смотреть именно на это, потому что они будут
исходить из того на чем уже писали и работали, и, с чем они ближе всего знакомы с тем им
и больше всего удобнее будет работать.