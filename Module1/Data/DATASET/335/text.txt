В последние годы очень сильно выросла сложность разработки веб-интерфейсов. Если
раньше попадались вакансии типа веб-мастер либо Fullstack-программист, то сейчас все
чаще компаниям требуются frontend-специалисты, которые отвечают только за разработку
интерфейсов.
На сегодняшний день любой современный веб-интерфейс – это совокупность
отдельных файлов с расширениями: .html, .js, .css. Но простое написание кода без
определенной архитектуры приводит к проблемам поддержки приложения и, следовательно,
к ошибкам и потери времени. 
С ростом сложности клиентских частей веб-приложений появилось множество
различных JavaScript-фреймворков. Они существенно упростили жизнь программистов и
позволили быстро создавать веб-интерфейсы с логичной и понятной структурой.
Пару лет назад получила распространение модель связи данных под названием two way
data binding (двусторонняя связь данных) и многие JavaScript-фреймворки стали применять
ее в своей архитектуре. Ее суть заключается в том, чтобы разделить интерфейс компонента
на модель и представление. Эти две части всегда находятся в синхронизированном
состоянии и изменение одной части приводит к изменению в другой. Но с ростом
клиентской части веб-приложения это приводит к зацикливанию данных.
Еще одним слабым местом современных фреймворков является работа JavaScript
сценария c DOM (Document Object Model). Очень частое обновление DOM приводит к
тормозам в браузере.
Для решения этих проблем командой разработчиков Facebook был разработан
фрейморк React. В отличие от других распространенных фреймворков таких, как AngularJS и
BackboneJS, React отвечает только за представление, т.е. за View в паттерне MVC. Это дает
разработчику право выбирать архитектуру и возможность использования React с другими
фреймворками.
React предлагает разделение интерфейса на компоненты [1]. Компоненты могут
вкладываться друг в друга, в итоге получается дерево компонентов. Каждый компонент
имеет собственное состояние.
React построен на идее реактивного программирования: как только состояние одного из
компонентов изменяется: этот компонент перерисовывается, а также перерисовываются все
зависящие от этого состояния компоненты [2]. Важно понимать, что данные передаются
сверху вниз по дереву. В данном случае используется one way data binding
(однонаправленная связь данных) (рисунок, б). Данный подход позволяет организовать
очевидные и простые связи между компонентами.
Еще одной особенностью React является Virtual DOM. Это реализация DOM на
JavaScript. Каждый компонент наполнен некоторым количеством элементов. Каждый
элемент – это объект JavaScript, отражающий html-элемент [3]. Благодаря надстройке JSX все
React-компоненты легко читаемы, так как очень похожи на html. React следит за
изменениями Virtual DOM с помощью diff-алгоритма и автоматически изменяет DOM в
браузере. Благодаря этому реальный html меняется за наименьшее количество операций, что
позволяет избавить веб-приложения от тормозов, связанных с объектной моделью.
Ниже перечислены преимущества использования фреймворка React в вебприложениях:
‒ простой и понятный поток данных;
‒ быстрая работа с DOM; 
‒ разделение интерфейсов на компоненты, которые впоследствии можно использовать в
других проектах;
‒ легко читаемые компоненты благодаря надстройке JSX;
‒ возможность использования в различных архитектурах и с другими фреймворками.
В итоге разработчик получает уровень представления с понятными компонентами, в
которых сможет разобраться дизайнер или верстальщик без особых знаний языка JavaScript.