Платформа ASP.NET Core от корпорации Microsoft, которая появилась
сравнительно недавно [3], продолжает набирать свою популярность, однако
программисты все еще с недоверием относятся к новой и непроверенной
технологии, предпочитая предшествующий ей фреймворк ASP.NET MVC.
Проанализируем преимущества и недостатки новой технологии в сравнении со
старой.
В ASP.NET MVC на начальном этапе предлагается выбрать шаблон
проектирования, от которого будет сильно зависеть архитектура приложения,
поскольку шаблоны требуют различных зависимостей. В ASP.NET Core же нет
различий между построением проекта на фреймворках MVC или API,
программист может использовать одни и те же компоненты в любых целях, что
существенно ускоряет и упрощает работу над программным обеспечением.В ASP.NET MVC обязательно использование файлов Global.asax и
web.config. Также есть множество других директорий, которые заимствованы
еще от технологии WebForms. Структура проекта на ASP.NET Core более
лаконична и не требует большинства файлов, которые программисту могут и не
потребоваться. Приложение на ASP.NET Core аналогично обычному
консольному приложению по своей структуре: имеется единая точка входа –
файл Program со статическим методом Main, что позволяет отлаживать
программу в едином стиле.
Также больше не требуется использовать файлы конфигурации, формат
которых диктует ASP.NET MVC. В ASP.NET Core можно гибко работать с
конфигурацией приложения в любом формате (JSON, XML, CSV) и даже
определять свои форматы обработки данных.
Также добавилась директория wwwroot, которая представляет собой
корень приложения при работе веб-сервера, структуру и название которой
определяет сам программист. Больше не требуется писать специальные правила
для игнорирования конфиденциальных файлов, которые требуются при
разработке. Дополнительно облегчается работа с клиентским кодом:
значительно упрощаются задачи минимизации и объединения статических
файлов, например, с помощью технологий gulp или webpack.Приложения на ASP.NET MVC требуют для своего запуска среду
исполнения .NET, что позволяет запускать такие приложения на Unixподобных операционных системах только с использованием специальных
сторонних средств, например, Mono. С технологией ASP.NET Core это не
обязательно, потому что технология является полностью кроссплатформенной
и не требует зависимостей от ядра систем на базе Windows [2, с. 133].
Внедрение зависимостей или Dependency Injection (DI) – это подход в
программировании, позволяющий гибко управлять реализациями
определенных интерфейсов во всем приложении [4]. Такой механизм позволяет
писать слабо связанный код, очень удобный для модульного и интеграционного
тестирования. Данный подход стал практически общепринятым при написании
большинства программных приложений независимо от применяемых
технологий. К сожалению, в ASP.NET MVC такой механизм доступен только с
использованием сторонних технологий, таких как Unity, Windsor Castle,
StructureMap и др. От проекта к проекту использование подобных пакетов
отличается, что заставляет программистов изучать дополнительную литературу
для сопровождения кода и исправления дефектов. В ASP.NET Core
используется гибкая встроенная поддержка DI, не требующая подключения
дополнительных программных библиотек. Однако по желанию программист
может использовать привычные ему средства DI или даже реализовать своиВ процессе длительной работы над программным обеспечением, ошибки
и уязвимости сторонних зависимостей устраняются, старые версии перестают
поддерживаться, поэтому некоторые компоненты приложения следует
постоянно обновлять для обеспечения безопасности [5].
Для приложений, написанных на ASP.NET MVC, общие зависимости
необходимо подключать в каждый проект решения вследствие особенностей
платформы. В будущем это может вызвать определенные проблемы. Например,
если корневая сборка содержит зависимость, то все остальные проекты в
данном решении должны подключить и скопировать эту зависимость локально.
Во-первых, это линейно увеличивает место, занимаемое проектом на диске. Вовторых, если иные проекты в решении содержат другую версию той же
зависимости, могут возникнуть проблемы с совместимостью по всему
приложению.
В ASP.NET Core зависимость, используемая в нижележащей сборке,
будет пробрасываться до вышележащих сборок вместе со ссылкой на корневую
сборку. Это позволяет использовать одну и ту же версию программной
библиотеки во всех проектах приложения.
Проекты решения, как правило, содержат одни и те же корневые
зависимости для разработки, поэтому программирование на платформе
ASP.NET Core зависит от целого набора таких зависимостей, внутри которого
поддерживается строгое соблюдение версионности всех пакетов. Это
обеспечивает их совместимость, потому что невозможно изменить отдельную
зависимость без обновления всего пакета. Дополнительно такие наборы
пакетов позволяют сэкономить место на диске, поскольку они расположены в
локальной папке пользователя компьютера и не копируются в папки проектов
приложения, а представляются ссылкой.