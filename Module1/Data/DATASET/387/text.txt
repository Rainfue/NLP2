По мнению исследователей Н.П. Варновского и др. [1], обфускация впервые неявно
упоминается ещё в 1976 году в работе Диффи и Хэллмана [2]. Они предложили вставлять в
программу шифрования секретный ключ, и затем инициализированная секретным ключом
программа шифрования запутывается так, чтобы извлечение из неё секретного ключа было
очень трудной задачей. В явном виде понятие обфускации было введено в 1997 году в
работе Коллберга, Томборсона и Лоу [3]. По определению К.Ю. Никольской и А.Д.
Хлестова [4], обфускация программы — это приведение исходного текста программы к
виду, сохраняющему его функциональность, но затрудняющему анализ при обратной
разработке. Обфусцированная программа — программа, полученная из другой путём
применения обфускации [5]. Исходная программа называется необфусцированной.
Проблема различения обфусцированных и необфусцированных программ неразрывно
связана с проблемой классификации исходных текстов программ. Для формализации
задачи воспользуемся определениями, введёнными Сильвео Сезаром и Янгом Ксьянгом в
первой главе книги «Классификация и схожесть программ» [6].
Признак ???? программы ???? называется стойким, если ???? остаётся неизменным при всех
возможных способах исполнения программы ????. Программа ???? называется обфусцированной
копией программы ????, если ???? является результатом преобразований, сохраняющих
семантику (смысл) алгоритмов и структур данных. Программы ???? и ???? похожие, если они
построены на базе одной и той же программы.
Пусть ???? — множество исходных текстов программ, ????1, … , ???????? — функции, выделяющие
признаки из программы, т.е. ????????: ???? > ????????, где ???????? — ????-е множество признаков. Пусть
{????1, … , ????????} ? ???? — обучающая выборка, {0,1} = ???? — метки классов (1 ставится в
соответствие обфусцированной программе, 0 — необфусцированной). Необходимо найти
при помощи обучающей выборки {????1, … , ????????} отображение ????:????1 ? … ? ???????? > {0, 1}, с
наименьшей ошибкой классифицирующее элементы из всего множества ????.
Для создания тренировочной и тестовой выборок использовался репозиторий
программ github.com. Были выгружены 100 самых популярных проектов на языке Javascript
(49612 файлов с расширением «.js», исключая файлы c расширением «.min.js»).
Чтобы упростить создание образцов обфусцированного кода, из скриптов были
выделены функции при помощи библиотеки Esprima. Библиотека позволяет строить для
любой Javascript-программы, соответствующей стандарту ECMAScript 2016, абстрактные
синтаксические деревья (АСД).
Для всех полученных скриптов с расширением «.js» (49612 штук) построены АСД,
для каждого элемента класса «FunctionDeclaration» код сохранялся в отдельный файл (всего
126276 файлов).
Для генерирования образцов обфусцированного кода требовались специальные
программы, реализующие обфускацию. Источником программ стал репозиторий
github.com. Были использованы 6 проектов: «javascript-obfuscator/javascript-obfuscator»,
«zswang/jfogs», «anseki/gnirts», «mishoo/UglifyJS2», «alexhorn/defendjs», «wearefractal/nodeobf».
Чтобы образцы программ могли быть поданы на вход искусственной нейронной сети,
их нужно заранее специальным образом преобразовать. Использовалось общее
представление на основе путей, предложенное Алоном и др. в 2018 году [7] для
исследования свойств программ методами машинного обучения. Для выделения признаков
из программ на Javascript была применена библиотека PigeonJS. Она позволяет получить
список путей заданной длины на АСД. Путь из ???? вершин имеет формат:
(вершина1? вершина2 … вершина?????1? вершина????) (1)
Вершины (1) отделяются знаками ? и ? в зависимости от того, происходит подъём
или спуск по дереву при проходе от первой до ????-й вершины.
Идея, лежащая в основе механизма внимания, может быть представлена как выбор
«наиболее интересной» части получившегося набора [8]. Механизмы внимания
используется для решения разных прикладных задач при помощи искусственных
нейронных сетей, например, анализа тональности текстов (Тащилин и др. [9]) или
предсказания названий функций в программном коде (Алон и др. [10]). Полученная
итоговая модель построена на базе сети Алона и др. [11], чьё решение было адаптировано
для классификации скриптов по признаку обфусцированности.
Контекст ???????? = (????????, ????, ????????) — это кортеж из трёх элементов: начальной вершины, пути и
конечной вершины. Начальные и конечные вершины ????????, ???????? ? ????, где ???? — множество
начальных и конечных вершин, путь ???? ? ????, где ???? — множество всех путей. Каждый
скрипт ???????? описывается множеством контекстов (2):
???????? = { (????????, ????, ????????) | ????????, ???????? ? ????, ???? ? ???? } (2)
Каждому элементу ???? ? ???? сопоставлено векторное представление
???????? ? ???????????????????? ? ?128. Аналогично, каждому элементу из ???? ? ???? сопоставлено векторное
представление ???????? ? ???????????????????? ? ?128. Векторное представление одного контекста ???? имеет
размерность 3 ? 128 = 384:
???????????? = ?????????????, ????????, ????????????? ? ???????????????????? ? ???????????????????? ? ???????????????????? ? ?128?3 (3)
Каждый скрипт (2) описывается набором векторных контекстов из (3):
???????? = ??????????????, ????????, ????????????? | ????????????, ???????????? ? ????????????????????, ???????? ? ????????????????????? (4)
Была задана верхняя граница для числа контекстов (4) на один скрипт — 200
контекстов. Если мощность множества контекстов, описывающих скрипт, меньше 200, то
к нему добавляются нулевые контексты: ????????0 = (0128, 0128, 0128).
На рисунке 1 дана схема использованной искусственной нейронной сети. Первым
идёт полносвязный слой, для которого применён метод регуляризации дропаут, т.е. на
каждом шаге обучения случайно выбранные 75% связей исключались.
Обучение искусственной нейронной сети проводилось на компьютере с 8-ядерным
процессором Intel Core i7-7700 (3.6 ГГц), 16 Гб оперативной памяти, видеокартой NVIDIA
GeForce GTX 1080.
Тренировочная выборка была сформирована следующим образом: 115504 наборов
контекстов, описывающих необфусцированные функции, и 117990 наборов, описывающих
обфусцированные функции, из них 36000 случайно выбрано из обфусцированных
«javascript-obfuscator», 36000 случайно выбрано из обфусцированных «jfogs», 36000
случайно выбрано из обфусцированных «UglifyJS2», 9990 из обфусцированных «defendjs».
Всего 233494 наборов. По тренировочной выборке было получено множество самых
популярных наименований начальных и конечных вершин ???? (|????| = 776830), и множество
наиболее часто встречающихся путей ???? (|????| = 1008102) таким образом, чтобы для каждого
скрипта ???? хотя бы один контекст ???? состоял из двух элементов из ???? и одного из ????.
Тестовая выборка состояла из 8444 наборов контекстов, описывающих
обфусцированные функции (обфусцированы «gnirts» или «node-obf»). Модель обучалась на
9 эпохах. Численные оценки качества: точность — 84.9 %, полнота — 85.1 %, ????1 — 85.0 %.
Представленная модель имеет потенциал для улучшения: кодовый вектор ???? (7) может быть
подан на вход дополнительному классификатору, например, алгоритму на основе метода
опорных векторов. Аналогичный подход Ндичу и др. использовали для решения задачи
детектирования вредоносных программ на Javascript [11]. Также улучшить качество модели
может добавление второго полносвязного слоя и замена функции активации.
В работе исследовалось применение искусственной нейронной сети с механизмом
внимания для решения задачи классификации по признаку обфусцированности программ
на языке Javascript, приведённых к общему представлению на основе путей [7]. Был
получен набор образцов обфусцированного и необфусцированного кода, модель
искусственной нейронной сети с механизмом внимания [10] была адаптирована для
решения задачи классификации программ по признаку обфусцированности.
Характеристики полученной модели показывают, что рассмотренный метод имеет
потенциал для применения в программных продуктах, использующих классификацию
программ по признаку обфусцированности (для обнаружения и классификации
вредоносного кода, создания цифровых отпечатков и др.) при условии доработки с учётом
изложенных предложений.