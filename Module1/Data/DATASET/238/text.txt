В связи со стремительным развитием веб-разработки, а также программной платформы
Node.js как средства запуска JavaScript кода на стороне сервера, данной
проблеме посвящено достаточное количество исследований и публикаций.
В частности, в статье А. А. Чертихина и Т. А. Субботиной [1] рассматриваются проблемы использования стандартных способов и методов управления в стремительно развивающейся области веб-разработки и модернизации существующих методов управления с широким использованием
веб-приложений. А в работе О. В. Матысик и Н. Л. Саливончик [2] представляется процесс разработки клиент-серверного приложения для поиска
оптимального маршрута передвижения на общественном транспорте.
Данное приложение разработано средствами платформы Node.js, базы
данных MySQL, библиотеки JQuery и технологии AJAX. В научной статье
Н. И. Гурина и Т. А. Крыловой [3] рассматривается анализ и апробация
преимуществ платформы Node.js, базирующейся на событийно-ориентированной модели взаимодействия приложения с сервером с выводом языка JavaScript за пределы браузера.В первую очередь при выполнении этого программного кода в стек
вызовов (от англ. Call Stack) попадет функция console.log(…), которая выведет сообщение “Hello.” в консоли. После выполнения функции она удаляется из стека вызовов. На следующем шаге выполняется функция
setTimeout(…), которой передается коллбэк-функция cb(), что позволяет
избежать блокирования, с задержкой 5 секунд. Однако стек вызовов не
ожидает пока выполнится данная функция, а отправляет ее в Web APIs,
где запускается таймер. Фактически это означает, что таймер запущен параллельно (асинхронно), и можно очистить стек вызовов для следующей
функции. Далее вызывается функция console.log(), которая выводит сообщение “This is” и стек вызовов очищается. Однако тем временем, когда в
Web APIs таймер, установленный на 5 секунд, завершает свою работу, запланированная коллбэк-функция помещается в очередь задач (от англ.
Task Queue). Далее цикл событий (от англ. Event Loop) проверяет отсутствие задач в стеке вызовов и в случае положительного ответа отправляет
первую задачу, находящуюся в очереди задач, в стек вызовов. В итоге
коллбэк-функция cb() выполняется в текущий момент времени и в консоль
выводится сообщение “Node.js”.
Данный пример демонстрирует, что в самом движке V8 код выполняется однопоточно, однако потоки Web APIs, поставляемые браузером,
позволяют асинхронно выполнять некоторые операции.
При разработке веб-сервера на Node.js многие операции приходится
выполнять асинхронно с целью ухода от блокирования и повышения скорости выполнения программ. Именно поэтому важно понимать как работают асинхронные коллбэки. Для реализации веб-сервера воспользуемся
фреймворком Express, который является достаточно гибким и быстрым
при написании приложений с использованием платформы Node.js.
В первую очередь необходимо создать каталог для будущего приложения и установить его в качестве рабочего, например, на локальном диске D:
D:\nodeProjects>mkdir nodeWebServer
D:\nodeProjects>cd nodeWebServer
D:\nodeProjects\nodeWebServer>
Далее с помощью команды npm init создается файл package.json.
Данный файл содержит название проекта, версию, а также необходимые
зависимости, включенные в проект.