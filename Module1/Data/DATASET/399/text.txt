В области распределенных вычислений получил широкое распространение сервис-ориентированный подход, позволяющий публиковать различные программы, алгоритмы,
источники данных в виде независимых атомарных сервисов [1]. Распределенные сервисы активно применяются для обработки больших объемов пространственных данных c использованием открытых стандартов форматов данных и интерфейсов сервисов
OGC (Open Geospatial Consortium). С развитием и увеличением количества тематических сервисов для решения сложных междисциплинарных проблем стало актуальным
формирование и выполнение их композиций — объединений существующих сервисов
с определенными между ними взаимодействиями, ориентированными на решение конкретных задач [2]. Внутри композиции результаты работы сервисов могут выступать
в качестве входных данных для других ее сервисов. Сервисы, участвующие в композиции, могут находиться на разных вычислительных узлах.
Стандартами задания композиций сервисов являются BPEL (Business Process Execution Language), BPMN (Business Process Modeling Notation), BPML (Business Process
Management Language) и XPDL (XML Process Definition Language). Для задания композиций сервисов активно используются языки программирования. Применение языков программирования для управления потоками задания (workflow) позволяет обрабатывать промежуточные данные с помощью средств языка и его библиотек, а также
*Title translation and abstract in English can be found on page 57.
0c ИВТ СО РАН, 2019.
44
Выполнение JavaScript-композиций WPS-сервисов ... 45
использовать промежуточные данные в управляющих конструкциях языка, что значительно упрощает использование сервисов. Существующие программные инструменты,
позволяющие задавать композиции сервисов с помощью языков программирования, не
производят автоматического планирования вызова сервисов в условиях изменяющейся
распределенной среды.
Таким образом, возникает необходимость разработки такого программного средства,
которое позволяло бы формировать композиции распределенных сервисов в виде программ и автоматически распараллеливать вызовы сервисов в целях уменьшения общего времени выполнения композиций, а также делало выполнение композиций сервисов
устойчивым к изменениям гетерогенной среды.
Для формирования композиций сервисов существует ряд систем workflow, достигших
значительных результатов в различных предметных областях: Pegasus [3], Kepler [4],
Swift [5], KNIME [6], Taverna [7], Galaxy [8], Trident [9] and Triana [10], Everest (Mathcloud) [11], CLAVIRE [12]. Для обработки пространственных данных активно используется Geo-Processing Workflows [13]. Все перечисленные системы задают композицию
сервисов на уровне заданий и их зависимостей, где задание — это вызов сервиса, а передача данных выполняется с помощью файлов.
Общепризнанным стандартом постановки задачи планирования выполнения композиций сервисов является определение зависимостей между заданиями с помощью
направленного ациклического графа (Directed Acyclic Graph, DAG) [14, 15], в котором
вершинами являются вызовы сервисов, а дугами — зависимости между сервисами. Разработано много алгоритмов планирования композиций сервисов, основанных на DAG,
которые по способу нахождения расписания можно разделить на две группы: эвристические и метаэвристические алгоритмы. Эвристические алгоритмы обычно основаны
на списковых алгоритмах, сортирующих список заданий на основе определенной величины, рассчитываемой с помощью эвристики. Наиболее эффективными списковыми алгоритмами являются: HEFT (Heterogeneous Earliest Finish Time) [16], SDBATS
(Standard Deviation Based Algorithm for Task Scheduling) [17], PEFT (Predict Earliest
Finish Time) [18] и HSIP (Heterogeneous Scheduling with Improved Task Priority) [19].
Среди метаэвристических алгоритмов активно используются генетические алгоритмы, алгоритмы муравьиной колонии, имитации отжига и др. Генетические алгоритмы определяют приближенные решения из широкого пространства поиска, применяя
эволюционные принципы, причем они обычно находят более точные решения, нежели
эвристические алгоритмы, но проигрывают по времени поиска [20].
В междисциплинарных научных исследованиях отмечается тенденция использования алгоритмов обработки данных, в том числе пространственных, в виде сервисов или их композиций. При этом необходимо учитывать следующие факторы.
Во-первых, разработка сервиса может занять некоторое время. Во-вторых, реализованный сервис может быть очень специфичным и нужным только в этой композиции.
В-третьих, время выполнения некоторых алгоритмов может быть небольшим, и реализация их в виде сервисов приведет к значительным накладным издержкам, связанным
с инициализацией сервиса, передачей данных и т. д. Рассмотрим существующие реализации применения языков программирования для композиций сервисов.
В статье [21] для задания workflow используется язык программирования Python.
Разработано API, с помощью которого внутри Python-программы пользователь самостоятельно формирует DAG, зависимости DAG задаются при создании вершин, реализован асинхронный вызов сервисов. В указанном подходе не реализованы планирование выполнения DAG и адаптация выполнения DAG к изменениям распределенной
среды.
Существует гибридный подход, когда для задания DAG используется язык разметки (преимущественно XML). Для управления выполнением DAG применяется специализированное API на одном из языков программирования. Например, в работе [22]
управление выполнением DAG совершается посредством вызова обработчиков на языке JavaScript, указываемых в качестве атрибутов элементов XML-документа, описывающего композицию сервисов. Гибридный подход не обрабатывает промежуточные
данные и не адаптируется к изменениям вычислительной среды.
В статье [23] описан BPELscript, задающий workflow в виде программы, с похожим на
JavaScript синтаксисом. Достоинством BPELscript является возможность его трансляции в WS-BPEL и обратно, что позволяет использовать существующие методы выполнения и планирования для DAG. Возможна частичная обработка данных стандартными
средствами языка, но при трансляции в WS-BPEL она не может быть применена. При
интерпретации BPELscript нет возможности применить существующие методы выполнения и планирования для DAG.
В подходе [24] workflow задается с помощью языка Python. В процессе интерпретации программы строится DAG. Для этого в языке предусмотрены специальные методы,
создающие вершины DAG (вызовы сервисов), зависимости по данным задаются путем
указания соответствия входных данных выходным. Полученный workflow может выполняться с помощью Apache Storm, MPI и последовательно на обычном компьютере.
Такой подход не позволяет изменять DAG в зависимости от промежуточных данных,
производить их обработку, выполнять планирование на изменяющейся среде.
Подход к созданию workflow для методов геообработки [25, 26] использует сервисы
стандарта WPS. При этом workflow задается с помощью графического редактора и хранится в XML. Для выполнения workflow транслируется в программу на языке Python.
Такой подход не учитывает изменения состояния среды и не проводит планирование
и выполнение workflow. Применение языков программирования для задания workflow
позволяет производить обработку промежуточных данных с помощью средств языка
и его библиотек, использовать промежуточные данные в управляющих конструкциях
языка, что значительно упрощает использование сервисов. Существующие программные решения, использующие языки программирования для формирования композиций
сервисов, не производят автоматическое планирование вызовов сервисов в условиях распределенной гетерогенной среды, процесс выполнения композиций сервисов неустойчив
к изменениям, происходящим в среде.
В соответствии со стандартом WPS-обработки пространственных данных на момент
выполнения сервис может находиться в любой точке сети Интернет. Предсказать изменения состояния среды невозможно, так как в любой момент времени могут изме-
Выполнение JavaScript-композиций WPS-сервисов ... 47
Рис. 1. Взаимодействие интерпретатора и модуля DAG
ниться количество вычислительных узлов, их загруженность, длительность выполнения задания и т. д.
Каждый сервис может выполняться на нескольких вычислительных узлах. Предполагается, что имеется ограниченное количество вычислительных узлов и на одном
вычислительном узле может выполняться только один вызов сервиса в определенный
момент времени. Обработка пространственных данных часто может быть распараллелена по пространственной сетке.
Основная идея заключается в развитии подхода, в котором композиция сервисов задается в виде программы (сценария) на языке программирования (в работе используется
JavaScript), в процессе выполнения сценария формируется DAG с использованием оптимизирующих методов. Для упрощения в тексте статьи модуль выполнения программы
будет называться интерпретатором, а модуль выполнения DAG — модулем DAG. Оба
модуля работают одновременно и обмениваются данными. Интерпретатор в процессе
выполнения сценария передает модулю DAG новые вершины с зависимостями и обработанные в сценарии данные, в том числе промежуточные. Модуль DAG передает
интерпретатору промежуточные данные при необходимости их обработки или использования в управляющих конструкциях (рис. 1).
Обработка пространственных данных может быть распараллелена по пространственной сетке. Разделение и объединение пространственных данных по сетке выполняют методы библиотеки GDAL/OGR. Соответственно, если сервис обработки пространственных данных может работать на нескольких вычислительных узлах, то для ускорения
его выполнения можно автоматически распределить его копии по свободным вычислительным узлам. Специфика объединения и разделения данных может быть описана в
спецификации сервиса. В рамках метода модуль DAG может автоматически разделить
выполнение сервиса обработки пространственных данных на несколько вершин DAG,
выполняющихся на разных вычислительных узлах.
Рассмотрим подробнее взаимодействие двух модулей.
Формирование вершин DAG проводится способом, изложенным в работе [11], т. е. для
добавления вершины вызывается одна из заранее определенных функций, соответствующая зарегистрированному в каталоге сервису (функция-обертка). При вызове
функций-оберток происходит добавление вершины в граф композиции DAG с указанием сервиса, его характеристик, передаваемых и получаемых данных. Функция-обертка
одного и того же сервиса может вызываться произвольное количество раз, в каждом
случае это будет отдельная вершина DAG со своими зависимостями от других вершин.
Формирование ребер DAG, т. е. зависимостей между вершинами по данным, производится при регистрации узла DAG. Вершина может использовать данные, полученные
из следующих источников:
• другие вершины;
• обработка данных в коде сценария;
• начальные данные, переданные пользователем.
Каждая функция-обертка имеет описание входных и выходных параметров, которое можно автоматически получить в соответствии со стандартом WPS. При вызове
функции-обертки достаточно сформировать зависимости входных параметров. Зависимости выходных параметров автоматически формируются при добавлении следующих
вершин.
Формирование зависимостей на основе анализа текста программы и выявления потоков данных является нетривиальной задачей, так как результаты выполнения сервисов
могут помещаться в переменные, значения переменных затем могут переопределяться и т. д. В случае, когда источником данных является другая вершина, сложность
заключается в идентификации соответствия данных входных параметров регистрируемой вершины и выходных параметров других вершин и в отсутствии их модификации
в коде сценария. Поэтому предлагается при вызове функции-обертки в качестве параметров передавать объекты специального класса ValueStore (рис. 2), выступающие в
роли контейнеров для данных и позволяющие однозначно идентифицировать передаваемые и получаемые данные.
При генерации функций-оберток автоматически формируется интерфейс, требующий использования контейнеров для всех параметров. Контейнер данных может использоваться в качестве входных параметров для нескольких вершин. Он может использоваться только один раз в качестве как выходной параметр функции-обертки,
либо его значение задается в коде сценария, т. е. данные в него могут быть записаны единственный раз. Каждый контейнер имеет свой идентификатор, генерируемый
автоматически. Запись данных осуществляется методом Set() в коде сценария или моРис. 2. Класс ValueStore
Выполнение JavaScript-композиций WPS-сервисов ... 49
дулем DAG при завершении выполнения сервиса. Получение данных из контейнера
производится с помощью метода Get(). Свойство isReady возвращает TRUE, если данные помещены в контейнер. Если контейнер получил или должен получить данные из
другой вершины DAG, то свойство source содержит ссылку на эту вершину.
Рассмотрим определение зависимостей вершин на примере:
var vs1 = new ValueS to re ( ) ;
var vs2 = new ValueS to re ( ) ;
var vs3 = new ValueS to re ( ) ;
s e r v i c e 1 ({} , { r e s 1 : vs1 } ) ;
s e r v i c e 2 ({ inp1 : vs1 } , { r e s : vs2 } ) ;
s e r v i c e 3 ({ inp1 : vs1 , inp2 : vs2 } , { r e s : vs3 } ) ;
c o n s ol e . l o g ( vs3 . Get ( ) ) ;
При вызове функции-обертки service1 в качестве выходного параметра указан
объект vs1. Объект vs1 используется в качестве входного параметра при вызове функций-оберток service2 и service3, объект vs2 — в качестве входного параметра при вызове функции-обертки service3. В результате получается граф DAG, представленный
на рис. 3.
Определение зависимости между вершинами по данным происходит следующим
образом: при выполнении функции-обертки сервиса происходит анализ ее входных параметров. Для каждого контейнера происходят запоминание его идентификатора и проверка, использует ли какая-либо вершина этот контейнер в качестве выходного параметра. В случае если проверка находит такую вершину, в граф добавляется ребро, т. е.
обнаружена зависимость между вершинами по данным. Алгоритм формирования зависимостей задания приводится на рис. 4.
Получение данных внутри сценария для последующей обработки средствами
выбранного языка программирования производится с помощью метода Get класса
ValueStore. Если на момент вызова метода Get данные еще не готовы, то метод блокирует выполнение сценария. Выполнение сценария композиции продолжится только после
задания данных в контейнере, так как возможна ситуация, что в зависимости от результатов выполнения какого-либо сервиса будет происходить выбор определенной ветви сценария. Задание входных данных сервисов выполняется с помощью метода Set()
(не производит блокирование).
Предложен метод задания композиций сервисов обработки пространственных данных
с помощью языка программирования JavaScript, позволяющий производить обработку
промежуточных данных с помощью средств языка и его библиотек, использовать промежуточные данные в управляющих конструкциях языка. Метод выполнения композиций сервисов обработки пространственных данных позволяет применить существующие
методы планирования выполнения композиций и параллельной обработки пространственных данных в гетерогенной динамической вычислительной среде. Метод упрощает
подключение новых сервисов и передачу пространственных данных между сервисами.
