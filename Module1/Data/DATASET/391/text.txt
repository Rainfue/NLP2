В современном мире актуальной темой является создание
автоматизированных технологических систем, реализующих групповое
взаимодействие агентов для выполнения общей задачи. Например, орошений полей, построение карты местности, поисково-спасательные операции,
тушение пожара, обеспечения эффективного слежения за стратегически
важными объектами группой беспилотников и многих других [1,3,4]. Такие задачи сводятся к задачам построения зон близости. Зона – это плоскость с заданной декартовой системой координат, состоящая из клеток,
каждая из которых представляет собой одну квадратную единицу. В задаче о построении зон близости группа агентов должна полностью его покрыть, а именно посетить все клетки зоны.
Для эффективного выполнения задачи построения таких зон
несколькими агентами необходимо разделить между ними зону, так как
оно может оказаться существенно больше, чем количество агентов. Такое
разбиение можно построить с помощью диаграмм Вороного. Эти
диаграммы применяются во многих областях жизни людей, таких так:
разработка игр и картография, дизайн и архитектура, моделирование и
распознавание, биология и химия [2,5,6].
Достоинством метода разбиения Вороного является учет начального
положения агентов (так как агенты являются точками, для которых
строится диаграмма Вороного), получение непересекающихся областей,
представляющих собой выпуклые многоугольники [2], а также
48 ПРОГРАММНАЯ ИНЖЕНЕРИЯ: СОВРЕМЕННЫЕ ТЕНДЕНЦИИ РАЗВИТИЯ И ПРИМЕНЕНИЯ
возможность реализации данного метода разного рода модификациями
алгоритмов с различными требованиями к ресурсам.
У диаграмм Вороного существует тесная связь с триангуляцией
Делоне. Если соединить рёбрами точки области Вороного, которые
граничат друг с другом, полученный граф будет являться триангуляцией
Делоне [1].Триангуляцией Делоне называется такая триангуляция, в
которой для любого треугольника верно, что внутри описанной около него
окружности не находится точек из исходного множества.
Рассмотрим сам алгоритм построения диаграмм Вороного на основе
триангуляции Делоне и сравним его производительность на таких языках
как JavaScript, C++, Rust и Go.
Пусть дано множество точек и зоны близости в форме
прямоугольника. Требуется найти все многоугольники Вороного для этих
точек.
?Шаг 1. По исходному множеству точек строится триангуляция
Делоне.
?Шаг 2. Для каждого треугольника триангуляции вычисляется центр
описаннойокружности.
Шаг 3. Для каждого узла вычисляется центр многоугольника
Вороного. Рассмотрим серединный перпендикуляр отрезка, соединяющего
некоторую пару точек pи q. Этот перпендикуляр разбивает плоскость на
две полуплоскости Hpqи Hqp, причём область Вороного точки p целиком
содержится в одной из них, а область точки q — в другой. Область
Вороного Vp точки p совпадает с пересечением всех таких полуплоскостей
Hpq:
Таким образом, решение задачи сводится к вычислению такого
пересечения для каждой точки p. Алгоритм может быть реализован с
вычислительной сложностью O(n2
log n). 
На основе полученных данных можно сделать вывод о том,
что если работа алгоритма будет выполнятся в настольной версии
программы или на серверной части веб-приложения, то для получения
самой высокой производительности алгоритма нужно выбирать язык
программирования Rust(см. таблицу 3). Также из таблиц можно заметить,
что разница в производительности алгоритма на языках JavaScript(см.
таблицу 1)и C++(см. таблицу 2)составляет ~10% в пользу C++. Из этого
можно сделать вывод, что если реализовывать вычисления, например в
браузере клиента веб-приложения, то разница в скорости работы не столь
критичная. 