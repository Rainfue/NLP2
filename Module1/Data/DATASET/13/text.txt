Что такое Prettier? Prettier – это средство для форматирования кода, которое нацелено на использование жёстко заданных
правил по оформлению программ [1]. Оно
форматирует код автоматически, обеспечивая соблюдение предустановленных правил форматирования кода для проекта, что
в свою очередь позволяет сфокусироваться
на более важных вещах при написании программного кода.
Инструмент Prettier обладает следующими возможностями и особенностями
(рассмотрим основные из них).
– Приведение в порядок существующей кодовой базы можно выполнить одной командой. Ручная обработка больших
объёмов кода займёт гораздо больше времени: представьте себе затраты труда, необходимые для ручного форматирования
20 000 строк кода.– Prettier легко внедряется в проект,
он использует наименее спорный подход
к стилю при форматировании кода. Prettier – проект с открытым исходным кодом: многие внесли вклад в его доработку
и улучшение.
– Prettier позволяет сосредоточиться на
написании кода. Разработчики не осознают того, как много времени и сил тратится
на форматирование кода. Использование
Prettier в одном из наших проектов повысило эффективность работы на 10%.
– Prettier помогает начинающим. Если
вы начинающий программист, работающий
в одной команде с серьёзными профессионалами, и вы хотите достойно смотреться
на их фоне, в этом вам поможет Prettier.
– Затраты времени на code-review сокращаются в среднем на 15–20%: нет необходимости напоминать о забытых пробелах, лишних запятых и других подобных ошибках – их исправит Prettier.
Для запуска локального форматирования кода в большинстве сред разработки
предусмотрена возможность запуска фор- матирования текста прямо из контекстного
меню, например как в WebStorm (рис. 1).
Что такое Git Hooks? У систем контро- ля версий есть механизм запуска callbackскриптов по определенному действию. Как
и многие другие системы контроля версий,
Git предоставляет возможность запуска
пользовательских скриптов в случае воз- никновения определённых событий. Такие
действия называются хуками и разделяют- ся на две группы: серверные и клиентские.
Если хуки на стороне клиента запускаются
такими операциями, как слияние или соз- дание коммита, то на стороне сервера они
инициируются сетевыми операциями, та- кими как получение отправленного комми- та. Хуки часто используются для широкого
круга задач.
В некотором смысле хук является реа- лизацией шаблона Observer из ООП. Хуки
могут быть написаны на скриптовых язы- ках, таких как Bash, Python, Ruby и других.
Рассмотрим виды git-hooks (рис. 2).
Для реализации нашей задачи мы будем
использовать git-хук pre-commit для конфи- гурирования процесса отправки, проверки
и форматирования изменений плагином, на- ходящихся в коммите.
Цель исследования: исследование про- цесса подключения инструментов для автоматического форматирования программного кода при фиксировании изменений
в git-репозитории путём коммита изменённых файлов.