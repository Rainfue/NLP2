Потребители все больше полагаются на мобильные устройства для доступа к
цифровому контенту и услугам. Они стали более требовательны, чем когда–либо, и, когда
они оценивают впечатления от просматриваемого сайта, они не просто сравнивают его с
конкурентами, они оценивают его с лучшими в своей отрасли услугами, которыми они
пользуются каждый день.
Чтобы разрабатываемый сайт был конкурентоспособным, необходимо корректно разработать нефункциональные требования к нему. Одним из таких требований является
бюджет производительности. Это набор ограничений, налагаемых на показатели, влияющие
на производительность сайта. Такими ״ рамками״ могут быть общий размер страницы, время
загрузки в мобильной сети или количество отправленных HTTP–запросов. Определение
бюджета помогает перейти к веб–производительности, а также он служит отправной точкой
для принятия решений о дизайне, применяемых технологиях и добавлении функций.
Наличие бюджета производительности позволяет дизайнерам внедрять эффекты для
изображений с высоким разрешением и устанавливать количество веб–шрифтов. Это также
помогает разработчикам сравнивать различные подходы к проблеме веб–разработки и
оценивать эффективность фреймворков и библиотек на основе их размера [6].
Задержка в сети, время отклика сервера, размер страницы и тип подключения,
эффективное использование кэширования браузера, изображения соответствующего размера,
сжатие, использование CDN (сетей доставки контента) — все это ускоряет или сокращает
время загрузки страницы.
У потенциальных пользователей есть уникальные конфигурации устройств,
браузеров, операционных систем и сетей, которые необходимо учитывать при установлении
бюджета.
Возможно, придется сделать трудный выбор, например, исключить часть контента и
оптимизировать время отклика, пока показатели не будут удовлетворять рамки бюджета.
Из–за различных пользовательских конфигураций у разработки веб–приложения
может быть несколько целей. Чтобы удостовериться, какие устройства, местоположения,
типы подключения и операционные системы используют потенциальные посетители для
взаимодействия с контентом, необходимо рассмотреть возможность использования Real User
Monitoring (RUM) для дальнейшего уточнения бюджета производительности создаваемого
веб–сайта.
Для того, чтобы узнать, что лучше всего подходит для будущего сайта желательно
провести исследование, а затем проверить и оценить полученный результат. Например,
следует провести анализ конкурентов, чтобы корректно дать оценку разрабатываемому
сайту.
В начале проектирования веб–сайта стоит разработать контрольные показатели или
использовать уже проверенные:
– менее 5 секунд времени до интерактивности;
– менее 170 КБ ресурсов критического пути (сжатых/минимизированных) [3].
Эти цифры рассчитываются на основе реальных базовых устройств и скорости сети
3G. Сегодня более половины интернет–трафика приходится на мобильные сети, поэтому в качестве отправной точки следует использовать скорость сети 3G.
С другой стороны – можно воспользоваться показателями тестирования Google [5].
Данный браузер определяет скорость вашей страницы, имитируя медленное мобильное
соединение 4G. Google использует следующую конфигурацию регулирования:
– задержка: 150 мс;
– пропускная способность: 1,6 Мбит/с при загрузке / 750 Кбит/с при загрузке;
– потеря пакетов: нет.
Использование предварительных настроек тестирования Google — отличное место
для начала при определении бюджета производительности в Интернете. Достижение цели по
производительности на мобильных устройствах гарантирует, что у вас будет быстрый сайт и
на настольном компьютере.
Для разных типов страниц на сайте должен быть разработан свой бюджет, так как
содержание будет различаться. Например:
– страница продукта должна содержать менее 170 КБ JavaScript для мобильных устройств;
– страница поиска должна содержать менее 2 МБ изображений на рабочем столе;
– домашняя страница должна загружаться и становиться интерактивной менее чем за 5 с при
медленном 3G на телефоне Moto G4.
После определения ключевых показателей производительности сайта рассмотрим
способы достижения таких показателей. При разработке Javascript–кода стоит опираться на
шаблон PRPL. Данная аббревиатура описывает шаблон, используемый для того, чтобы веб–
страницы загружались и становились интерактивными быстрее:
(P) Предварительно загрузите наиболее важные ресурсы.
(R) Прогрузите первоначальный маршрут как можно скорее.
(P) Предварительно кэшируйте оставшиеся активы.
(L) Ленивая загрузка других маршрутов и некритических ресурсов [3].
Рассмотрим, как каждый из этих методов сочетается друг с другом, но при этом
может использоваться независимо для достижения результатов производительности.
Предварительная загрузка — это декларативный запрос на выборку, который
указывает браузеру запрашивать ресурс как можно скорее [2]. Предварительно загрузите
важные ресурсы, добавив тег <link> с rel="preload" в заголовок HTML–документа: браузер
устанавливает более подходящий уровень приоритета для ресурса, чтобы попытаться
загрузить его раньше, не задерживая событие “window.onload”.
Также, чтобы улучшить первичную загрузку, рекомендуется встроить критически
важный JavaScript и отложить остальные с помощью асинхронного режима, а также встроить
критически важный CSS, используемый в верхней части страницы.
Встраивание CSS–стилей для важных элементов страницы в <head> HTML–документа
избавляет от необходимости делать дополнительное обращение для этих стилей в CSS–
документ. Остальная часть стилей может быть загружена асинхронно. Это повышает
производительность, устраняя повторные обращения к серверу для получения ресурсов,
блокирующих рендеринг. Однако, встроенный код сложнее поддерживать с точки зрения
разработки, и браузер не может кэшировать его отдельно.
Cache Storage API открывает целый ряд новых возможностей, предоставляя
разработчикам полный контроль над содержимым кэша. Вместо того, чтобы полагаться на
комбинацию заголовков HTTP и встроенную эвристику браузера, Cache Storage API
предлагает подход к кэшированию, основанный на коде. Cache Storage API особенно полезен
при вызове из JavaScript технологии сервисного ‟работника‟ [1].
Для ‟ленивой‟ загрузки необходимо разбить Javascript код на небольшие модули и
подгружать их только в момент, когда это требуется пользователю [4].
Далее рассмотрим способы оптимизации разработки на основе фреймворка Vue.
Одной из наиболее распространенных проблем с производительностью во всех
интерфейсных приложениях является рендеринг больших списков. Независимо от того,
насколько производительна инфраструктура, рендеринг списка с тысячами элементов будет
медленным из–за огромного количества узлов DOM, которые должен обрабатывать браузер.
Однако, необязательно заранее отображать все эти узлы. В большинстве случаев
размер экрана пользователя может отображать лишь небольшую часть большого списка
элементов структуры сайта. Также позволят значительно улучшить производительность
виртуализация списков, а также техники рендеринга только тех элементов, которые в данный
момент находятся в области просмотра или рядом с ней в большом списке.
Внедрить виртуализацию списков возможно через уже реализованные сообществом
библиотеки:
– vue–виртуальный скроллер;
– vue–виртуальная прокрутка–сетка.
Улучшение производительности веб–сайта является сложной задачей, особенно с
учетом огромных различий в устройствах, возможностях подключения, браузерах и
операционных системах. Несмотря на то, что технологии фреймворка Vue позволяют
упростить работу по созданию сайта и его компонентов, для создания эффективно
работающего сайта разработчикам следует учитывать особенности инструментов
фреймворка и использовать их только по мере необходимости. Используя рекомендации,
описанные выше, разработчики смогут упростить себе работу с клиентом и процесс
разработки в целом. Благодаря созданию бюджета производительности они будут иметь четкие рамки при создании архитектуры и функционала будущего веб–приложения, а
представленные рекомендации помогут создаваемым модулям соответствовать
установленным рамкам по производительности.
