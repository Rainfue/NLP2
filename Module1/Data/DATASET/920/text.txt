React Native - это фреймворк, который позволяет
создавать собственные мобильные приложения с помощью JavaScript.
Обычно мобильное приложение пишутся с помощью Java (для Android) и
Swift/ObjC (для iOS). React Native позволяет отстраниться от этого,
позволяя написать полнофункциональное приложение для обеих платформ за
гораздо меньшее время и используя только один язык программирования.
Android и iOS имеют очень разные языки программирования, а компании
часто пытаются нанять себе-инженеров для обоих ОС. Но с React Native
один Разработчик может писать код для разных мобильных операционных
систем
React Native — это фреймворк для разработки кроссплатформенных
приложений для iOS и Android:
 построен на базе React
 не использует WebView и HTML-технологии
 нативные компоненты имеют биндинги в JS и обернуты в React
 поддержка iOS лучше, чем Android, но динамика многообещающая
React-Native быстро привлёк к себе внимание со стороны крупнейших
компаний, которые последовали принципу Facebook по упрощению
разработки своих мобильных приложений и стали переходить на данный
framework. Список данных компаний увеличивается с каждым днём, в чём
можно убедиться посмотрев на список самых популярных приложений,
написанных на React-Native:
 Facebook
 Instagram
 Airbnb
 Скайп
 Тесла
 Walmart
 Discord
 Папа Джонс
С популяризацией данного фреймворка разработчики также стали
выпускать в открытый доступ огромное количество компонентов, что Для разработки под iOS необходим следующий пакет
установленных ПО:
 Node
 Npm
 Xcode
Это все, что необходимо для начала разработки на React-Native. В
терминале запускаем команду “npm install -g react-native-cli”. Эта команда
установит пакет React Native глобально (ключ (-g). это означает, что из
любого проекта, созданного в node вы сможете получить доступ к пакету,
установленному глобально.
Переходим в папку, где хранятся проекты через командную строку и в
терминале выполняем команду: “react-native init FirstApp”. Эта команда
загрузит все необходимые модули в новой папке, под названием FirstApp.
Рисунок 1. Содержимое папки FirstApp
Одной из замечательных особенностей React-Native является то, что
вы пишете приложение под Android и iOS, используя JS, большая часть
которого используется в обоих приложениях. В директории есть два
файла index.android.js, index.ios.js, названия которых говорят сами за себя.
Для разработки под конкретную платформу, вам надо менять
__________________________________________________________________________
«Научно-практический электронный журнал Аллея Науки» №6(22) 2018
Alley-science.ru
соответствующий файл или оба, если вы разрабатываете под обе
платформы.
Мы будем работать с файлом index.ios.js. Этот файл запускается
первым, когда вы запускаете ваше приложение.
Затем в папке ios запускаем файл FirstApp.xcodeproj. В Xcode видно
следующее всплывающее окно (Рисунок 2):
Рисунок 2: Свойства проекта (Xcode)
В левом верхнем углу Xcode запускаем проект путём нажатия кнопки
Run. Это приведет к вызову окна терминала (Рисунок 3). Это может занять
некоторое время.
Рисунок 3. Запуск приложения (терминал)
__________________________________________________________________________
«Научно-практический электронный журнал Аллея Науки» №6(22) 2018
Alley-science.ru
По завершении должен получиться следующий результат в эмуляторе
мобильного устройства (Рисунок 4):
Рисунок 4: Приложение FirstApp на эмуляторе
Первое приложение написано.
Сравнительный анализ скорости работы приложения на React-Native и
Swift
Программировать на React-Native, как можно было заметить, не так
сложно, тем более большинство компонентов уже доступны к открытыми
использованию и их нужно только импортировать в проект и настроить.
Остаётся разобраться в производительности данного решения, ведь нельзя
забывать о таком моменте как скорость работы приложения. Для того что
бы разобраться в этом важном вопросе было решено написать два
одинаковых приложения на React-Native (Рисунок 5) и на нативном для
платформы iOS – языке программирования Swift (Рисунок 6). Приложения
будут состоять из следующих страниц:
 Facebook авторизация
 Facebook профиль
 Список заданий
__________________________________________________________________________
«Научно-практический электронный журнал Аллея Науки» №6(22) 2018
Alley-science.ru
 Карта Google maps
Рисунок 5: Приложение на React-Native
Рисунок 6: Приложение на Swift
Нагрузка на процессор
__________________________________________________________________________
«Научно-практический электронный журнал Аллея Науки» №6(22) 2018
Alley-science.ru
Одна из важных характеристик быстродействия – нагрузка на процессор
CPU (Таблица 1)
React-Native Swift
Facebook профиль 16,55 18,10
Карта 34,32 24,63
Список заданий 26,33 27,05
Таблица 1: Нагрузка на процессор
Диаграмма 1: Нагрузка на процессор
Судя по диаграмме 1 можно заметить, что React-Native в двух позициях
выигрывает у Swift в быстродействии, но на странице с картой значительно
проигрывает. При этом Swift тратит на 7,4% ресурсов процессора меньше.
Нагрузка на графический процессор
Далее проанализируем нагрузку на графический процессор, путём
выполнения действий и отслеживания частоты изменения экрана (FPS –
frames per second). Результаты отображены в таблице 2.
0
10
20
30
40
Facebook профиль Карта Списокк заданий
Нагрузка на процессор
React-Native Swift
__________________________________________________________________________
«Научно-практический электронный журнал Аллея Науки» №6(22) 2018
Alley-science.ru
React-Native Swift
Facebook профиль 24,12 25,2
Карта 18,6 22,2
Список заданий 22,86 16,86
Таблица 2: Нагрузка на графический процессор
Диаграмма 2: Нагрузка на графический процессор
По результатам диаграммы 2 видно, что оба приложения ведут себя
примерно одинаково, и разница составляет лишь в 1,3 fps.
Использование памяти
Сейчас предстоит определить кто потребляет больше памяти: ReactNative или Swift. Так же были выполнены действия на каждой из страниц, а
результаты записаны в таблицу 3.
React-Native Swift
Facebook профиль 1,29 1,23
Карта 32,56 68
Список заданий 2,34 2,68
Таблица 3: Использование памяти
0
5
10
15
20
25
30
Facebook профиль Карта Списокк заданий
Нагрузка на графический процессор
React-Native Swift
__________________________________________________________________________
«Научно-практический электронный журнал Аллея Науки» №6(22) 2018
Alley-science.ru
Диаграмма 3: Использование памяти
По диаграмме 3 можно заметить, что в данном тесте Swift
проигрывает React-Native при открытии Google карты, а в остальном опять
же ведёт себя примерно на том же уровне.
Заключение
Любое решение в сфере программирования имеет как свои плюсы, так
и недостатки. В данном случае, React-Native имеет больше плюсов, чем
минусов, которые, пожалуй, заключаются только лишь в небольших
проблемах с быстродействием, однако, имеет ряд плюсов, из-за которых его
всё чаще и чаще применяют в коммерческих разработках по всему миру.