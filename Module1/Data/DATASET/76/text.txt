Постановка проблемы. Существует множество веб-сайтов и вебсервисов на поддержку и редакцию которых тратятся огромное количество ресурсов как временных, так и материальных. Под каркасом таких вебресурсов находятся сотни строк кода, непосредственно расположенных в 
интерфейсе продукта, из-за чего появляются трудности в понимании работы веб-ресурса и тем более его изменении и поддержке. Происходит такое из-за отсутствия применения паттернов программирования. MVC 
(Model-View-Controller) паттерн, который лежит в основе всех современных веб-фреймворков, позволяет решить вышеизложенную проблему.
Цель статьи – описать создание веб-ресурса с использованием паттерна MVC на языке программирования PHP.
Изложение основного материала. MVC – это фундаментальный 
паттерн, который отделяет графический интерфейс от логики, а логику от 
данных. MVC состоит из трех частей, которые и дали ему название. Рассмотрим их:
 модель (Model). Под моделью обычно подразумевается часть, которая несет в себе функциональную бизнес-логику веб-ресурса. Модель 
является полностью независимой от остальных частей продукта;
 представление (View). Представления выполняют отображения 
данных, полученных от модели. Однако представление не имеет возможность напрямую влиять на модель, также у представления имеется доступ 
«только на чтение» к данным [1]; 
 контроллер (Controller) – связующее звено, соединяющее модели, 
виды и другие компоненты в рабочее приложение. Контроллер занимается 
обработкой запросов пользователя.
Для того чтобы применить паттерн MVC в проекте нужно создать 
файл «.htaccess» и внести в него инструкции для использования роутинга 
на рабочем веб-ресурсе.
Далее необходимо создать структуру веб-ресурса (рисунок 2). На текущем этапе имеются 6 директорий и главная страница index.php.
На странице «index.php» требуется подключить общие настройки, 
базу данных и вызвать метод run из класса Router (рисунок 3).
Класс Router находится в папке components и имеет конструктор, 
функцию для распознавания пути в адресной строке и функцию для подключения нужного контроллера в зависимости от пути в адресной строке 
(рисунок 4).
Адресный путь для сравнения берется из массива, который хранится 
в директории config в файле routes.php (рисунок 5).
Получив URL, необходимо найти его в массиве routes.php, а после 
нахождения, первая часть результата – это название контроллера, а вторая – название метода в этом контроллере. В зависимости от полученного 
URL, к примеру ‘news’, будет вызываться не контроллер ‘news’ а 
‘NewsController’ и не метод ‘index’ а метод ‘actionIndex’, поэтому структура файлов будет иметь вид как на рисунке 6. Это выполнено для удобства и более чистого отображения информации в файле routes.php.
При подключении контроллера в строке 10 разработчик получает 
данные из модели, а в 11 строке отображена полученная информацию на 
рабочем веб-ресурсе.
В модели происходит подключение к базе данных, затем отправляется запрос на получение 10 новых новостей, после формируется массив с 
результатом и происходит отправление результата обратно контроллеру 
для отображения (рисунок 7).
Для отображения применяется шаблон для заданного метода из директории “views”. 
Итоговая внутренняя структура разрабатываемого сервиса представлена на рисунке 8. 
Выводы. Выше было показано создание веб-ресурса с использованием принципов MVC. В статье поэтапно рассмотрены все этапы, от создания начальных директорий до разработки классов и функций, используемых в веб-ресурсе. Посредством использования принципов MVC грамотно проектируется структура, которую легко тестировать, поддерживать и изменять. Далее следует создать контроллеры, модели и шаблоны 
для всех целей веб-ресурса. 