Маршрутизация в React отличается от того, что есть в классических веб-сайтах. Одностраничные
приложения перезаписывают разделы страницы, а не загружают новые целиком с сервера.
Эти приложения просты в развертывании и очень улучшают взаимодействие с пользователем.
Однако они также имеют ряд недостатков.
Одним из них является история браузера. Поскольку приложение содержится на одной странице,
оно не может полагаться на кнопки браузера, такие как вперед или назад. И необходимо то, что в зависимости от состояния приложения изменяет URL-адрес и отправляет его в историю браузера. И также
нужно восстановить состояние приложения на основе информации, содержащейся в URL-адресе. Всем
этим занимается роутер.
Маршрутизатор позволяет приложению перемещаться между различными компонентами, изменяя URL-адрес в браузере, историю и синхронизируя состояние пользовательского интерфейса.
Для настройки маршрутизации между страницами применяем библиотеку react-router-dom. Технология React Router DOM позволяет реализовать динамическую маршрутизацию в веб-приложении. В
отличие от традиционной архитектуры маршрутизации, в которой маршруты обрабатываются в конфигурации за пределами работающего приложения, модель React Router DOM упрощает роутинг на осноАннотация: маршрутизация в веб-приложениях имеет серьёзное влияние на производительность. А
навигация с помощью библиотеки React позволит минимизировать нагрузку в этой ситуации.
Ключевые слова: маршрутизация, React Router DOM, компонент, React, страница.
ROUTING IN A REACT WEB APP
Arsen’ev Ivan Valerievich,
Andrusenko Yaroslava Olegovna,
Sutiagin Nikolai Romanovich
Scientific adviser: Kulikova Natalya Nikolaevna
Annotation: Routing in web applications has a significant impact on performance. And navigation using the
React library will minimize the load in this situation.
Key words: routing, React Router DOM, component, React, page.
32 АКТУАЛЬНЫЕ НАУЧНЫЕ ИССЛЕДОВАНИЯ
XVI международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
ве компонентов в соответствии с потребностями приложения и платформы.
React Router DOM – наиболее подходящий выбор, если речь заходит о приложении на React, которое будет работать в браузере.
И для реализации навигации необходимо всё приложение обернуть в компонент <Router>, именно он будет отслеживать изменение пути и перерисовывать компоненты.
Для объявления маршрутов react-router-dom предоставляет компонент, который называется
<Route>. В него добавляем два элемента:
− компонент со страницей;
− путь.
И так как в веб-приложении есть страницы, которые доступны только после авторизации, то сделаем разделение с помощью обёрточного приватного компонента, который назовём <PrivateRoute>. Его
главной функцией будет перенаправление на страницу с авторизацией, если вдруг пользователь, не
имеющий токенов доступа, захочет ввести url-адрес страницы личного кабинета или страницы с показателями здоровья. В react-router-dom компонент отвечающей за редирект – это <Navigate>. Добавляем его в <PrivateRoute> и указываем в нём путь до страницы с авторизацией. На этом с приватными
ссылками можно закончить.
Также предусмотрим переход на несуществующие страницы. Такая ошибка имеет статус код 404.
Первым делом создадим отдельную страницу с названием NotFound, где будет информация о том, что
такой страницы не существует. Далее создаём ещё два компонента <Route>. В первом прописываем
путь со значением not-found-404 и добавляем ранее созданную страницу. А во втором указываем путь,
равный символу звёздочки и добавляем <Navigate to="/not-found-404">. Последний компонент означает,
что переход на любой не объявленный путь приведёт к перенаправлению на страницу с сообщением о
404 ошибке.
Теперь по этим маршрутам надо научиться динамически передвигаться, а не просто менять
строку запроса в браузере. Необходимо сделать так, чтобы при нажатии на какие-то элементы осуществлялся переход на ту или иную страницу.
Импортируем из react-bootstrap компонент <Navbar>, который является основой навигационной
панели. Ему нужно задать такие свойства как expand и bg (листинг 1).
<Navbar collapseOnSelect expand="md" bg="light">
<Navbar.Brand>Название компании</Navbar.Brand>
<Navbar.Toggle aria-controls="responsive-navbar-nav" />
<Navbar.Collapse id="responsive-navbar-nav" >
<Nav className="mr-auto">
<Nav.Link><Link className={cl.navigate} to="/">Главная</Link>
</Nav.Link></Nav>
{auth.isLoaded &&
(auth.user ? (
<><Nav>
<Nav.Link><Link className={cl.navigate} to="/statistic">Статистика
</Link></Nav.Link>
<Nav.Link><Link className={cl.navigate} to="/profile">
Профиль
</Link></Nav.Link>
</Nav>
<Navbar.Collapse className="justify-content-end">
<Nav>
<Button variant="primary" onClick={onLogOut}>Выйти</Button>
</Nav></Navbar.Collapse></>
))}</Navbar.Collapse></Navbar>
<Routes />
Лист. 1. Приватное навигационное меню
АКТУАЛЬНЫЕ НАУЧНЫЕ ИССЛЕДОВАНИЯ 33
XVI International scientific conference | www.naukaip.ru
В expand ставим значение md, означающие medium – это точка остановки, которая равна 768
пикселям. Она означает что, когда ширина экрана станет меньше этого значения, произойдёт сворачивание панели навигации. Далее задаём стиль заднего фона со значением light, напоминающий светлосерые тона. Следующим шагом указываем Navbar.Brand, где размещается логотип сайта. Далее идут
компоненты Navbar.Toggle и Navbar.Collapse – кнопки, которые будут сворачивать и разворачивать меню соответственно. Внутри bootstrap-элемента Nav.Link добавляется компонент библиотеки reactrouter-dom с названием <Link> для перехода на необходимую страницу. Но самым важным элементом
в этой части является компонент <Routes/>, он включает в себя все ранее построенные маршруты, без
него ничего не будет работать. Причём из кода можно заметить, что страницы профиля и показателей,
а также кнопка выхода из учётной записи будут отображаться только при условии, что пользователь
авторизован.
Использование кнопки выхода приводит к вызову функции onLogout, так как подключён слушатель события. В неё передаётся параметр event – это некоторое событие, которое произошло при
нажатии. Первым делом отключаем стандартное поведение кнопки, ведь при её нажатии происходит
перезагрузка страницы. Отключение производится путем использования метода preventDefault у event.
Далее создаём переменную auth и подключаем к ней хук useAuth для доступа к глобальному хранилищу. И задействуем метод очистки данных о пользователе с помощью команды auth.logout(), а затем
выполняем перенаправление на страницу с авторизацией.
Таким образом, была реализована полная навигация по веб-приложению.
