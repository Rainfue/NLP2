В современной веб-разработке, где скорость загрузки и
производительность приложений играют важную роль в удержании
пользователей [1], оптимизация размера загружаемых ресурсов является
одной из ключевых задач для разработчиков. Эта проблема становится
особенно актуальной в связи с ростом сложности и размера клиентских вебприложений, которые часто включают большое количество внешних
библиотек и фреймворков [2]. Большой объем кода ухудшает
интерактивность и увеличивает нагрузку на клиентские устройства, что
имеет критическое значение для мобильных устройств, составляющих 64.1%
мирового веб-трафика [3]. Tree-Shaking представляет собой современный
подход к оптимизации, позволяющий удалять избыточный код из конечных
сборок JavaScript-приложений, улучшая их производительность и скорость
загрузки.
Tree-Shaking — процесс удаления неиспользуемого кода при сборке
клиентских веб-приложений, который позволяет сократить размер
финальной сборки (бандла) приложения. Принцип его работы основывается
Инженерный вестник Дона, №12 (2023)
ivdon.ru/ru/magazine/archive/n12y2023/8889
© Электронный научный журнал «Инженерный вестник Дона», 2007–2023
на статическом анализе кода, который подразумевает комплексное
исследование структуры кода без его выполнения [4]. На этапе сборки
проекта анализатор строит граф зависимостей и определяет неиспользуемые
модули. После этого из финальной сборки приложения удаляются
неиспользуемые участки кода. Пример работы Tree-Shaking представлен на
рис. 1.
Важным аспектом эффективности Tree-Shaking является модульность
кода. Современные принципы веб-разработки подразумевают разделение
всего кода проекта на мелкие независимые модули, что позволяет более
точно идентифицировать и исключать неиспользуемые компоненты. При
этом для правильного определения избыточного кода необходимо
использование модулей ECMAScript с ключевыми словами import и export
[5]. Более ранние форматы модулей в JavaScript, включая CommonJS, не
поддерживают статический анализ зависимостей на том же уровне [6].
Стоит отметить, что не все сценарии удаления кода являются
тривиальными, в частности когда речь идет о побочных эффектах (sideeffects) — действиях программы, изменяющих среду ее выполнения [7].
Удаление кода, результат работы которого не используется напрямую, но
изменяет глобальное состояние или взаимодействует с внешними системами,
может привести к нежелательным изменениям в поведении приложения.
Данная проблема, как правило, решается при помощи специальных
аннотаций, предотвращающий удаление фрагмента с побочными эффектами
в процессе Tree-Shaking [8].
Эффективность Tree-Shaking может значительно варьироваться в
зависимости от используемого инструмента для сборки, каждый из которых
использует уникальные алгоритмы для определения неиспользуемого кода.
Разница может заключаться как в обработке отдельных участков кода, так и в
скорости работы и конечном размере сборки. Поэтому правильный выбор
инструмента для сборки является ключевым фактором успешной
оптимизации веб-приложений.
В рамках данного исследования было проведено сравнение
эффективности механизма Tree-Shaking в 5 популярных инструментах для
сборки клиентских веб-приложений: Webpack (версия 5.88.2), Rollup (версия
3.28.1), Parcel (версия 2.9.3), Vite (версия 4.4.9) и Esbuild (версия 0.19.2) [9]. В
качестве оборудования для тестирования был использован ноутбук Apple
Macbook Pro 16 с процессором Apple M1 Pro и 16 Гб ОЗУ, работающий на
операционной системе macOS 14.0 Sonoma.
Для получения объективных данных о поведении выбранных
инструментов при удалении кода были определены и имплементированы 5
экспериментов, отражающих различные сценарии присутствия
неиспользуемых фрагментов в исходном коде. Описание и исходный код экспериментов представлены в таблице №1. Критерием успешного
выполнения в экспериментах 1, 2, 4 и 5 считалось отсутствие кода функции
bar в конечной сборке проекта, в эксперименте 3 — ее наличие.
Полученные данные демонстрируют одинаковое поведение всех
инструментов в базовых сценариях присутствия неиспользуемого кода,
представленных в экспериментах 1–3. При этом, в случае с динамическим
импортом модуля в эксперименте 4, избыточный код был удален только в
Rollup и Parcel. В то же время в эксперименте 5 только Webpack определил
неиспользуемый метод импортируемого объекта и удалил его. Ни один из
Инженерный вестник Дона, №12 (2023)
ivdon.ru/ru/magazine/archive/n12y2023/8889
© Электронный научный журнал «Инженерный вестник Дона», 2007–2023
инструментов не справился со всеми сценариями, однако можно судить о
более эффективной реализации Tree-Shaking в Rollup, Parcel и Webpack.
Итоги тестирования представлены в таблице № 2 и таблице № 3.
Результаты замеров времени сборки и размера конечных файлов
позволяют судить и том, что включение Tree-Shaking позволяет значительно
сократить конечный размер приложения после сборки по всех инструментах.
Наименьший размер файлов был продемонстрирован при использовании
Webpack и Esbuild.
Скорость сборки приложения не является критическим параметром при
выборе инструмента разработчиками. Однако, важно отметить, что
дополнительный анализ и удаление избыточного кода при включении TreeShaking оказывают незначительное влияние на этот показатель. При этом в
зависимости от конкретного инструмента длительность сборки может как
увеличиться, так и уменьшиться. С высокой долей вероятности это
обусловлено различиями в наборе и последовательности прочих
преобразований, происходящих в процессе сборки приложения [10].
Проведенное исследование демонстрирует важность применения TreeShaking для оптимизации размера клиентских веб-приложений. По
результатам тестирования было установлено, что использование этого
механизма позволяет значительно сократить размер конечного кода, улучшая
время загрузки и снижая потребление ресурсов устройства. Полученные
данные о различиях в реализации и общей эффективности Tree-Shaking в
популярных инструментах сборки могут быть полезны разработчикам при
выборе подходящих средств для сборки проектов.