Создание любого нового изделия начинается с прототипирования. Цель создания
качественного прототипа заключается в
точном повторении геометрической формы,
собираемости, внешнего вида детали и поиска материалов, максимально похожих на
заданные. Очень удобны технологии быстрого прототипирования – послойного синтеза макета по компьютерной модели изделия.
Такой прототип позволяет оценить внешний
вид детали, проверить элементы конструкции, провести необходимые испытания, получить мастер-модель для последующего
литья. RP-технологии в прототипировании
значительно сокращают сроки подготовки
производства, разрешают отказаться от длительного и трудоемкого этапа изготовления
опытных образцов вручную или на станках
с ЧПУ. В ювелирной промышленности из
множества технологий быстрого прототипирования зачастую выбирают 3D фрезеровку. ЗD фрезеровка (3D резка) применяется для получения объемных изображений
на различных материалах [1]. Изображение
формируется на материале при помощи
вращающейся с высокой скоростью фрезы
или гравера, путь для которых формируется
с использованием специального ПО и на
вход которых подается 3D модель изготавливаемого изделия [2].
Однако большинство клиентов ювелирных мастерских не в силах самостоятельно
создать 3D модель заказываемого изделия,
так как не обладают навыками работы с
трехмерными редакторами, такими как
Blender, Autodesk 3ds Max. Для взаимодействия с ними необходим сервис, который
позволит по визуальному изображению (фотографии, рисунку) желаемого ювелирного
изделия, изготовить его трехмерный прототип.
В качестве такого сервиса может выступать веб-сайт или веб-приложение. Современный мир невозможно представить без
представительства в сети. Билл Гейтс произнес: «Если вас нет в Интернете, вас нет в
бизнесе». Ввиду широкой распространенности интернета каждый клиент сможет вос-
Г. Н. Вер хотурова, А. В. Кисел ев? Технологии 3D графики в web-приложениях 97
…
пользоваться услугами ювелирной мастерской просто имея только изображение изготавливаемого изделия.
Для многих компаний, которые связаны
со сферой цифровых и компьютерных технологий, создание web-приложений является одним из основных направлений деятельности.
Существует множество аргументов
в пользу веб-приложений. Во-первых, webприложения не требуют установки и, зачастую, их запуск происходит быстрее, чем
обычных desktop-приложений. Вторым преимуществом web-приложений является
кроссплатформенность. Для их работы
нужна не специальная операционная система, а всего один инструмент – браузер. Они
не нуждаются в переустановке и доступны
на любом устройстве, у которого присутствует подключение к Интернету. Также
некоторые особо ресурсоемкие приложения
часто реализуются так, что основная вычислительная нагрузка приходится на сервер.
Такая структура приложения дает возможность работать с довольно сложными приложениями на компьютерах и ноутбуках,
которые обладают слабым железом. Ну и
конечно, с помощью веб-приложений могут
быть реализованы все преимущества Интернета – облачное хранилище данных,
быстрый доступ к результатам совместной
работы и так далее.
При создании web-приложений, работающих с 3D объектами, встает вопрос выбора технологии визуализации трехмерной
графики.
X3D
Extensible 3D (X3D) – это семейство
скоординированных бесплатных открытых
стандартов для форматов файлов, в которых
могут храниться представления интерактивных 3D-объектов и сцен, с соответствующей архитектурой времени выполнения
для взаимодействия сцен и объектов.
X3D произошел от языка моделирования
виртуальной реальности (VRML) и, как и
VRML, разработан для поддержки виртуальной среды, но может применяться во
многих других трехмерных контекстах.
Предложенная фирмой Lattice структура
и новый XVL-формат (eXtensible Virtual
world description Language), который описывает XML-расширение для X3D – то новая
форма описания трехмерной модели, предназначенная для решения вышеупомянутых
проблем.
Lattice-структура состоит, собственно,
из Lattice Surface (поверхности из сплайновых «заплаток» – Gregory patch) или Lattice
Mesh (полигональной каркасной сетки).
Использование Lattice-структуры и описывающего ее формата XVL как расширения X3D-стандарта для создания сложных
трехмерных сцен в сети Интернет позволяет
обходиться маленькими файлами, которые
быстро передаются по Сети, но, тем не менее, сохраняют достаточную точность отображения и большое количество деталей в
представляемых моделях.
Это достигается следующим образом:
– изначально моделируется произвольная сплайновая форма – Lattice-поверхность
(очевидно, что даже само представление
модели в виде сплайновой поверхности значительно экономичнее);
– затем, после передачи данных на компьютер пользователя, Lattice-поверхности
преобразуются браузером в полигональные
сетки для последующей VRMLвизуализации.
Между Lattice-поверхностью и Latticeсеткой существует взаимно однозначное
соответствие (они имеют ту же самую топологию и структуру), и специальный алгоритм может быстро переводить одно в другое.
Каркасное представление Lattice-сетей
обеспечивает пользователей простым в использовании и легко масштабируемым решением для отображения трехмерных моделей с поддержкой их целостности, а Latticeповерхность гарантирует гладкость и высокую достоверность при отображении мелких деталей.
При этом использование Latticeструктуры как открытого расширения X3D
уже поддержано целым рядом производителей, которые стремятся получить быстрый и
эффективный способ для передачи и пред-
98 ИНФОР МА ЦИОНН ЫЕ ТЕХН ОЛОГИ И
ставления высококачественной 3D-графики
в сети Интернет [3].
Согласно введению к ISO/IEC/19557-1,
спецификации архитектуры и функциональности X3D, «X3D – это программный
стандарт для определения интерактивного
веб и широковещательного 3D-контента,
интегрированного с мультимедиа. X3D
предназначен для использования на различных аппаратных устройствах в широком
спектре прикладных областей, таких как
инженерная и научная визуализация, мультимедийные презентации, развлекательные
и образовательные названия, веб-страницы
и общие виртуальные миры. X3D также
призван стать универсальным обменным
форматом для интегрированной 3D-графики
и мультимедиа». Разработка, тестирование
и сопровождение семейства стандартов X3D
осуществляется членами некоммерческого
Консорциума Web3D, а стандартизация
осуществляется под эгидой JTC1/SC24.
Консорциум Web3D предоставляет две полезные диаграммы семейства стандартов:
– во-первых, «сотовую» диаграмму текущих стандартов, связанных с X3D;
– во-вторых, обновленную диаграмму
взаимосвязей между графическими спецификациями X3D, которая служит дорожной
картой, показывая новые разработки и указывая планы на будущее.
С целью поддержки широкого спектра
прикладных областей рассматриваемая архитектура поддерживает множество функций. Примерами компонентов являются
форма, внешний вид, текстурирование,
освещение, время, Geometry3D, Геопространство, навигация, сценарии.
Профили, соответствующие различным
областям применения или рынкам, указаны
в приложениях; в приложениях к профилям
перечислены компоненты, которые должны
поддерживаться, и другие ограничения.
Компоненты действуют как модульные коллекции «типов узлов», которые облегчают
программному обеспечению постепенную
реализацию целого ряда возможностей
X3D. Некоторые компоненты являются специализированными, например компонент
геометрии САПР; другие необходимы для
каждого приложения, например компонент
Shape, который определяет типы узлов для
связывания геометрии с видимыми свойствами.
Узлы содержат поля; поле может быть
значением, набором значений или дочерним
узлом. Например, каждый узел формы имеет узел геометрии и узел внешнего вида.
Узел внешнего вида может включать один
из множества дочерних узлов; возможные
дочерние узлы включают узлы для материала, текстуры, свойств линий, свойств заполнения, шейдеров и т.д.
Узлы – это основные строительные блоки для физических кодировок файла X3D.
Например, в кодировке XML узлы представлены в виде элементов. X3D использует
«граф сцены» для сборки всех узлов, составляющих моделируемую виртуальную
среду. Граф сцены – это древовидная структура, которая собирает все аспекты трехмерной сцены в иерархическом порядке,
правильно организуя геометрию, внешний
вид, анимацию и маршрутизацию событий
[4].
WEBGL
Наиболее распространенными технологиями отображения компьютерной графики
на персональных компьютерах являются
Direct3D и OpenGL.
Direct3D – составная часть пакета технологий Microsoft DirectX.
Альтернативная ей технология OpenGL,
благодаря ее открытости, получила гораздо
более широкое распространение. Реализации OpenGL доступны для различных операционных систем и аппаратных платформ.
Спецификация OpenGL была разработана
компанией Silicon Graphics Inc. и опубликована как открытый стандарт в 1992 году.
Технология оказала огромное влияние на
развитие трехмерной графики.
WebGL уходит корнями в OpenGL, однако назвать его прямым потомком нельзя.
Непосредственным прототипом WebGL
принято считать OpenGL ES (for Embedded
Systems для встраиваемых систем), которая
создана в 2003–2004 гг. и обновлена в 2007 г.
(ES 2.0) и в 2012 г. (ES 3.0). Переход к версии OpenGL 2.0 обозначился появлением
новой важной особенности – поддержкой
Г. Н. Вер хотурова, А. В. Кисел ев? Технологии 3D графики в web-приложениях 99
…
программных шейдеров. Эта поддержка была перенесена в OpenGL ES 2.0 и стала одним из основных элементов спецификации
WebGL 1.0.
В начале 2009 года консорциум Khronos
Group (некоммерческий промышленный
консорциум, образованный для разработки,
публикации и продвижения различных открытых стандартов) учредил рабочую группу WebGL и запустил процесс стандартизации WebGL на основе OpenGL ES 2.0.
В 2011 г. под его эгидой была выпущена
первая версия WebGL. Однако в июне того
же года корпорация Microsoft выразила
свою обеспокоенность безопасностью технологии WebGL, сославшись на чрезмерные
права доступа к оборудованию и ненадежность механизмов защиты. Вице-президент
Mozilla Марк Шавер отверг критику
Microsoft, назвав опасения преувеличенными.
В то время корпорация Microsoft обладала собственной 3D веб-технологией
Silverlight 5, основанной на тех же принципах, что и WebGL, которую, тем не менее,
корпорация считала достаточно надежной.
Позднее Microsoft изменила свое отношение
к технологии WebGL, реализовав ее поддержку в своем браузере Internet Explorer
11. Корпорация Apple приняла решение о
поддержке WebGL в браузере Safari на конференции WWDC в 2014 году.
Переход к версии OpenGL 2.0 означился
появлением новой важной особенности –
поддержкой программных шейдеров. Эта
поддержка была перенесена в OpenGL ES
2.0 и стала одним из основных элементов
спецификации WebGL 1.0.
Язык программирования, используемый
для создания шейдеров, называется языком
шейдеров (shading language). Язык шейдеров, определяемый в спецификации OpenGL
ES 2.0, основан на языке шейдеров OpenGL
(GLSL) и называется языком шейдеров
OpenGL ES (GLSL ES). Так как WebGL основана на OpenGL ES 2.0, в ней для создания шейдеров также используется язык
GLSL ES. WebGL следует клиенториентированному подходу для рендеринга
3D-сцен. Вся обработка, требуемая для получения изображения, выполняется локально с помощью графического оборудования
клиента.
WebGL предназначен для использования
в сочетании со стандартными вебтехнологиями. Таким образом, пока 3Dкомпонент веб-страницы рисуется с помощью API WebGL через Javascript, сама
страница формируется стандартным HTML.
На рис. 1 представлена структура традиционной динамической веб-страницы (слева) и веб-страницы, использующей WebGL.
С появлением WebGL возникла необходимость добавить в эту комбинацию язык
шейдеров GLSL ES.
Это означает, что веб-страницы, использующие технологию WebGL, создаются на
трех языках: HTML5, JavaScript и GLSL ES.
Графический контейнер WebGL можно
схематично представить следующим образом (рис. 1):
– Приложение передает координаты в
массиве векторов, который указывает на
буфер векторов. Координаты векторов поочередно передаются в вершинный шейдер.
– Вершинный шейдер обрабатывает
вершину относительно других вершин, перемещая координаты, добавляя ссылки на
цвета и выполняя другие действия.
– Треугольники собираются и передаются в средство прорисовки, которое вычисляет пиксели, лежащие между вершинами
треугольников, с помощью интерполяции.
– На этапе подробной проверки определяется, виден ли пиксель. Пиксели (и объекты) могут отсутствовать в области просмотра, находиться слишком далеко впереди или
сзади (в зависимости от координат по оси 2)
или закрываться другим объектом. Если они
не видны, о них забудут. Шейдер фрагментов закрашивает пиксели. Цвета или ссылки
на изображения могут быть переданы в
шейдер фрагментов из вершинного шейдера. Задать цвета можно и в шейдере фрагментов.
– В завершение пиксель отправляется в
буфер кадров, который отображает его на
экране.
WebGL запускается на графическом
процессоре компьютера пользователя, который предоставляет код, работающий на
этом графическом процессоре, в виде пар
функций. Эти две функции называются
вершинным шейдером и шейдером фрагментов, и каждый из них написан на строго
типизированном языке C/C++, называемом
GLSL (GL Shader Language).
Шейдеры в WebGL – это небольшие
программы, которые выполняются на графическом процессоре и обрабатывают данные, необходимые для визуализации некоторых вещей. Шейдер может быть рассмотрен в простой форме, как стадия обработки
на графическом процессоре. Он принимает
набор входных данных, над которыми вы
можете делать множество операции, и возвращает их обратно. Обычно, при визуализации чего-либо в WebGL данные передаются сначала через вершинные шейдеры, а
затем через фрагментные (пиксельные)
шейдеры.
Вершинные шейдеры отвечают за выполнение операций над вершинами. Более
конкретно, каждое выполнение программы
действует ровно на одну вершину. Это важная для понимания концепция. Все, что вы
делаете в таком шейдере, происходит только ровно с одной вершиной.
Шейдер заменяет часть графического
конвейера, выполняющего преобразования,
связанные с данными вершин, такими как
умножение вершин и нормалей на матрицу
проекции и моделирования, установка цветов вершин, установка материалов освещения. Он работает для каждой отрисованной
вершины. Обязательной работой для вершинного шейдера является запись позиции
вершины, во встроенную переменную
gl_Роsition.
Задача фрагментного шейдера – заменить часть графического конвейера (ГК),
обрабатывая каждый полученный на предыдущих стадиях ГК фрагмент (не пиксель).
Обработка может включать такие стадии,
как получение данных из текстуры, просчет
освещения, просчет смешивания. Обязательной работой для фрагментного шейдера
является запись цвета фрагмента во встроенную переменную gl_FragColor или его отбрасывания специальной командой discard.
В случае отбрасывания фрагмента никакие
расчеты дальше с ним производиться не будут, и фрагмент уже не попадет в буфер
кадра.
X3DOM
X3DOM (произносится как «XFreedom») – это среда JavaScript с открытым
исходным кодом, используемая для создания декларативных трехмерных сцен на вебстраницах. Поскольку он основан на стандартной технологии браузера, браузеру не
требуется никаких подключаемых модулей
для отображения сцен X3DOM. В двух словах, декларативная концепция 3D означает,
что вы можете создавать и отображать интерактивную 3D-сцену, используя структурированное текстовое представление, а не
писать код. В случае X3DOM это текстовое
представление является частью HTMLдокумента, представляющего веб-страницу.
Таким образом, 3D-контент становится первоклассным гражданином внутри вебстраницы, так же как текст, ссылки, изображения или фильмы.
Название X3DOM состоит из двух общеизвестных сокращений. Первый – X3D
(«Расширяемая трехмерная графика»), который обозначает бесплатный стандарт ISO
Г. Н. Вер хотурова, А. В. Кисел ев? Технологии 3D графики в web-приложениях 101
…
для декларативной трехмерной графики.
Вторая аббревиатура – DOM («объектная
модель документа»), которая описывает
концепции взаимодействия и иерархические
представления, связанные с содержимым
HTML-документов. В X3DOM специальное
подмножество X3D (так называемый профиль HTML) служит языком описания
трехмерного содержимого внутри вебстраницы. Элементами X3D (OM) можно
управлять с помощью операций DOM, как и
другими элементами HTML. Например,
можно динамически изменять цвет 3Dобъекта с помощью вызова JavaScript для
setAttribute(...) на соответствующем элементе DOM точно так же, как вы бы динамически изменяли, например, текст метки внутри общей веб-страницы.
Использование X3DOM вместо других
браузерных 3D-библиотек или X3D-плееров
имеет ряд преимуществ:
– Для отображения сцен X3DOM не требуется плагин – X3DOM основан исключительно на стандартной технологии браузера,
такой как HTML5 и WebGL.
– Основанный на новом профиле HTML
стандарта ISO X3D, большие части X3DOM
соответствуют стандарту. Это значительно
облегчает не только изучение X3DOM, но и
обмен контентом X3DOM.
– С момента начала разработки в 2009
году пользователи и разработчики X3DOM
стали большим жизненно важным сообществом.
– Если разработчик знает, как создавать
простые веб-страницы, он может использовать свои существующие знания о HTML и
DOM вместо изучения нового API программирования.
Компоненты X3D, которые используются в X3DOM, были тщательно отобраны,
чтобы предоставить подходящее подмножество X3D, которое соответствует потребностям современных приложений HTML. Создатели X3DOM сделали это, определив
специальный профиль, который называется
HTML-профилем. Этот HTML-профиль
также содержит некоторые экспериментальные узлы и поля, которые, на самом деле, не являются частью стандарта X3D, но
были, в первую очередь, разработаны для
использования с X3DOM. Конкретно говоря, для разработчика это означает, что могут
быть некоторые узлы X3D, которые не реализованы в X3DOM, в то время как есть
другие узлы, которые доступны только в
X3DOM, но не в X3D.
Наконец, X3DOM даже предоставляет
реализации некоторых узлов X3D, которые
не являются частью исходного профиля
HTML. Однако эти узлы не входят в стандартный выпуск X3DOM, а только в выпуск
X3DOM-Full [5].
X3DOM предназначен для интеграции с
DOM и поэтому может быть изменен таким
же образом, как и любой объект DOM.
Например, если программист хотел изменить положение фигуры во время выполнения (например, в ответ на ввод пользователя), то атрибут перевода тега <transform>
может быть изменен во время выполнения с
использованием Javascript. Сцена будет обновляться соответствующим образом.
3D-модели могут быть загружены в
X3D/X3DOM, определяя геометрию вершины, как в приведенном ранее примере, или
импортируя сцену X3D (или VRML), определенную в отдельном файле. Этот файл
сцены может быть закодирован вручную,
а для сложных объектов и сцен он может
быть создан с использованием пользовательских модулей экспорта для создания
3D-контента (DCC) (таких, как Blender,
Autodesk Maya и Autodesk 3D Studio Max).
Основное затенение (например, диффузное или зеркальное) поддерживается декларативно. Пользовательские шейдеры поддерживаются через узел ComposedShader;
это позволяет программисту написать свой
собственный код шейдера. Позднее были
введены несколько методов навигации камеры, которые определяют узел точки обзора и несколько различных шаблонов навигации (определение пользовательской навигации камеры также поддерживается посредством манипуляции эквивалентным
узлом DOM, например с помощью
Javascript). Также была представлена простая анимация объектов, либо с помощью
CSS-преобразований и анимацией, либо с
помощью интерполяторов X3D.
На рис. 2 представлен код, который визуализирует куб размером в сцене
500?400.