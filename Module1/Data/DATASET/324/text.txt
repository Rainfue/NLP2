Большинство уязвимостей возникают из-за недостаточной фильтрации
пользовательского ввода в систему, например XSS, SQLi, SSTI и другие. Лучшим способом
фильтрации является проверка пользовательского ввода на соответствие разрешенному
формату (whitelist).
Разработчикам рекомендуется использовать библиотеку validator, имеющее
большое количество встроенных форматов для проверки.Во многих случаях фильтрации пользовательского ввода может быть
недостаточно, так как данные, возвращаемые на страницу пользователю, могут быть
получены из других систем, например при наличии в приложении oAuth.В таких случаях следует дополнительно фильтровать данные перед подстановкой
на страницу при помощи библиотеки node-esapi, для защиты от атак типа XSS.
Перебор методом грубой силы является частой угрозой для большинства webприложений. Если атакующий может перебирать пароли, высок шанс компрометации
аккаунтов пользователей.
В качестве защиты от перебора рекомендуется использовать библиотеку Expressbouncer. Она увеличивает время задержки между ответами после каждой неудачной
попытки входа, делая тем самым атаку на перебор методом грубой силы слишком
трудозатратной.Авторизация должна ограничивать пользователям права на совершение
действий не входящих в их ролевую модель. Для достижения этой цели, пользователи и
их роли должны определяться с учетом принципа наименьших привилегий. У каждого
пользователя должен быть доступ только к тем ресурсам, которые он должен
использовать.
Рекомендуется использовать библиотеку acl для внедрения списков контроля
доступа. Используя эту библиотеку, можно создавать роли и назначать их пользователям. Обработка и буферизация тела HTTP запроса, может быть трудоемкой задачей.
При отсутствии лимитов на размер запроса, атакующий может потенциально исчерпать
ресурсы сервера, например заполнить оперативную память или жесткий диск. Для
ограничения размера запроса рекомендуется использовать библиотеку raw-bodyПримеры основных атрибутов:
 httpOnly
Флаг httpOnly делает куку недоступной в контексте JavaScript в браузере, что
помогает защититься от ряда последствий XSS атак. [1]
 secure
Флаг secure сообщает браузеру, что куку можно передавать только при работе по
защищенному HTTPS соединению, что позволяет защититься от ряда последствий атак
типа Man-in-the-Middle. [1]
 sameSite
Флаг sameSite определяет как должен быть инициирован запрос, чтобы значение
куки было передано в нем, что позволяет полностью защититься от атак типа CSRF и
делает использование CSRF токенов ненужным. [1]
NodeJS является современным языком с богатой функциональностью и при
разработке приложений на нем стоит опираться не только на общеизвестные паттерны
программирования для безопасной разработки, но и на специфику языка, чтобы
максимально полностью покрыть потенциальную область атак.