На сегодняшний день сферы науки об искусственном интеллекте и
больших данных, машинном обучении реализуются на традиционных языках
программирования, ориентированных на прикладную часть работы с
данными, такие как Python. Зачастую программы, написанные на таких языках
для работы с машинным обучением, выполняются на удаленных серверах или
мощных вычислительных системах, это обуславливается требованием к
вычислениям с участием многоядерных процессоров и GPU. Это способствует
удобству к обработке огромных объемов данных, необходимых для обучения
нейронных сетей. Однако, при завершении обучения модели нейронной сети,
ее надо где-то развернуть, чтобы испытать на реальных данных, либо чтобы
пустить в продуктивную среду. Для этого могут служить различные вебприложения со страничками в браузере, мобильные приложения, десктопные
программы.
За последние несколько лет веб-технологии сильно повлияли на мир IT.
Они применяются везде, даже десктопные приложения пишутся с ориентиром
на клиент-серверное взаимодействие, с возможностью повторить функционал
приложения в браузере. Браузер – основное средство доступа пользователя в
интернет, именно в нем пользователь проводит большую часть своего
времени, выполняя повседневную работу. Браузеры дают более широкий
охват аудитории, что делает развертывание нейронных сетей внутри них более
продуктивным для проверки обученных моделей на реальных данных. В
дополнение к этому браузеры могут предоставлять для моделей нейронных
сетей различные виды данных: текстовые данные, картинки, аудиоданные,
видеоданные.
JavaScript – основной язык программирования, используемый для
работы браузерного кода. Программы на JavaScript встраиваются в HTML и
выполняются автоматически. Ключевой особенностью языка является то, что
скриптам не нужна специальная подготовка препроцессора или компиляция,
они запускаются на встроенных в браузеры движках, которые берут на себя
процесс интерпретации и компиляции, выполняя это во время работы
страницы в браузере. В дополнение можно добавить, что язык JavaScript прост
для восприятия и лёгок в использовании и поддерживается всеми
существующими браузерами.
Использование языка JavaScript для глубокого обучения сможет
предоставить:
- Наличие большого количества сторонних библиотек и фреймворков –
для языка JavaScript написано большое множество библиотек, которые
помогут работать с нейронными сетями: начиная с обработки данных, их
загрузке и подготовке, визуальном представлении, заканчивая
использованием графических мощностей для обучения моделей.
- Простоту развертывания обученной модели и ее использование – с
помощью библиотек для работы с машинным обучением, создание, обучение,
и развертывание модели представляют собой простой алгоритм по
взаимодействию с API данных библиотек.
- Защиту персональных данных – поскольку данные не отправляются на
удаленный сервер, то они остаются на клиентской части у пользователя, что
позволяет сохранить конфиденциальность. Это становится критично важно
когда речь идет о работе с персональными данными. Например, нейронные
сети в медицине работают с личной информацией о пациентах и их историей
болезней, что подвергается врачебной тайне.
- Мультиплатформенность – язык JavaScript может работать не только в
браузерах, он позволяет создавать серверные и десктопные приложения с
помощью Node.js, мобильные приложения. Для таких приложений куда проще
становится писать пользовательский интерфейс, используя уже знакомые вебтехнологии.
- Снижение затрат на серверы – при развертывании модели на
клиентской части можно значительно сэкономить на вычислительных
ресурсах сервера, которые обязательно должны быть снабжены графическими
ускорителями.
- Снижение времени ожидания вывода – при упомянутом выше
развертывании модели на сервере, создается дополнительная задержка,
необходимая для установки связи с сервером, а при больших объемах данных
эта задержка может становится неприемлемо большой. Сюда стоит еще
включить шанс возникновения неполадок связи в сети, а также расход
трафика. Все это можно избежать, если весь ввод и вывод данных в модель
выполнять на стороне клиента, а некоторые нейронные сети, требующие
выполнения в реальном времени могут располагаться только на клиентской
части.;
- Процветающую экосистему и множество приложений как на
клиентской, так и на серверной стороне – уже длительное время язык
JavaScript является одним из самых популярных языков программирования.
По состоянию на январь 2023 количество пакетов в системе управления
пакетов npm (которая работает с JavaScript) насчитывает около 2,3 млн. На
языке JavaScript реализовано множество разных библиотек, позволяющих
получать данные из облачных хранилищ больших компаний, работать с
базами данных, визуализировать процессы обучения и обработку данных и т.д.
Библиотеки для создания и обучения нейронных сетей очень сильно
упрощают их разработку, и без них невозможен бы был такой скачок роста
популярности глубокого обучения. Внутри них реализована вся сложная и
громоздкая математика, которая находится «под капотом» у нейронных сетей,
написаны низкоуровневые функции для произведения вычислений,
распараллеливание их на графическом процессоре. Без таких библиотек
создание нейронных сетей сейчас было бы просто тяжелым, а в какой-то
степени и невозможным занятием. Для языка JavaScript тоже существуют
такие библиотеки, которые позволяют проводить полную работу с
нейронными сетями: начиная с создания модели и ее тренировки, заканчивая
развертыванием модели в каком-либо приложении.
Самая популярная из таких - TensorFlow.js. TensorFlow.js – в какой-то
степени производная от «родительской» библиотеки TensorFlow, написанной
для языка Python, которая сейчас применяется для широкого спектра
промышленных приложений и исследовательских проектов. Название
TensorFlow отражает происходящее внутри программы, написанной на основе
этого фреймворка – проход тензоров через слои модели. Фреймворк сделан
очень универсальным и гибким, он позволяет производить множество
операций над самими моделями, так и над тензорами, включая
низкоуровневые задачи. Для высокоуровневой работы с нейронными сетями в
TensorFlow служит API Keras. Keras дает возможность связывать слои в
нейронные сети, задавать нюансы обучения, подавать данные для обучения
или оценки работы нейронной сети, отслеживать процесс обучения, сохранять
загружать модели. При использовании Keras для реализации глубокого
обучения хватает всего нескольких строк кода. Благодаря Keras создание
нейронных сетей стало доступно гораздо большему числу разработчиков,
ввиду сокращения требуемых навыков и усилий для глубокого обучения.
Однако реализовывать обученные модели на Keras невозможно
непосредственно в браузере, для этого требовалось подключать серверную
часть и выполнять HTTP-запросы, а также писать для всего процесса свою
инфраструктуру, что увеличивало затраты. TensorFlow.js призван устранить
эту проблему, ведь язык JavaScript выполняется внутри браузера, что
устраняет необходимость в лишних серверных ресурсах.
Эти и другие преимущества делают язык JS для создания нейронных
сетей простым в освоении и универсальным инструментом. Однако, из
соображений безопасности и быстродействия, браузеры представляют собой
среды с ограничением ресурсов, в частности объема доступной им
оперативной и дисковой памяти, что делает браузер не идеальной средой для
обучения больших моделей. Node.js – программная платформа, основанная на
движке V8 (на котором работает JS в браузере), превращает язык JavaScript в
язык общего назначения и позволяет ему работать с устройствами ввода-
вывода, оперативной памятью и подключать внешние библиотеки,
написанные на других языках. Node.js полностью решает проблемы
браузерного JS в рамках машинного обучения, предоставляя доступ к
файловой системе и оперативной памяти. Для работы с Node.js у TensorFlow
существует библиотека tfjs-node. Использование tfjs-node для обучения
нейронных сетей сравнимо со скоростью Keras в Python. Более того, Node.js
имеет ряд преимуществ в производительности перед интерпретатором языка
Python; Node.js является очень популярной средой для создания серверных и
десктопных приложений, что делает очень простой возможность интеграции
машинного обучения в уже написанные сервисы и приложения. Наконец, код
написанный на TensorFlow.js будет работать как в браузере, так и в среде
Node.js (кроме моментов загрузки/выгрузки данных и доступа к ОЗУ).
TensorFlow.js не единственная JS-библиотека для глубокого обучения,
но она имеет ряд преимуществ перед остальными:
- востребованность;
- обеспечение вывода и обучения;
- поддержка браузеров и Node.js;
- использование GPU-ускорения;
- поддержка преобразования моделей из фреймворков на Python;
- внутренняя поддержка ввода/обработки данных;
- тесная интеграция с Keras, что позволяет полноценно использовать
возможности фреймворка.
Пример кода с созданием модели нейронной сети на JavaScript с
помощью библиотеки TensorFlow.js показан на рисунке 1. Как видно из
рисунка, реализация модели нейронной сети не сильно отличается от
подобной на Python: создать модель, выбрав метод из API; с помощью одного
метода add можно добавлять слои к нейронной сети, и методом compile
собрать модель.