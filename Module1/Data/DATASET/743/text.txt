На сегодняшний день, во времена активной разработки веб-приложений все чаще
появляются ситуации, когда собственных инструментов фреймворка становится
недостаточно. Появляются сторонние, новые решения, позволяющие сделать в несколько
строк кода то, что силами фреймворка реализовывалось бы в несколько сотен строк кода.
Это значительно упрощает процесс разработки и позволяет разработчикам вместо того,
чтобы каждый раз заново «придумывать велосипед» сосредоточиться непосредственно на
поставленной им задаче и использовав уже готовые, обкатанные решения. В данном
случае речь пойдет о сторонних библиотеках для облегчения администрирования
состояний компонентов, именованных как менеджеры управления состояний. Они
позволяют быстро создавать глобальные состояния для компонентов, доступ к которым
можно получить из любой части веб-приложения, контролировать их поведение,
использовать уже готовые методы для взаимодействия с ними [1].
Цель исследования, представленного в статье, состоит в анализе, эксперименте и
выборе решения для управления состоянием компонентов на примере фреймворка React.
МАТЕРИАЛЫ И МЕТОДЫ
Поскольку на текущий момент существует довольно много библиотек для
управления состоянием имеет смысл не рассматривать каждую, а взять наиболее
популярные и перспективные решения. Таковыми на сегодняшний день являются Redux и
MobX. Redux – один из первооткрывателей в области управления состояний, который
остается во внимании многих разработчиков и по сей день [2, 3]. С его использованием
написано достаточно много решений в мире веб-разработки, чтобы не оставлять его за
пределом исследования. MobX – достаточно известное минимизированное решение в
управлении состояниями компонентов в React, завоевавшее свою славу тем, что одним из
первых предоставил краткое, лаконичное решение в работе с состояниями компонентов,
что позволяет ему находиться в топе среди менеджеров управления состояниями в React и
по сей день [2, 4]. В отличии от Redux представляет собой не экосистему дополнительных
библиотек для разных задач, а отдельное полностью обособленное решение для
администрирования состояний компонентов.
В качестве эксперимента предлагается протестировать время, за которое компонент
прорендерится 100 000 раз. Условия рендеринга для чистоты эксперимента будут
одинаковыми, каждая библиотека будет работать с одним и тем же приложением, с одним
и тем же вызовом. Возможность оптимизации в расчет не берется, поскольку главная цель
эксперимента сравнить стандартные возможности менеджеров управления событий.
Приложение представляет собой своеобразный счетчик баланса, в котором можно
добавить, убавить или полностью обнулить баланс (рисунок 1).
Рисунок 1 – Приложение для эксперимента
32
Процесс тестирования состоит в том, что операция добавления выполняется 100
000 раз, а хранение и обработка состояния компонента отрисовки баланса полностью
ложится на плечи вышеупомянутых менеджеров управления состояний.
Замер времени рендеринга проводится с помощью встроенного в язык JavaScript (а
также в TypeScript) интерфейса Performance (рисунок 2) [5, 6].
Рисунок 2 – Тестирование времени рендеринга компонента
Функция взаимодействия с состоянием вызывается одинаково внутри цикла для
каждого из трех менеджеров управления состояний. Это позволяет определить
стандартные возможности библиотек, без какой-либо оптимизации.
РЕЗУЛЬТАТЫ
Результаты замеров для Redux при 100 000 рендерингов компонента представлены
в таблице 1.
Таблица 1 – Результаты замеров для Redux при 100 000 рендерингов
100 000 рендерингов (мс)
Десятки
Единицы
1 2 3 4 5 6 7 8 9 10
10 121 92 90 93 90 101 94 90 95 93
20 103 91 93 89 95 94 101 93 102 93
30 94 92 93 108 94 93 91 101 96 92
Среднее значение равно 95,56 мс.
Результаты замеров для MobX при 100 000 рендерингов компонента представлены
в таблице 2.
Таблица 2 – Результаты замеров для MobX при 100 000 рендерингов
100 000 рендерингов (мс)
Десятки
Единицы
1 2 3 4 5 6 7 8 9 10
10 51 41 40 36 40 37 36 48 38 35
20 40 35 37 36 45 39 43 35 40 37
30 38 35 36 38 40 48 35 36 37 35
Среднее значение равно 38,9 мс. Что при стандартных настройках почти в два раза
быстрее по сравнению с Redux.
Результаты данного эксперимента показывают, что MobX быстрее своего
оппонента в равных условиях, при настройке «по умолчанию», однако равнозначно
говорить о том, что MobX может полностью заменить Redux нельзя. У них совершенно
разный подход к хранению состояния, разное отношение к мутабельности состояния, к
тому же нельзя исключить возможность дополнительной оптимизации. Выбор менеджера
«Научно-технические инновации и веб-технологии»№ 2/22 33
управления состояний должен обуславливаться прежде всего требованиями к проекту и
личным предпочтениям разработчиков. И результаты данной работы должны помочь с
этим выбором.
ЗАКЛЮЧЕНИЕ
В ходе проведенного эксперимента с помощью, встроенного в язык JavaScript (и
TypeScript) инструмента тестирования Performance произведены измерения времени
рендеринга компонентов при использовании наиболее известных решений в области
управления состояний. Измерения проводились при стандартных настройках библиотек,
в одинаковых условиях, для одного и того же приложения. По результатам эксперимента,
лидирующее положение занял менеджер управления состоянием MobX.
Статья носит рекомендательный характер, и описанные в ней методы представлены
для осознанного выбора разработчика.