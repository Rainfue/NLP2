Перед тем как выполнять регулярный анализ веток необходимо провести
первоначальное сканирование главной ветки, иначе SonarQube [1] не с чем будет
сравнивать код в ветках. Это будет описано в статье ниже. Статический анализ может
запускать любой пользователь, который имеет права Execute Analysis.
Возможность выполнения анализа SonarQube с помощью цели Maven [2] делает
его доступным в любом месте, где доступен Maven (компьютер разработчика, сервер с CI
и т.д.), без необходимости вручную загружать, настраивать и поддерживать установку
SonarQube Runner. Сборка Maven уже содержит большую часть информации,
необходимой SonarQube для успешного анализа проекта. Благодаря предварительной
настройке анализа на основе этой информации значительно сокращается необходимость
в настройке ручным способом. Подключается данный плагин в соответствии с
инструкцией c официального сайта – необходимо в «settings.xml» добавить информацию
о Maven профиле и настройках Sonar (рисунок 1). Анализ проекта Maven состоит в
запуске цели «sonar:sonar» из директории, в которой содержится основной проект и в
частности pom.xml. Нам необходимо передать токен аутентификации из командной строки, используя
специальное свойство «sonar.login», предварительно создав этот токен в настройках
профиля на сервере Sonar. Рекомендуется зафиксировать версию плагина в pom.xml
(рисунок 2). Также можно обратить внимание на список параметров, которые можно
передать в Sonar, и то, что часть из них для Maven рассчитывается автоматически, на
основании нашего pom.xml (например, sonar.projectKey). Если требуется, эти параметры
можно указать в явном виде, передав через -D или указав в pom.xml в properties. Пример
команды, которая вызывается для анализа проекта: «mvn clean verify sonar:sonar -
Dsonar.login=26g…r1a -Dsonar.projectKey=TEST -Dsonar.projectName=test -
Dsonar.branch.name=develop». Что касается Jenkins Pipeline Script (рисунок 3), блок withSonarQubeEnv из состава
плагина SonarScanner for Jenkins [3] позволяет выбрать сервер SonarQube, который будет
проводить сканирование. Сведения о соединении, настроенные в глобальной
конфигурации Jenkins [4], будут автоматически переданы сканеру. В примере выше выбран
сервер SonarQube, в качестве credentials для подключения выбран sonar_credentials,
который содержит токен, созданный на первом шаге. Переменная baseCommit
предназначена для хранения последнего коммита вливаемой ветки, она нужна в том
случае, если анализируется код, полученный в результате выполнения операции Pull
Request. По наличию переменной CHANGE_ID мы определяем что происходит сборка
содержимого Pull Request – в этом случае рекомендуется передавать параметры
sonar.pullrequest, тогда SonarQube воспримет наш код именно как Pull Request, а не как
Short-Live Branch. Это позволит использовать функционал Pull Request Decoration [5]. Для
Maven проектов параметр projectKey высчитывается как <groupId>:<artifactId>. При
желании его и другие параметры сканирования можно передавать в параметрах вызова -
Dsonar.projectKey=XXX или задавать в pom.xml.Таким образом, как можно увидеть на рисунке 5, успешно выполняется анализ
проекта. Он позволяет выявить потенциальные ошибки, нарушение стандартов
кодирования, дублирование кода, недостаточное покрытие модульными тестами, плохое
распределение сложности, «спагетти-дизайн» (плохо спроектированный, слабо
структурированный, запутанный и трудный для понимания разработчиком код),
недостаточноcть или многочисленность комментариев. 