Стремительное развитие информационных технологий позволяет с каждым
годом всё больше автоматизировать различные производственные процессы. В связи с потребностью внедрения в программы новых функциональных возможностей повышается риск
возникновения ошибок, что обусловливается усложнением программного кода, которые со
временем становится труднее поддерживать разработчикам. Нередко дефекты не выявляются
на этапе разработки, а присутствуют в выпущенных версиях программных продуктов. В та-ком случае ошибки выявляются уже в процессе использования программы пользователями,
что может с большей долей вероятности привести к тому, что рабочие процессы будут приостановлены до момента исправления ошибки, то есть на неопределённый срок, поскольку
может потребоваться большое количество модификаций [1].
Поэтому для повышения качества программ [2] следует использовать существующие
или создавать новые механизмы, которые позволяют находить ошибки ещё на этапе разработки, а не уже при применении программ пользователями.
К существенным ошибкам, которые значительно влияют на работоспособность программ, относятся ошибки несоответствия типов.
Проблемы, связанные с типами, могут возникать в любом типизированном языке программирования, но процесс выявления ошибок отличается в языках статической и динамической типизациями. Так, в языках программирования со статической типизацией, например,
Java и С++, ошибки несоответствия типов выявляются на этапе компиляции [3, с. 7]. Благодаря этому ошибки исправляются в процессе разработки. В свою очередь, для языков программирования с динамической типизацией, к которым относятся, к примеру, JavaScript,
Python и 1С, ошибки могут быть выявлены только в процессе работы программы.
Для того чтобы отслеживать ошибки динамической типизации, следует внедрять механизмы, поддерживающие статический анализ программного кода, при котором ошибки
несоответствия типов будут выявляться до момента запуска программы [4, 5].
В настоящий момент особый интерес с точки зрения контроля несоответствия типов
представляет язык программирования JavaScript, который активно применяется для создания
веб-приложений различной степени сложности. Чтобы находить ошибки в программном коде на JavaScript, существуют такие инструменты, как JsLint [6] и Closure Compiler [7]. Для
платформы Node.js [8], которая позволяет разрабатывать серверные части веб-приложений,
находят применение JsHint [9] и Nest.js [10].
JSHint является инструментом статического анализа программного кода, который показывает предупреждения в тех местах, где присутствует неявное преобразование, неверное
обращение к свойству, а также другие ошибки синтаксиса.
Nest.js является полноценным фреймворком, реализованным на языке программирования TypeScript. Помимо нахождения ошибок несоответствия типов, Nest.js обеспечивает
приложение удобной и хорошо поддерживающейся архитектурой. В связи с преимуществами фреймворка его уместно внедрить в уже существующее приложение, чтобы избежать в
дальнейшем ошибок типизации и при этом поддержать высокое качество программного кода
благодаря имеющимся архитектурным решениями в Nest.js [11].В настоящий момент
актуальной является разработка проекта «Расписание ИГУ» для представления расписания в
электронном формате [12] для Иркутского государственного университета (ИГУ). Серверная
часть проекта создаётся при помощи фреймворка Node.js. Поскольку система предназначается для большого количества пользователей, а также предполагает сложную обработку данных, было решено внедрить в проект фреймворк Nest.js для дополнительных проверок параметров API, выявления ошибок несоответствия типов, а также устранения архитектурных
недочётов, которые были выявлены в процессе разработки проекта.
Существенными недостатками архитектуры проекта «Расписание ИГУ» являлась высокая степень вложенности программного кода, а также отсутствие проверок типов, что могло
бы привести к неоднозначному поведению в процессе эксплуатации системы. Важно отметить, что ошибки несоответствия типов можно с высокой долей вероятности избежать только
в случае, если для всех фрагментов программного кода написаны тестовые наборы данных,
которые запускаются после каждой итерации разработки. Но поскольку Nest.js решает не
только проблему динамической типизации, но и поддерживает практику соблюдения принципов качественного построения архитектуры, внедрение такого механизма стало лучшим
решением, которое существенным образом повлияло на удобство поддержки и развития проекта. В информационной системе «Расписание ИГУ» имелись следующие недостатки:
 ошибки несоответствия типов: опечатки, ошибки приведения типов;
 архитектура информационной системы на динамически типизированном языке программирования, препятствующая развитию проекта.
Поскольку было решено устранить ошибки несоответствия типов, было необходимо
выбрать релевантные поставленной задаче инструменты, главным из которых стал фреймворк Nest.js. Вместе с решением основной проблемы несоответствия типов, данный инструмент предлагает ряд архитектурных решений, позволяющих проектировать более гибкие информационные системы.
Nest.js поддерживает язык программирования TypeScript, вместе с тем, реализует модульную архитектуру, а благодаря мощному слою абстракции, позволяет внедрять уже готовые решения в виде отдельных модулей.
В современных версиях языков программирования JavaScript и TypeScript существует
возможность использования декораторов — функций, позволяющих добавить некоторое поведение другим объектам (функции и методы классов тоже являются объектами). Этот инструмент активно используется в фреймворке Nest.js и интегрированных модулях и реализует декларативный стиль программирования. Список основных библиотек, использованных в
проекте:
 Swagger для документирования API [13],
 Sequelize [14],
 Passport [15].