Создание качественного программного обеспечения, которое обладает высокой степенью отказоустойчивости при различных факторах, является непростой задачей для разработчиков. К одной из проблем, которая существенно влияет на качество программ, относится несоответствие типов конструкций в динамически типизированных языках программирования. В связи с этим создаются и внедряются инструменты, которые позволяют устранять немалое количество ошибок типизации на этапе разработки. Проблема несоответствия типов также актуальна для веб-приложений, которые нашли широкое применение для решения повседневных задач пользователей в различных сферах деятельности. На текущий момент особо популярным языком программирования для создания как серверной, так и клиентской части веб-приложений является JavaScript. Несмотря на удобство использования и высокую скорость разработки благодаря этому языку программирования, присутствующие проблемы динамической типизации, которые не всегда может отследить разработчик, существенно затрудняют использование созданных веб-приложений. Это связано с высокой вероятностью возникновения ошибок во время работы программы, что способно нарушить целостность данных и остановить рабочие процессы. В данной работе описывается процесс внедрения фреймворка Nest.js, поддерживающего статически типизированных язык программирования TypeScript, в серверную часть веб-приложения, которая реализована на платформе Node.js. Перечисляются виды ошибок, которые были найдены в результате внедрения Nest.js