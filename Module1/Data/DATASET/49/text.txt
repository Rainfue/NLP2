В условиях цифровой трансформации экономики и роста 
внимания бизнеса к программным продуктам, особенно 
актуализировались вопросы подготовки специалистов для 
удовлетворения существующих запросов и выбора соответствующих 
языков программирования в целях разработки собственных 
программных продуктов и приложений. Однако сегодня возможности 
разработки программного обеспечения отчасти ограничиваются в 
зависимости от выбранного языка программирования, поскольку он 
определяет значительный круг ограничений при разработке 
приложений и серверного инструментария, оказывает 
непосредственное влияние на оптимизацию приложений. 
Актуальность приобретают противоречия, возникающие между 
эффективным использованием существующего функционала языка, 
его совершенствованием и поддержкой со стороны разработчиков, 
масштабированием проектов в будущем, переносом данных из одной 
системы в другую, а также параллельным вхождением на рынок 
многих других языков программирования, удовлетворения тех задач, 
которые развертываются в конкретных целях использования 
выбранного языка. Реализация программных проектов значительно 
осложняется ввиду отсутствия среди пользователей и компаний 
четкого понимания преимуществ и возможностей использования 
отдельных языков программирования на фоне других, что особенно 
актуально в части Backend разработки. 
Актуальность исследования вопросов использования языка 
PHP в целях разработки Backend части приложения обуславливается 
тем, что PHP, являясь одним из наиболее распространенных языков 
для программирования имеет достаточно обширный потенциал, 
который может быть раскрыт при реализации программных задач 
Backend-разработчиком. От выбора языка программирования Backend 
части приложения определяется доступность и эффективность 
использования его функционала, будущая работоспособность 
приложения. В связи с этим, особое внимание стоит уделять 
существующим возможностям и ограничениям использования 
конкретного языка для разработки программной архитектуры. 
Цель работы – описать возможности использования PHP для 
создания Backend части приложения и сравнить их с другими языками 
для программирования. 
Для достижения поставленной цели исследования 
предполагается реализация ряда задач: 
1. Раскрытие сущности и назначения Backend разработки 
приложения. 
2. Определение наиболее распространенных языков Backend 
разработки приложения и их сравнительный анализ. 
3. Уточнение направлений использования PHP для создания 
Backend части приложения. 
Исследование основано на открытых публикационных 
источниках: научных исследованиях отечественных авторов и данных 
СМИ. В работе мы опираемся на методы теоретического 
исследования, среди которых анализ, синтез, сравнение, обобщение, 
сопоставление, дедуктивный и индуктивный методы. 
В современной научной практике вопросы выбора языка 
программирования остаются малоизученными и обобщенными. Как 
правило, авторы исследований фокусируются на рассмотрении 
отдельных языков, их возможностей и преимуществ, в отрыве от 
выполнения конкретных задач. Мы предполагаем, что фокусирование 
на узком круге вопросов разработки закладывается в основу более 
сглаженного и эффективного выбора языка программирования. 
Согласимся с мнением О.А. Третьякова и Е.В. Федоркевич, 
считающих, что выбор первого языка для программирования 
определяет дальнейшие траектории роста специалиста и влияет на его 
готовность к изучению других как схожих, так и в значительной 
степени отличных языков программирования. Авторы определяют, 
что PHP наряду с 1С, VBA и др. языками используется, как правило, в 
целях реализации узконаправленных задач, ввиду чего его выбор не 
всегда обуславливается объективными потребностями в обучении [1]. 
Иными словами, универсальность PHP на фоне других языков, 
например Java, C++, Python и др., обуславливает возможности его 
более эффективного применения в узком круге специальных задач. 
Аналогичная точка зрения встречается в работе А.В. Пахунова, 
замечающего, что при выборе языка программирования важно 
учитывать обширную систему обстоятельств, среди которых: 
конечное назначение разрабатываемого программного обеспечения и 
планируемое время его использования, необходимость обновления, 
конечная скорость работы, вычислительные возможности, размер 
программы (единая структура, модульная структура), количество 
выделяемой памяти, необходимость объединения приложения с 
другими программами, типы данных для взаимодействия, связанность 
с периферийными устройствами, и др [2]. Иными словами, на выбор 
языка программирования влияет обширное число факторов, 
первичным из которых становится определение решаемой при 
программировании задачи. Как правило, опытный разработчик 
способен самостоятельно определить наиболее подходящий для него 
и для текущей задачи язык программирования, однако несмотря на это 
важно понимать, в каких задачах и типовых операциях выбранный 
язык программирования покажет наибольшую эффективность и 
результативность, приведет к максимальному удовлетворению 
требований заказчика. 
Примечательным в контексте заявленных суждений 
становится исследование Н.А. Борсук и О.О. Козеевой, которые на 
примере сравнения языков PHP и Python показали, как в зависимости 
от качества кода и выполняемых задач напрямую изменяется 
быстродействие приложений. По итогам исследования авторы 
приходят к выводу о том, что язык PHP в 3,5 раза быстрее выполняет 
поставленную задачу, однако при этом задействует в 1,5 раза больше 
мощностей памяти устройства [3]. Широкий опыт автора настоящего 
исследования в работе с PHP показывает, что он демонстрирует 
эффективные результаты в задачах, связанных с WEB-
программированием, Backend разработкой (выполнением операций на 
серверной стороне клиента, скрытой от пользователя) и других. М.В. 
Гурьянова и А.С. Аброскин также подчеркивают, что PHP является 
лидирующим из языков, использующихся для создания динамических 
веб-сайтов, поскольку включает в себя обширный встроенный 
инструментарий и достаточное число дополнительных модулей, 
обеспечивающих реализацию поставленных задач в 
программировании приложений [4]. 
П.П. Олейник в своем исследовании определяет обширную 
систему критериев выбора языка программирования для управления 
серверной стороной, приводя ряд оснований, среди которых: свойства 
языка программирования (интерфейсы, возможность создания 
объектов по имени класса, кроссплатформенность, управление 
модулями и динамическая компиляция когда), возможности 
управления базами данных (наличие классов доступа к базам данных, 
возможность параллельного выполнения запросов, в том числе 
динамических), сетевое взаимодействие (поддержка сетевых 
протоколов, передача объектов в рамках сетевого соединения, 
конфигурация настроек, активация сервера приложений) и 
многопоточность (возможность управления потоками и их 
синхронизации) [5]. Наиболее полно вопросы Backend разработки 
(разработка серверной части системы приложения) исследованы в 
работе И.В. Родыгиной и А.В. Наливайко, устанавливающих ряд 
возможностей и ограничений применения языка PHP. Авторы по 
итогам комплексного анализа пришли к выводу о том, что PHP 
позволяет писать как блокирующий, так и не блокирующий код, 
который в случае поступления обширного числа запросов потребует 
значительных серверных мощностей [6]. Результаты исследования 
авторов в целом коррелируются с вышеописанным сравнением 
быстродействия PHP с Python. 
Таким образом, литературный обзор показывает, что сегодня 
неизученными остаются вопросы объективной оценки достоинств и 
недостатков отдельных языков программирования при решения 
узкого круга задач, связанных с разработкой серверной части системы 
приложения (Backend разработка). Это определяет концептуальную 
значимость сравнения ряда языков, включая PHP, в целях 
объективного оценивания возможностей использования.
Разработка серверной части приложения (или Backend 
разработка) – это написание кода, запускающего операции, которые 
исполняются не на стороне клиента, а в скрытой форме, на сервере. 
Backend предполагает построение взаимодействия с базами данных, 
другими программными приложениями (API) и входящими потоками 
информации. И хотя пользователь осуществляет взаимодействие 
только с приложением, все его действия отражаются на серверной 
стороне, поскольку пользователь посылает достаточно объемное 
число пакетов информации, которые подвергаются процедурам 
обработки и последующего хранения, при распределении в базы 
данных. В связи с этим информация может сохраняться путем 
задействования не клиентских, а серверных мощностей и быть 
доступной с различных устройств. 
Несмотря на отводимый фокус в сторону Backend разработки, 
последняя неразрывно связывается с клиентской частью приложения, 
поскольку обрабатывает входящие запросы и реализует четыре 
типовых метода-операции: запрос, создание новой записи, обновление 
или удаление данных. Для корректной работы клиентской стороны 
необходимо создание развитой Backend архитектуры, что требует 
выбора необходимого языка программирования. Подчеркнем, что как 
правило языки программирования не используются в их 
первоначальном виде – большая часть разработчиков опирается на 
возможности использования фреймворков и библиотек, которые в 
значительной степени снижают времязатратность и сложность 
написания кода. Вместе с тем, при сравнении различных языков, 
будем опираться на описание их общих преимуществ, без привязки к 
фреймворкам и библиотекам. Сравнительная характеристика 
достоинств и недостатков языков Backend разработки представлена в 
таблице 1.
Обращаясь к таблице 1, подчеркнем, что каждый из 
представленных языков программирования имеет собственные 
достоинства и недостатки. Важнейшим фактором, предопределяющим 
использование PHP для Backend разработки становится его 
распространенность и постоянное развитие. Несмотря на наличие 
многих упущений, эффективность языка показывает высокие
значения, поскольку он демонстрирует отличное быстродействие, 
динамически типизируется, достаточно быстро настраивается. Ко 
всему прочему, как правило, ключевым фактором при выборе языка 
разработки становится стоимость конечных процедур: написания 
кода, подготовки, запуска приложения, тестирования и доработки. 
Благодаря легкой архитектуре, PHP значительно сокращает издержки 
компании на создание необходимых приложений и управление 
сервером; значительные возможности PHP представлены и его 
фреймворками, которые при выборе наиболее эффективного 
позволяют реализовывать более обширный спектр задач, в сравнение 
с другими языками программирования. 
В вопросах Backend разработки PHP обладает такими 
преимуществами, как [7, 8, 10, 11]: 
 интегрированность с обширным числом баз данных 
(MySQL, SQL Server, PostgresSQL и Oracle); 
 высокая доступность специализированных фреймворков, 
нацеленных на структуризацию кода, особое место среди них 
занимает Laravel framework, наиболее эффективно использующийся в 
Backend разработке; 
 постоянная обновляемость языка и совершенствование 
доступных функций; 
 высокая скорость и эффективность обработки входящих 
запросов; 
 динамическая типизация, с возможностью управления 
параметрами функции; 
 ориентация на процессы, а не потоки, что эффективно с 
позиции действия внутренних серверных алгоритмов; 
 наличие ряда важнейших серверных функций в версии без 
фреймворка, среди которых сбор данных из форм, возможность 
генерации динамических стран, обмен cookie-файлами (принятие и 
отправка), написание скриптов, реализация серверных сценариев, 
интегрированность со стационарными приложениями. 
Вместе с тем, при сравнении производительности PHP с 
другими языками программирования многие авторы указывают на 
ограниченность быстродействия (ввиду поточного, а не параллельного 
характера обработки запросов); данная проблема эффективно 
разрешается за счет некоторых доработок кода, при работе опытного
специалиста. Ввиду ориентированности PHP на Backend разработку, 
он становится одним из лучших вариантов написания кода. Как 
показывают сравнительные тесты, проведенные Б. Пибоди, скорость 
PHP высока в случае выполнения среднего количества 
одновременных запросов [12]. Опираясь на исследование автора, 
опишем быстродействие PHP на фоне других языков в Backend 
разработке (рис. 1-3).
Данные на рисунке 1 показывают, что скриптовые языки (со 
свободной типизацией, динамической интерпретацией) обладают 
более низкой скоростью ввода/вывода данных. При масштабировании 
итераций ситуация складывается несколько иным образом (рис. 2).
Обращаясь к рисунку 2, подчеркнем, что в случае выполнения 
большего количества запросов, ввиду оптимизированности, PHP 
показывает достаточно высокие результаты. Однако лучшим при 
подобных параметрах становится язык программирования Go. Для 
более детального сравнения скорости обработки запросов, произведем 
дополнительный тест (табл. 2).
Так, обращаясь к таблице 2, подчеркнем, что PHP 
действительно является перспективным языком для 
программирования, однако его выбор обуславливается конкретной 
задачей и квалификацией специалиста, а не скоростными 
параметрами. Учитывая обширные возможности и преимущества, 
использование PHP приобретает особые перспективы, особенно 
демонстрирующиеся в вопросах Backend разработки, где язык 
способен раскрыть максимальный потенциал. 
Таким образом, по результатам проведенного исследования 
возможностей использования PHP для создания Backend части 
приложения подчеркнем, что язык является достаточно 
перспективным и быстро действенным при работе с 
последовательными запросами или обработке среднего потока 
запросов. По мере увеличения нагрузки трафика быстродействие и 
эффективность PHP снижается, несмотря на это, данный язык может 
быть значительно оптимизирован. Нам удалось подчеркнуть, что в 
вопросах Backend разработки PHP обладает обширным числом 
преимуществ, среди которых: интегрированность с 
распространенными базами данных (MySQL, SQL Server, PostgresSQL 
и Oracle), доступность фреймворков, наличие поддержки языка от 
разработчиков, совершенствование функций, высокая скорость 
обработки последовательных запросов, наличие динамической 
типизации с возможностью управления параметрами функции, 
ориентированность на процессы, сбор данных из форм, возможность 
генерации динамических стран, обмен cookie-файлами (принятие и 
отправка), написание скриптов, реализация серверных сценариев, 
интегрированность со стационарными приложениями. Кроме того, 
ориентированность PHP исключительно на работу с серверной частью 
системы приложения наряду с обновляемостью языка отражает 
высокие перспективы его применения. Сегодня в результате выхода 
актуального обновления PHP 8 его быстродействие увеличивается – 
при правильно написанном коде PHP способен превзойти другие 
языки программирования, создавать безопасные серверные 
приложения. 
В дальнейшем результаты исследования могут быть 
использованы автором для проведения собственных сравнений PHP и 
других языков при выполнении схожих задач, приближенных к
реальным условиям. Теоретическая значимость исследования связана 
с обобщением и уточнением функциональных преимуществ PHP на 
фоне других языков, использующихся Backend разработчиками. 