Vue.js представляет собой современный прогрессивный фреймворк,
написанный на языке JavaScript и предназначенный для создания вебприложений клиентского уровня. Основная сфера применения данного
фреймворка – это создание и организация пользовательского интерфейса.
Первый релиз фреймворка увидел свет в феврале 2014 года. Его
создателем является Эван Ю (Evan You), который до этого работал в Google
над AngularJS. С тех пор фреймфорк динамично развивается, его текущей
версией является версия 2.5.17.
Официальный сайт фреймворка – https://vuejs.org/, где можно найти
непосредственно файлы фреймворка, а также сопроводительные материалы и
документацию. Кроме того, это проект с открытым исходным кодом. Он
доступен на github по адресу https://github.com/vuejs/vue.
Vue.js имеет довольно небольшой размер – не более 20 кБ, но при этом
обладает хорошей производительностью по сравнению с такими
фреймворками, как Angular или React. Поэтому неудивительно, что данный
фреймворк в последнее время набирает обороты и становится все более
популярным.
Одним из ключевых моментов в работе Vue.js является виртуальный
DOM. Структура веб-страницы, как правило, описывается с помощью DOM
(Document Object Model), которая представляет организацию элементов html
на странице. Для взаимодействия с DOM (добавления, изменения, удаления
html-элементов) применяется JavaScript. Но когда мы пытаемся
манипулировать html-элементами с помощью JavaScript, то мы можем
столкнуться со снижением производительности, особенно при изменении
большого количества элементов. А операции над элементами могут занять
некоторое время, что неизбежно скажется на пользовательском опыте.
415
Однако если бы мы работали из кода js с объектами JavaScript, то операции
производились бы быстрее.
Для этого Vue.js использует виртуальный DOM. Виртуальный DOM
представляет легковесную копию обычного DOM. Если приложению нужно
узнать информацию о состоянии элементов, то происходит обращение к
виртуальному DOM. Если данные, которые используются в приложении
Vue.js, изменяются, то изменения вначале вносятся в виртуальный DOM.
Потом Vue выбирает минимальный набор компонентов, для которых надо
выполнить изменения на веб-странице, чтобы реальный DOM соответствовал
виртуальному. Благодаря виртуальному DOM повышается
производительность приложения.
TypeScript – это строго типизированная надстройка для JavaScript,
которая позволяет получить некоторое преимущество от применения
определенных в ней синтаксических конструкций, а также использовать, при
желании, чистый JavaScript. Как результат мы получим более декларативный
стиль написания кода, благодаря таким вещам, как интерфейсы, статическая
типизация, модули и классы – при том, что все эти замечательные
особенности отлично интегрируются с популярными JavaScript
библиотеками и фреймворками.
Однако, казалось бы, зачем нужен еще один язык программирования
для клиентской стороны в среде Web, если со всей той же самой работой
прекрасно справляется и традиционный JavaScript, который используется
практически на каждом сайте, которым владеет множество разработчиков и
поддержка которого в сообществе программистов довольно высока. Но
TypeScript это не просто новый JavaScript.
Во-первых, следует отметить, что TypeScript – это строго
типизированный и компилируемый язык, чем, возможно, будет ближе к
программистам Java, C# и других строго типизированных языков. Хотя на
выходе компилятор создает все тот же JavaScript, который затем исполняется
браузером. Однако строгая типизация уменьшает количество потенциальных
ошибок, которые могли бы возникнуть при разработке на JavaScript.
Во-вторых, TypeScript реализует многие концепции, которые
свойственны объектно-ориентированным языкам, как, например,
наследование, полиморфизм, инкапсуляция и модификаторы доступа и так
далее.
В-третьих, потенциал TypeScript позволяет быстрее и проще писать
большие сложные комплексные программы, соответственно их легче
поддерживать, развивать, масштабировать и тестировать, чем на стандартном
JavaScript.
В-четвертых, TypeScript развивается как opensource-проект и, как и
многие проекты, хостится на гитхабе. Кроме того, он является
кроссплатформенным, а это значит, что для разработки мы можем
испольвать как Windows, так и MasOS или Linux.
416
В то же время TypeScript является надмножеством JavaScript, а это
значит, что любая программа на JS является программой на TypeScript. В TS
можно использовать все те конструкции, которые применяются в JS – те же
операторы, условные, циклические конструкции. Более того, код на TS
компилируется в javascript. В конечном счете TS – это всего лишь
инструмент, который призван облегчить разработку приложений.
Vue-cli представляет инструмент для быстрого создания проектов под
Vue.js. Такие проекты уже имеют некоторую готовую начальную структуру,
установленную конфигурацию, в частности, конфигурацию для TypeScript, а
также ряд базовых файлов.
Для использования vue-cli вначале его надо установить. Для этого в
консоли или терминале нужно выполнить команду: npm install -g vue-cli.
Если у вас не установлен TypeScript, вам не нужно делать это заранее,
поскольку vue-cli позаботится об этом, когда вы начнете новый проект и
выберете TypeScript.
После установки vue-cli создадим на жестком диске какую-нибудь
папку, где будут находиться проекты Vue.js и с помощью команды cd
перейдем к этой папке.
Теперь, когда мы установили vue-cli, все, что нам нужно сделать, чтобы
получить проект Vue + TypeScript, это запустить vue create: vue create <appname>. Создавая новый проект, выберите TypeScript. Результат, который вы
получите, когда наш проект начнет разворачиваться, показан на рисунке 1. 