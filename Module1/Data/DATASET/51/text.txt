Интернет – важный источник информации, который ежедневно пополняется новыми 
сайтами и приложениями. Получая заказ на создание веб-приложения, программист должен 
определить подход к разработке, учитывая функциональные требования приложения, 
выделенный бюджет, специфичность функционала и другие требования. Если у опытного 
программиста данный вопрос вызывает меньше затруднений, то у менее опытного 
специалиста могут возникнуть сомнения относительно используемой технологии.
Веб-приложения строятся на основе клиент-серверной архитектуры. Наиболее 
распространенной платформой разработки серверной части веб-приложения является язык 
PHP. Причины широкого использования данной технологии в веб-разработке – простота 
языка по сравнению с аналогами, поддержка большого количества функций и библиотек, 
простота работы с различными базами данных, поддержка большинством веб-серверов [1].
Разработать веб-приложение можно тремя способами: самостоятельно написать код с 
нуля, воспользоваться системой управления контентом, использовать для разработки 
фреймворк. Первый способ подойдет для небольших несложных приложений. Когда речь 
заходит о разработке крупного приложения с большим функционалом данный подход 
приведет к появлению ошибок и увеличению времени разработки из-за большого количества 
рутинных операций, с которыми придется столкнуться разработчикам.
Для уменьшения ошибок в коде и сокращения времени разработки нужно использовать 
систему управления контентом или фреймворк. Веб-фреймворки и CMS – популярные 
средства создания веб-приложений. Большинство веб-фреймворков и CMS имеют в своей 
основе именно PHP.
CMS – это информационная система или программное решение, которое позволяет 
быстро создавать шаблонные сайты [2]. Для использования CMS нет необходимости 
обладать глубокими знаниями в веб-разработке, что является главным преимуществом 
данного подхода. CMS предоставляет пользователю готовый интерфейс, с помощью 
которого можно редактировать содержимое сайта, наполнять его контентом и в короткие 
сроки предоставлять готовый результат. Многие CMS также позволяют работать с данными, 
автоматизируя процессы работы с базой данных [2]. Таким образом, CMS – удобное средство 
разработки, которое подойдет как новичкам в области веб-разработки, так и 
профессионалам. Наиболее популярные системы управления контентом: 1С-Битрикс, 
WordPress, Durpal, Joomla!
Фреймворк позволяет разработчику не начинать работу с нуля, а предоставляет 
готовую структуру приложения, которую можно наполнять необходимым функционалом и 
дополнительными модулями. Веб-фреймворк позволяет сконцентрироваться на реализации 
более специфических функций приложения без необходимости выполнять рутинные 
действия по созданию каркаса приложения.
В основе фреймворков обычно лежит архитектура MVC. Шаблон MVC позволяет 
разделить бизнес-логику приложения и интерфейса пользователя [1]. Таким образом,
приложение разделяется на компоненты так, чтобы изменения одного компонента не 
затрагивали другие. Данная архитектура предлагает модульный подход к написанию 
приложения, снижает сложность архитектуры приложения, повышает гибкость приложения 
и возможность повторного использования кода. Преимущества паттерна MVC позволяют 
создать хороший каркас будущего веб-приложения.
Использование веб-фреймворка целесообразно в следующих ситуациях [3]:
1. при проектировании таких стандартных приложений как интернет-магазины, социальные 
сети, новостные порталы и др.;
2. когда необходимо обеспечить масштабируемость приложения по мере его роста;
3. если необходимо создать модульное приложение с максимально возможным повторным 
использованием кода.
Фреймворки также незаменимы при командной разработке. Готовый каркас 
приложения определяет стандарт, в рамках которого должны работать программисты. 
Наиболее часто в проектах используют фреймворки: Laravel, CodeIgniter, Symfony, Zend, Yii.
В таблице приведено сравнение методик разработки по некоторым критериям.
Для готового приложения особенно важны скорость выполнения запросов и 
потребление памяти. Однако, несмотря на то, что CMS и фреймворки уступают по этим 
критериям чистому коду, не следует забывать о других важных для разработки критериях и 
проблемах, для решения которых были созданы данные технологии. Выбирая способ 
разработки, нужно опираться на требования заказчика и известные данные о 
производительности нескольких технологий, чтобы предложить наиболее подходящий 
вариант.
На выбор методологии и технологии разработки влияет комплекс различных факторов: 
требования заказчика, время, необходимое для разработки продукта, масштаб проекта и 
другие факторы. Если масштабы проекта небольшие или функционал приложения 
отличается сложностью, то можно разрабатывать с нуля, а если необходимо предоставить 
результат в очень сжатые сроки, то, имеет смысл использовать CMS. Если проект 
небольшого масштаба имеет достаточно специфический функционал, то нужно использовать 
один из фреймворков, например, CodeIgniter. Для средних и крупных долгосрочных 
проектов подойдут такие фреймворки как Laravel и Symfony.