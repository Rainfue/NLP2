Для разработчиков и предпринимателей в сфере IT проблема поддержания
высокого качества кода является важной. Это влияет на возможность расширения и
поддержки существующего кода, стоимость разработки и качество конечного продукта.
Особенно остро встает вопрос для JavaScript-программистов, поскольку эта сфера наиболее
динамичная и быстроразвивающаяся, с огромным притоком начинающих специалистов [1].
Практика показывает, что разработчики случайным образом выбирают те или иные
методы контроля качества кода исходя из своих привычек. Благодаря исследованиям в
данной области, JavaScript-программисты смогут делать выбор в пользу эффективных
методов и инструментов.
Необходимо рассмотреть основные средства мониторинга программного кода на языке
JavaScript, выработать общие предварительные рекомендации на основании анализа и
оценить литературу в исследуемой области. Согласно этому будет выполнена постановка
задачи для дальнейшего изучения.
Было выделено пять наиболее распространенных средств для контроля и улучшения
качества кода:
1. использование систем контроля версий;
2. инспекции кода;
3. статистические анализаторы JavaScript;
4. стандарты оформления кода;
5. строгая типизация в JavaScript.
Системы контроля версий – это средство для управления изменениями в документах,
компьютерных программах, больших сайтах. Такой инструмент позволяет:
– получить доступ к информации: кто сделал изменение, зачем кто-то его сделал, в какое
время и саму суть изменения, т.е. код;
– организовать удобную разработку для целой команды программистов. Даже в те моменты,
когда разработчики делают конфликтные изменения;
– появляется возможность вернуться к более ранней версии проекта в случае, если кто-то в
команде внес изменения, приводящие к ошибкам;
Альманах научных работ молодых ученых
XLVII научной и учебно-методической конференции Университета ИТМО. Том 7
281
– легко работать над несколькими независимыми функциями или версиями программы, есть
возможность быстро переключаться между ними.
Использование Git или другого подобного инструмента сможет повысить удобство
работы над проектом, его контроль и тем самым улучшить само качество написания кода. В
наши дни такие системы достаточно просты в освоении. Существует хорошо написанная
документация и литература: полное руководство по Mercurial от Брайана О'Салливана [2],
книга Pro Git [3], написанная Скоттом Чаконом совместно с Беном Страбом и другие.
Инспекция кода – это всего-навсего просмотр кода другим человеком. Главная идея
данного метода заключается в том, что человек, непричастный к написанному, может со
свежим взглядом найти недостатки, и поэтому предложить более оптимальные решения
некоторых проблем. В результате ревизий получается более качественный код, к тому же в
процессе инспекций происходит обмен опытом, что повышает общую квалификацию
программистов.
Хотя стоимость инспекций код может доходить до 20% от стоимости всего проекта,
данные различных исследований, которые приводит Стив Макконнелл [4, С. 493], говорят об
очень высокой эффективности: каждый час код ревью предотвращал от 30 до 100 ч работы,
которые тратились на тестирование и исправление багов.
Стандарт оформления кода – это конвенция о том, в каком стиле писать программный
код. Эти инструкции указывают, какой длины делать отступы, где и как писать комментарии,
какой допустимый уровень вложенности для циклов и условных операторов, как именовать
функции и так далее.
Стиль программирования призван сделать так, чтобы код выглядел единообразно,
будто бы его пишет один программист. Это улучшает читаемость кода, его ясность,
позволяет новым членам команды быстро освоиться в написанном и включиться в процесс.
К тому же некоторые эксперименты показывают, что следование определенным гайдлайнам
может повысить производительность кода [5]. Крупные компании и проекты разрабатывают
свои собственные стили. Наиболее известные: Google JavaScript Style Guide, который
учитывает нововведения ECMAScript 6, JavaScript стайлгайд от компании Airbnb, стили
проекта Node.js и другие.
Статические анализаторы кода помогают отслеживать соблюдение определенных
сталгайдов, находить потенциальные проблемы (антипаттерны), выявлять ошибки
синтаксиса и следить за следованием спецификации. Данная проверка кода не подразумевает
его исполнения.
Стефанов в книге «JavaScript Шаблоны» упоминает один из популярных анализаторов
– JSLint. Он пишет следующее: «Этот инструмент «будет задевать ваше самолюбие», как
предупреждает его создатель, но только на первых порах. Благодаря JSLint вы будете быстро
учиться на собственных ошибках и постепенно выработаете в себе основные привычки
профессионального программиста на JavaScript. Отсутствие предупреждений после проверки
с помощью JSLint поднимет вашу уверенность в программном коде, так как вы будете знать,
что второпях не допустили элементарных оплошностей или синтаксических ошибок» [6].
Строгая типизация как один из методов улучшения качества кода. JavaScript является
языком с динамической типизацией, т.е. типы данных определяются в момент выполнения
программы. Соответственно, строгая типизация для языка означает указание типа
переменной в процессе написания кода. Проблема в том, что по данным исследований
ошибки несоответствия типов встречаются довольно часто, и большинство разработчиков
оценивают их как критические [7]. В этой связи возникла потребность в инструментах,
добавляющих статическую типизацию в JavaScript, чтобы повысить качество исходного
кода. Крупные компании начали выпускать свои средства для обеспечения строгости языка:
– Google Web Toolkit от Google;
– TypeScript от Microsoft;
– Flow от Facebook.
Альманах научных работ молодых ученых
XLVII научной и учебно-методической конференции Университета ИТМО. Том 7
282
Но оценки эффективности представленных средств пока еще сильно разнятся.
Однозназначных показателей нет. Дуглас Крокфорд пишет: «Я думаю, что слабая типизация
в JavaScript является одной из лучших функций, а проверка типов переоценивается.
TypeScript добавляет достоинства, но это не та цена, которую я готов заплатить» [8].
Заключение. Проведена краткая оценка каждого представленного способа. Выявлено,
что на сегодняшний день существуют как общепринятые методы, которые прочно вошли в
канон современной JavaScript разработки, так и находящиеся в процессе становления.
Стоит изучить вопрос практической реализации, который бы основывался на
перекрестном применении способов мониторинга кода, а сами способы необходимо
сопоставить относительно друг друга. Стоимость использования и внедрения различных
средств, их сравнительная эффективность.
Также необходимо уделить внимание проблеме типов в JavaScript, т.е. изучить влияние
средств, добавляющих статическую типизацию на конечное качество исходного кода