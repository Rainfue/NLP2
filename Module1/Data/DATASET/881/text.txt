Современные роботы и робототехнические комплексы (РТК) продолжают усовершенствоваться, происходит развитие всех их составляющих, к ним
относятся в основном механика и кинематика, системы управления, программы управления (рис. 1). Очевидно, что развитие систем и программ управления за последнее
время намного существеннее, чем изменения в механике и кинематике современных роботов. За последние 20 лет механические роботы не потерпели
особых изменений, чего нельзя сказать о системах управления и программном обеспечении (ПО) в данной области и в целом. Развитие микропроцессоров привело к минимизации, удешевлению, доступности, универсальности систем управления роботами, а соответственно и
появлению новых программ управления. Появилась необходимость в разработке программного обеспечения к системам управления нового поколения и
в модернизации существующих. Современные системы управления базируются на микропроцессорной основе, универсальны, поддерживают различные
языки программирования и стандарты ввода-вывода. Поэтому разработка
программ управления для таких систем перешла на новый уровень, где разработчик сам выбирает программные продукты и системы разработки. Тем
более что существует широкий выбор программных продуктов для разработки программ управления, они достаточно развиты, включают весь необходимый инструмент, позволяют оперативно разрабатывать необходимый программный продукт. Это визуализация, удаленный доступ, ввод-вывод через
порты, работа с видеокамерой и звуком, и т. д.
Методика разработки программ управления (выбор среды разработки,
структура построения, алгоритмы функционирования программ управления)
мало описана и является актуальной задачей. Авторами предлагается методика разработки программы управления для
РТК на базе робота-манипулятора Delta, результатом чего является более
функциональная, расширяемая, универсальная программная среда управления по сравнению с существующей. Разработанная программа включает в
себя локальное и удаленное управление, визуализацию с видеопотоком, ручное и командное управление (автоматическое), организацию циклов выполнения и т. д. 
На подготовительном этапе каждой переменной, соответствующей звену
робота, присваиваются значения в виде требуемого количества шагов двигателя с учетом передаточных чисел редуктора. Для этого производятся все необходимые расчеты, такие как пересчет значений treckbar и перевод текстовых значений из textbox в числовые значения, и т. д. Формирование команды
заключается в заполнении шаблона, отформатированного под требования
управляющего устройства, с подготовленными значениями. 
Поскольку используется большое количество входных данных, то и
применяется несколько вариантов их получения, таких как ввод текстовой
информации в специальные поля (Textbox, RichTextBox), получение информации из объекта TrackBar путем вычисления значения в зависимости от положения бегунка, заполнение многострочного текстового поля (RichTextBox)
информацией из файла. Для данных операций не используется никакое специальное ПО. При получении информации с управляющего устройства робота используются те же библиотеки, что и для вывода. 
Удаленное управление является обязательным условием для любой системы управления роботом. В данной программе реализована клиентсерверная архитектура в едином приложении. Для осуществления подключения и передачи используется библиотека Winsock. Для передачи используется два раздельных потока: TCP для управления манипулятором и UDP для
передачи изображения.
Программа служит для управления роботом-манипулятором Delta и поддерживает три режима: 1) ручное управление, 2) управление по координатам,
3) автоматическое управление, а также два вида работы:
1) локальное управление;
2) удаленное управление.
ПО Delta v.1.0 включает в себя четыре формы.
Главная форма программы (рис. 4) служит для выбора режима управления манипулятором. 
Удаленное управление включает в себя два режима работы:
1) сервер (компьютер, подключенный к управляющему устройству);
2) при нажатии на кнопку «Сервер» программа переходит в режим прослушивания порта для ожидания подключения.
Клиент (удаленный компьютер)
Для подключения в режиме клиента в текстовое поле вводится адрес
сервера.
При отсутствии удаленного подключения на форме отображается
надпись «Локальное управление» без выделения, при удаленном – «Подключен в режиме Сервер» и «Подключен в режиме Клиент» соответственно.
На других формах также будет отображаться текущее состояние.
При подключении в режиме сервера управляющие кнопки будут неактивными для исключения возможности вмешательства в процесс.
Наблюдение за движением робота происходит с помощью USB-камеры,
что позволяет очень точно позиционировать схват манипулятора. 
Загрузка видео с камеры состоит из двух частей.
 Установка параметров изображения
Public Touchless As New TouchlessLib.TouchlessMgr
Public WebkaAs TouchlessLib.Camera = Touchless.Cameras.Item(0)
Dim command As String
Delegate Sub SetTextCallback(ByVal [text] AsString)
Private Sub Form1_Load(sender AsSystem.Object, e AsSystem.EventArgs)
Handles MyBase.Load
If Touchless.Cameras.Count <> 0 Then
 Webka = Touchless.Cameras.Item(0)
 Touchless.CurrentCamera = Webka
 Touchless.CurrentCamera.CaptureHeight = 480
 Touchless.CurrentCamera.CaptureWidth = 640
End If
 Получение изображения
Private Sub Timer1_Tick(sender AsObject, e AsEventArgs) Handles Timer1.Tick
PictureBox1.Image = Touchless.CurrentCamera.GetCurrentImage
Ручное управление, алгоритм функционирования которого представлен
на рис. 5, а форма – на рис. 6, осуществляется перемещением бегунков, соответствующих требуемым координатам, кнопками «Старт / Стоп» и «Сжать /
Разжать» для задания состояния схвата. 
Создано выпадающее меню начальных положений как по всем координатам, так и по отдельным. В специальном окне выводятся результаты выполнения действий для отслеживания состояния манипулятора. 
Режим управления манипулятором по координатам является одним из
важнейших в задаче автоматизации. Он позволяет задавать перемещение не с
помощью угловых координат робота, а с помощью линейных координат в
декартовом пространстве, что значительно упрощает управление, так как не
требуется подбирать комбинации наклона звеньев для точной установки
схвата. Алгоритм перехода к линейным координатам и математическое описание приведены в статье «Аналитический и численный методы решения обратной задачи кинематики для робота Delta» [1], там же приведен пример
программы.
На форме (рис. 7) после ввода координат объекта будут показаны координаты робота-манипулятора, и произойдет перемещение звена. 
Автоматическое управление, алгоритм функционирования которого
представлен на рис. 8, а форма – на рис. 9, представляет собой управление по
заранее написанной программе, которую можно загрузить из файла или вписать в текстовое окно. 
Программа позволяет строить сложные задачи, включающие в себя циклы, множественные повторы и динамические переходы к различным частям
управляющей программы.
Ниже приведены ключевые слова, используемые при формировании
управляющей программы:
"BEGIN" – начало программы
"FINISH"– конец программы
"DO:" – начало подпрограммы
"END_DO"– конец подпрограммы
Приведен пример программного кода, осуществляющий автоматическое
управление:
Dim q As String
Dim i, b, k, r, t, m As Integer
b = RichTextBox2.GetLineFromCharIndex(RichTextBox2.Find("BEGIN"))
k = RichTextBox2.GetLineFromCharIndex(RichTextBox2.Find("FINISH"))
Fori = b + 1 To k - 1
'начало
If (Microsoft.VisualBasic.Left(RichTextBox2.Lines(i), 3) = "DO:") Then
r = CInt(Microsoft.VisualBasic.Right(RichTextBox2.Lines(i),
Len(RichTextBox2.Lines(i)) - 3))
For t = 0 To r - 1
m = 0
DoWhileRichTextBox2.Lines(i + m) <>"END_DO"
m += 1
IfRichTextBox2.Lines(i + m) <>"END_DO"Then
q = RichTextBox2.Lines(i + m)
SerialPort1.Write(q &vbCr)
SleepVB(20)
EndIf
Loop
Next
i += m + 1 
Цикловое управление требует задержки на выполнение команды (в программе задержка установлена в размере 20 с). Задержка осуществлена отдельной
функцией. Для сокращения времени ожидания в функции паузы осуществляется
проверка конца операции. После окончания выполнения каждой операции в специальное текстовое поле выводится текст, содержащий ответ порта (положение
манипулятора и т. д.). Ключевое слово, определяющее завершение операции
"READYR:", используется для окончания функции паузы:
SubSleepVB(Seconds)
Dim Start AsDouble
Start = Microsoft.VisualBasic.DateAndTime.Timer
DoWhileMicrosoft.VisualBasic.DateAndTime.Timer<
Start + Seconds
Application.DoEvents()
IfRichTextBox1.Text.ToLower.Contains("READYR:")
Then
 RichTextBox1.Text = ""
Exit Do
EndIf
Loop
EndSub
Пример кода управляющей программы:
«BEGIN ' начало программы
HOME ‘ переход в начальное положение
M10 ‘ схват разжать
DO:3 ' начало цикла. повторить 3 раза
G01X00000Y00000Z00500F00000
G01X00000Y00000Z00000F00000
END_DO 'Конец цикла повторов
M11 ‘ схват сжать
FINISH ' конец программы» 
Разработанная программа полностью соответствует поставленной задаче. Предлагаемая методика проектирования ПО для роботов является эффективной по времени и не требует специального дополнительного ПО. Такие
алгоритмы функционирования программ управления можно использовать
для проектирования программного обеспечения роботов различных типов.
В режиме ручного управления повышена точность задания координат, добавлен режим управления по координатам, графическая модель заменена на видео, предусмотрен контроль состояния и положения манипулятора. В режиме
автоматического управления разработан новый алгоритм выполнения управляющей программы с добавлением вложенных циклов. Переход на видеоизображение открывает дополнительные возможности модернизации (реализация компьютерного зрения). Организация удаленной работы с роботомманипулятором расширяет круг решаемых задач и повышает безопасность
работы за счет отстранения от зоны движения робота. В созданном ПО возможно реализовать большое количество функций: условные переходы, актуальные при подключении датчиков, полное зацикливание, запись выполненных команд в файл для применения их в автоматическом режиме и т.д. 
