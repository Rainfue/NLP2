Критерии сравнительного анализ фронтенд-фреймворков
В большинстве случаев выбор фреймворка для разработки фронтенда зависит от
различных критериев, таких как: знакомство проектной команды с фреймворком, размер
проекта, сложность фреймворка, масштабируемость. Не существует объективных
критериев, однозначно показывающих применимость той или иной технологии. Для
определения основных критериев выбора фронтенд-фреймворка необходимо обозначить
ключевые моменты: время разработки, процесс разработки, технологические возможности
фреймворка.
От времени разработки напрямую зависят стоимость проекта и качество кода. С
одной стороны, чем меньшее время затрачено на разработку, тем выгоднее проект, с другой,
при сжатых сроках качество кода может сильно ухудшиться. Поэтому важным параметром
для рекомендации фреймворка выделено время разработки, исходя из которого можно
сделать выводы о применимости того или иного фреймворка.
Фреймворки имеют свои особенности и требования, которые во многом определяют
процесс разработки. Так, например, Angular [1], имеет более строгие требования к
написанию кода, что позволяет писать код более качественно, но и увеличивает время
разработки. Если для разработки важную роль играет качество, то стоит вопрос Критерии сравнительного анализ фронтенд-фреймворков
В большинстве случаев выбор фреймворка для разработки фронтенда зависит от
различных критериев, таких как: знакомство проектной команды с фреймворком, размер
проекта, сложность фреймворка, масштабируемость. Не существует объективных
критериев, однозначно показывающих применимость той или иной технологии. Для
определения основных критериев выбора фронтенд-фреймворка необходимо обозначить
ключевые моменты: время разработки, процесс разработки, технологические возможности
фреймворка.
От времени разработки напрямую зависят стоимость проекта и качество кода. С
одной стороны, чем меньшее время затрачено на разработку, тем выгоднее проект, с другой,
при сжатых сроках качество кода может сильно ухудшиться. Поэтому важным параметром
для рекомендации фреймворка выделено время разработки, исходя из которого можно
сделать выводы о применимости того или иного фреймворка.
Фреймворки имеют свои особенности и требования, которые во многом определяют
процесс разработки. Так, например, Angular [1], имеет более строгие требования к
написанию кода, что позволяет писать код более качественно, но и увеличивает время
разработки. Если для разработки важную роль играет качество, то стоит вопрос поддерживаемые фреймворки от крупных компаний, этот критерий был выделен для
определения их поддержки.
При проектировании приложения разработчик оценивает различные параметры
проекта, его размер, примерное время на разработку, требования функциональности,
масштабируемости, производительности, и исходя из этого выбирает необходимый стек
технологий. Были выделены главные аспекты, по которым могут сравниваться фреймворки,
такие как: тип, данные о создателе фреймворка, лицензии, дате последнего релиза, наличие
CLI, используемый синтаксис, рендеринг, связывание данных, архитектура, работа с DOM
[8], гибкость, кривая обучения, скорость написания кода.
Производительность фреймворков также является важным пунктом при выборе
фреймворка. Для сравнения производительности используются одинаковые приложения,
реализованные на разных фреймворках. Основные показатели, по которым было проведено
сравнение реализованных приложений:
1. производительность, измеряющаяся как количество времени, необходимое
для вывода контента;
2. размер. Будет сравниваться только размер скомпилированных файлов
JavaScript. HTML и CSS файлы являются одинаковыми для всех вариантов, поэтому не
будут включены. Чем меньше размер файла, тем меньше времени ему требуется на загрузку
и парсинг. Величина файла зависит от размера фреймворка и количества требуемых
дополнительных зависимостей;
3. количество строк кода, которое нужно написать для реализации приложения.
Число строк подсчитывается с помощью утилиты «cloc»[9] в каждой папке source. Чем
меньше это число, тем лучше, так как меньше кодовая база для поддержки.
Измерение производительности осуществляется с помощью инструмента
Lighthouse, интегрированного в панель «Аудит» Chrome Developer Tools. Lighthouse - это
автоматизированный инструмент с открытым исходным кодом для повышения
производительности, качества и корректности веб-приложений [10]. При проверке
Lighthouse выполняет серию тестов и создает отчет о загрузке страницы, включающий
следующие показатели:
1. First ContentFul Paint: показывает время, которое потребовалось для
отображения на экране первого текста/изображения;
2. First Meaningful Paint: показывает время отображения основного контента
страницы;
3. Speed Index: индекс, показывающий как быстро происходит визуальное
отображение содержимого страницы;
4. First CPU Idle: показывает время, необходимое для того, чтобы основной
поток страницы начал ожидать первую обработку ввода;
5. Time to Interactive: время, через которое страница становится полностью
интерактивной;
6. Estimated Input Latency: оценка скорости реакции приложения на
пользовательский ввод в миллисекундах в течение самого загруженного 5-секундного окна
загрузки страницы.
Чем меньше представленные выше показатели, тем выше производительность
приложения. В исследовании в качестве показателя производительности используется
комбинированный балл из данных метрик.
Сравнительный анализ фронтенд-фреймворков
В результате анализа документации фреймворков, тематических сообществ,
интернет-источников были определены основные характеристики фреймворков.