На современном рынке труда PHP-разработчик является весьма 
востребованным специалистом. В то же время парсинг сайтов охватывает 
практически все сферы бизнеса. Именно эти две причины делают подготовку 
специалистов по парсингу средствами PHP актуальной на направлениях 
подготовки, связанных с информационными технологиями. 
У web-разработчиков довольно часто возникают задачи, связанные с 
получением и обработкой необходимой информации с различных сторонних 
сайтов, т. е. с парсингом. Для решения таких задач можно воспользоваться 
готовым программным обеспечением (ПО), или можно написать свое 
собственное ПО, которое будет разработано только под нужды конкретной 
проблемной области или функционала сайта, например наполнение сайта 
контентом, динамическая загрузка информации или же заполнение баз данных. 
Для того чтобы быстро и без затрат написать свой парсер, необходимо 
выбрать правильный инструментарий. В мире существует множество 
библиотек для парсинга данных, в частности и для языка PHP [1]. 
В рамках обучения программированию в вузе рекомендуется уделить 
внимание базовым PHP-инструментам для парсинга web-страниц. Так как не 
каждому студенту, решившему сделать карьеру в данной сфере, точно известна 
специфика его будущей работы, то крайне полезно будет помочь ему овладеть 
различным инструментарием. Необходимо показать специфику использования 
различных средств. Это поможет в дальнейшей профессиональной 
деятельности выбрать оптимальный вариант для решения конкретной задачи. 
Рекомендуется рассмотреть следующий набор наиболее популярных 
инструментов PHP для парсинга web-страниц: 
– алгоритм сопоставления шаблонов PHP regexp; 
– объектная модель документа (DOM) и язык адресации частей XMLдокумента XPath; 
– синтаксический анализатор SimpleXML; 
– библиотека для написания парсера html-страницы SimpleHTMLDOM; 
– библиотека phpQuery; 
– библиотека QueryPath; 
– библиотека htmlSQL; 
– библиотека Zend_DOM_Query. 
Алгоритм сопоставления шаблонов PHP regexp 
PHP regexp (регулярные выражения) – легкий и доступный инструмент для 
работы с данными, но его использование не всегда оправданно. Например, в 
случае, когда разработчику необходимо получить большое количество сложных 
данных, таких как HTML-код, он может столкнуться с трудностями, так как 
часто такие данные не являются строго типизированными и не имеют одного 
определенного шаблона. 
Следовательно, при любых изменениях структуры запрашиваемых данных 
(например, добавление пробела или изменение атрибута в теге), необходимо 
будет переписывать и изменять код своего парсера, поэтому использовать 
регулярные выражения в таких случаях нецелесообразно, и стоит использовать 
другие, более удобные и надежные решения. 
Объектная модель документа (DOM) и язык адресации частей XMLдокумента XPath 
DOMи XPath являются стандартными модулями, встроенными в PHP, 
начиная с PHP 5, а не библиотеками, но не упомянуть их в числе популярных 
средств для парсинга, нельзя. Их «встроенность» в язык программирования 
делает их удобным инструментом для парсинга web-страниц. Так как для 
работы необходим «движок», который используется при работе с данными в 
XML формате, возникают определенные требования, связанные с разметкой 
HTML-тегов, и это является одним из главных минусов таких средств парсинга. 
Эти модули довольно сложные в использовании и требуют высокого порога 
входа, однако это не мешает им быть хорошим инструментом для парсинга. 
Синтаксический анализатор SimpleXML 
Расширение SimpleXML представляет собой простой, легкий в 
использовании набор инструментов, который служит для преобразования XMLдокумента в объект, который далее может быть обработан с помощью обычных 
селекторов и итераторов массива [4]. Для работы с этим расширением не нужен 
высокий порог входа, для него написано большое количество подробных 
примеров, что позволяет новичкам в парсинге быстро его освоить и начать 
создание своих инструментов. 
Однако SimpleXML стоит использовать в том случае, когда вы уверены в 
том, что HTML-документ является валидным, так как для его работы требуется 
«шаблонная» структура документа с данными. Ниже приведем пример XMLдокумента, содержащего некую информацию о недвижимости, и работы 
скрипта-парсера, написанного с SimpleXML. 
<?xml version="1.0"?> 
<realty> 
<apartments id="0"> 
 <rooms>1-комнатная</rooms > 
 <floor>3 этаж</floor > 
 <price>1 600 000</price> 
</apartments> 
<apartments id="1"> 
 <rooms>2-комнатная</rooms > 
 <floor>7 этаж</floor > 
 <price>2 170 000</price> 
</apartments> 
</realty> 
<?php 
$smpl_xml=simplexml_load_file('realty.xml'); 
foreach ($smpl_xml->apartments as $apartment){ 
echo $apartment->rooms." квартира, 
".$apartment->floor.", цена - ".$apartment->price."<br>"; 
} 
?> 
Библиотека для написания парсера html-страницы SimpleHTMLDOM 
Библиотека SimpleHTMLDOM – простой и понятный инструмент, который 
имеет удобную документацию и отлично подходит для начинающих PHP 5+ 
разработчиков [2]. Изучение парсинга на PHP начинать рекомендуется именно 
с нее. Особенности библиотеки: 
– большая распространенность, благодаря чему в сети можно найти много 
обучающих примеров; 
– библиотека позволяет работать с невалидным HTML (что является 
главным недостатком XPath, как говорилось выше); 
– все преобразования происходят автоматически, поэтому у разработчика 
не возникает проблем с кодировками; 
– позволяет производить поиск тегов ипарсить HTML-код при помощи 
удобных jQuery-подобных селекторов; 
– содержимое извлекается в одну строку. 
Так как парсинг происходит по аналогии с jQuery, SimpleHTMLDOM 
будет прост в использовании для тех, кто уже имел опыт работы с этой 
библиотекой. Рассматриваемый инструмент также эффективно производит 
поиск данных, умеет фильтровать множества вложенных элементов и даже 
обращаться к их атрибутам. 
К недостаткам SimpleHTMLDOM относится низкая скорость обработки по 
сравнению с некоторыми другими средствами, однако этот недостаток будет 
серьезным только при работе с большими массивами данных. Приведем 
краткий пример работы SimpleHTMLDOM, аналогичный предыдущему, и 
HTML-документ с информацией о недвижимости. 
<html> 
<body> 
 <div class="realty">Недвижимость 
 <span> 1-комнатная</span> 
 <span> 3 этаж</span> 
 <span> 1 600 000 </span> 
 </div> 
 <div class="realty">Недвижимость 
 <span> 2-комнатная</span> 
 <span> 7 этаж</span> 
 <span> 2 700 000 </span> 
 </div> 
</body> 
</html> 
<?php 
 require 'simple_html_dom.php'; //подключаембиблиотеку 
 $html = file_get_html( 'realty.html' ); 
 $element = $html->find( '.realty' ); 
 foreach( $element as $item ) { 
 $room=$item->children(0)->plaintext; 
 $floor=$item->children(1)->plaintext; 
 $price=$item->children(2)->plaintext; 
 echo $room." квартира, ".$floor.", цена - ".$price."<br>"; 
 } 
Библиотека phpQuery 
Еще одной вариацией JQuery для PHP является основанная на DOM 
библиотека phpQuery. Однако, по сравнению с предыдущим инструментом, она 
имеет большее количество аналогичных функций. К ним можно отнести: 
– поддержку селекторов и атрибутов; 
– поддержку плагинов и манипуляций; 
– поддержку различных событий, таких как имитация действий 
пользователя, например имитация клика мыши. 
В дополнение ко всему phpQuery поддерживает технологию AJAX. 
Использовать эту библиотеку можно как из командной строки, так и через 
PHP, внутри кода программы [3]. Это упрощает работу с ней как для новичков, 
так и для профессионалов. 
По скорости работы phpQuery по некоторым данным превосходит 
SimpleHTMLDOM в 8 раз, что является его несомненным преимуществом. В 
настоящее время она является одной из самых быстрых библиотек для 
парсинга. 
Ниже приведен пример использования этой библиотеки при работе с тем 
же файлом HTML, что и в прошлом примере. 
<?php 
 require_once 'phpQuery/phpQuery.php' ; 
 $content = file_get_contents('realty.html'); 
 $document = phpQuery::newDocument($content); 
 $list_elements = $document->find('.realty'); 
 foreach ($list_elements as $element){ 
 $pq = pq($element); 
 $rooms= $pq->find('span')->eq(0)->text(); 
 $floor= $pq->find('span')->eq(1)->text(); 
 $price= $pq->find('span')->eq(2)->text(); 
 echo $rooms." квартира, ".$floor.", цена - ".$price."<br>"; 
} 
Библиотека QueryPath 
QueryPath – PHP-библиотека для управления документами XML и HTML. 
Она предназначена для работы не только с локальными файлами, но и с webслужбами, а также с ресурсами базы данных. Также QueryPath реализует 
довольно большую часть интерфейса jQuery (включая также CSS-селекторы), 
но больше предназначена для использования на стороне сервера. QueryPath 
может быть установлена посредством Composer. 
Библиотека htmlSQL 
Эта библиотека позволяет производить различные манипуляции с 
разметкой HTML при помощи SQL-подобных запросов. Такие методы 
обработки данных выглядят более наглядно и позволяют быстрее 
ориентироваться в коде разработчика. Простой пример запроса htmlSQL: 
$get_realty->query('SELECT*FROM a WHERE $class =="realty"') 
К достоинствам этой экспериментальной библиотеки можно отнести то, 
что для некоторых задач намного удобнее использовать SQL-подобные 
команды вместо общепринятых CSS-селекторов, которые могут быть не всем 
понятны и известны, по сравнению с языком SQL. На данный момент 
разработка этой библиотеки уже прекращена, но она до сих пор вызывает 
большой интерес у web-разработчиков. 
К недостаткам htmlSQL относится ограниченная функциональность, 
которой может не хватить для решения сложных задач. 
Используя mysql-подобные функции и методы, вполне реально получить 
результаты запросов к данным в виде стандартного ассоциативного массива 
или же объекта. 
Библиотека Zend_DOM_Query 
Библиотека от разработчиков PHP, разработанная как модуль к 
фреймфорку Zend. Подходит для разработчиков в данной области, так как она 
полностью интегрирована под ZendFramework, однако может применяться и 
вне его. 
Zend_Dom_Query представляет собой стандартизированный интерфейс для 
создания запросов к DOM-документам (XML и HTML), с использованием 
XPath и CSS селекторов [5]. Понятно и знакомо представлена система 
обозначений CSS-селекторов при произведении запросов к документам, 
имеющим XML структуру. 
К преимуществам библиотеки относится ее интегрированность с Zend, 
нотация селекторов и высокая скорость обработки данных. К недостаткам 
отнесём небольшое количество документации и неудобство ее расположения в 
директории. Для ее работоспособности необходимо правильно разместить 5 
различных файлов в разных определенных папках («Zend/Dom/Query.php», 
«Zend / Dom / Query / Result.php», «Zend / Dom / Query / Css2Xpath.php», 
«Zend/Dom/Exception.php», «Zend/Exception.php»), что не совсем удобно, когда 
предполагается ее использование вне ZendFramework. 
Выводы 
В статье был проведен краткий обзор некоторых популярных технологий 
парсинга для PHP, и, безусловно, кроме перечисленных выше, существует еще 
большое множество разнообразных библиотек. Из всего вышесказанного 
можно сделать вывод, что для большинства задач стоит использовать 
надежную библиотеку phpQuery. Она отличается от прочих своей 
универсальностью, скоростью и функциональностью. 
Однако стоит учитывать, что для реализации разных задач могут 
подходить и другие библиотеки для парсинга. Так, для поиска шаблонных 
решений может подойти как использование регулярных выражений, так и 
XPath, DOM или SimpleXML. 
Различные библиотеки можно использовать и в зависимости от 
профессионального уровня разработчика, сферы его деятельности, фреймворка, 
на котором он работает или же личных предпочтений. Одна библиотека может 
подойти для работы на локальной машине, а другая – для большой серверной 
части. 
Некоторые библиотеки написаны разработчиками PHP для других 
разработчиков, другие же написаны обычными программистами для своих 
нужд, но приобрели большую популярность, благодаря своей универсальности. 
Для работы разработчика с web-страницами помимо прочих, является 
важным большое количество критериев, например возможность работы с 
невалидным кодом, вывод кодировок или же доступность атрибутов 
вложенных элементов структуры документа. Парсинг является большой частью 
множества процессов, и зачастую процессы, связанные с обработкой 
информации, как и скорость написания кода, зависят от правильно 
подобранного инструмента анализа данных. 
По окончанию обучения студенты овладевают основными навыками 
использования инструментов, знают их сравнительные достоинства/недостатки, 
понимают, какое из средств лучше подойдет при решении конкретной 
профессиональной задачи. 