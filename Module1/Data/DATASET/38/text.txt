Статический анализ – тестирование программного обеспечения, осуществляемое без исполнения тестируемых программ. Такой анализ позволяет существенно ускорить тестирование безопасности 
программного обеспечения. Дефектные участки кода могут быть выявлены как вручную, так и с использованием программных средств.
Промежуточный, исходный, исполняемый варианты кода, отладочная, компоновочная, компиляционная, проектная информация – объекты статического анализа [1; с. 50]. Эффективная отладочная 
работа осуществима в случае, когда объектом статического анализа является исходный код. Предлагаем закрепить положение следующими обстоятельствами:
 раннее обнаружение дефектов в сравнении с тестированием других рассмотренных объектов;
 выявленные на стадии тестирования исполняемого или промежуточного кода дефекты часто 
требуют исправлений в исходном коде.
43 уязвимости выявлено за 2017 год в исходном коде PHP. В следующих версиях PHP устраняется большая часть уязвимостей. Так, в 2016 году выявлено 107 уязвимостей из них в 2017, соответственно, 64 были устранены. В 2018 на сегодня выявлено 10 уязвимостей [2]. Однако не всегда клиентсерверное приложение способно мигрировать на высшую версию PHP. Выходом из проблемы является отладочная работа, выполняемая в ходе статистического анализа. 
Объединяя вышеуказанные тезисы, можно утверждать об актуальности статического анализа исходного кода PHP.
В настоящем исследовании предлагается рассмотреть тему выявления дефектов кода при формировании регулярных выражений для PHP методом статического анализа.
Предназначение регулярных выражений – анализ и обработка текстовых фрагментов. Так, 
например, может быть проверена корректность email-адреса или номера телефона. Регулярное выражение – область кода, которая, на наш взгляд, наиболее подвержена наличию дефектов. Формирование шаблона и выбор модификаторов является трудновоспроизводимыми для пользователя [3; с. 131].
Рассмотрим PHP-основанные программные платформы (PHP-фреймворки) «Symfony2» и «Zend 
Framework 2». Выявим дефектные участки кода с использованием программных средств. 
Используем интегрированную среду разработки «PhpStorm» [4] и статический анализатор кода 
«Php Inspections» (расширение для «PhpStorm») как программный инструментарий для проведения исследования.
Отметим, что автоматизированный статический анализ исходного кода находится на стадии развития. Сегодня статический анализ не может быть исполнен полностью программно. Тестирование семантики проектов требует последующего участия пользователя для утверждения результатов автоматизированного анализа.
Автоматизированный статистический анализ не выявил существование ошибок, но выявил наличие пяти предупреждений в исходном коде программной платформы «Zend Framework 2». 
Таким образом, в результате тестирования выявлены одна ошибка и несколько предупреждений. 
Такой результат можно объяснить тем, что в соответствии с отчетом «Security vulnerability datasource», 
рассматриваемые программные платформы обладают малым числом выявленных уязвимостей за 
2017 год. Так, для «Symfony2» выявлена только одна уязвимость, а для «Zend Framework 2» число уязвимостей составляет 6 [5, 6]. 