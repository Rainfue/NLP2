Основой функционального программирования считает функция, дающая некоторый результат в
качестве ответа. Типичный код анонимной функции, прибавляющей 1 к значению, в коротком виде может быть следующим:
value => value + 1
Функции в этой парадигме программирования бывают двух видов: чистые и нечистые. Чистые
функции не имеют зависимостей и выдают определенный результат без примесей, нечистые функции
зависят от результатов других функций и имеют общие переменные из других сущностей (классы, интерфейсы). В ФП позволяется использовать нечистые функции, однако требуется сократить их число,
переписав их в чистые. Таким образом достигается переиспользование кода и обеспечивается его модульность:
1. Легче выполняется юнит-тестирование (модульное тестирование) благодаря изолированности
функций;
2. Заранее известен результат функции еще до компиляции проекта (как в режиме dev, так и в
production) даже без использования фреймворков строгой типизации (TypeScript, Dart, Flow).
Наглядное сравнение можно провести между двумя фрагментами псевдокода:По сравнению с блоком кода слева (устаревший стандарт), мы можем сделать вывод по преимуществам, структуре и иным параметрам блока справа (стандарт EcmaScript 2017):
1. Директива const позволяет обеспечить иммутабельность заданной переменной, что положительно сказывается на устойчивости исполнения байт-кода;
2. Современные методы обработки массивов – filter и map – позволяют сосредоточиться на обработке результатов вызовов функции;
3. Разделение работы на несколько функций позволяет достичь переиспользования кода без
ущерба его качеству.
Тем не менее, разработчикам известно, что методы map, filter и прочие трансдьюсеры могут вызвать перерасход памяти, поэтому в высоконагруженных решениях рекомендуется использовать традиционные циклы (for, forEach). Так, в популярной JavaScript-библиотеке React используются именно
традиционные методы обработки массивов ввиду их скорости и небольших требований к памяти. Такие
методы не создают нескольких указателей, в то время как map и filter создают сущности, увеличивающие количество потребляемой памяти.
От вышеприведенных недостатков можно избавиться, используя специальные библиотеки-
"транспайлеры" (англ. transpiler). Данные библиотеки могут переводить код стандарта EcmaScript
2015/2016/2017 в более старые версии, понятные большинству браузеров. Среди транспайлеров можно назвать Babel, TypeScript, CoffeeScript, WebPack, Dart и т. д. Самыми популярными инструментами
являются первые два из перечисленных.
Применение функционального программирования не ограничивается обработкой однотипных
массивов данных, это также сказывается и на всем стиле написания кода. Большинство строк кодовой 
базы можно переписать в функциональном стиле, однако для освоения всех преимуществ ФП требуется пересмотр организации кода, методик тестирования и сборки проектов, в виду таких понятий как модульность, тестируемость и т. д. Нами рекомендуется ФП как фундаментальная база для новых проектов на TypeScript/JavaScript, в то время как прежняя кодовая база будет поддерживать традиционными
методами.
Таким образом, анализ исходных кодов двух парадигм программирования разных стандартов
JavaScript показал преимущества функционального подхода в стандарте EcmaScript 2017 (ES2017) без
существенных недостатков. Веб-разработчикам рекомендуется использовать новый подход к программированию на JavaScript с использованием новейших стандартов ES.
