Препроцессор PHP в наше время является одним из самых популярных языков программирования динамических web-сайтов и его функционала хватает для реализации 
большого количества задач разработки. Однако одним из его минусов является интерпретируемость, т.е. исходный код программы не преобразовывается в машинный код, а исполняется с помощью программы-интерпретатора Zend Engine, что сказывается на производительности. Сам же PHP, а точнее его интерпретатор написан на компилируемом языке С. Дистрибутив PHP содержит набор расширений. Например, для работы с базой данных можно использовать расширение mysqli. Информацию о PHP и об установленных
расширениях можно просмотреть с помощью команды phpinfo().
При разработке web-приложений может возникнуть необходимость повышения 
производительности, например, при обращении к базам данных. Или необходимо использовать внешние библиотеки. Для реализации данных задач возможностей языка PHP уже 
не хватает. В этом случае разработчики имеют возможность писать собственные PHPфункции и классы, используя язык C/C++.
Разработка на языке С/C++ предоставляет следующие преимущества:
− увеличение скорости работы;
− сокращение сложности PHP-кода.
Но имеет и недостатки:
− увеличение цикла разработки;
− снижение надежности приложения;
− сокращение возможности сопровождения.
В связи с этим, не имеет смысла весь PHP-код переписывать на C.
Для написания расширения интерпретатор Zend Engine предоставляет большое количество структур, функций и макросов. При разработке используется некоторый шаблон 
(Листинг 1).
В данном листинге представлен текст основного заголовочного файла PHPрасширения (myextension.h). Здесь определены две директивы PHP_EXTNAME и 
PHP_EXTVERSION, которые являются именем разрабатываемого расширения и его версией. Также подключается конфигурационный файл config.h и файл среды php.h. В конце 
листинга объявляется внешняя переменная точки входа модуля и указатель на нее. В расширении при помощи макроса PHP_FUNCTION объявлены две экспортируемые функции 
myFunction и myFunction2. Их количество может быть любое, но объявлять необходимо только те функции, которые непосредственно будут вызываться из PHP.
При разработке конкретного расширения указывается собственное имя файла, 
обычно совпадающее с названием расширения, а все вхождения «myextension» заменяются на конкретное название. В этом файле также могут быть добавлены подключения дополнительных файлов и указаны необходимые объявления.
Рассмотрим файл реализации данного шаблона.
В данном листинге представлен текст основного файла реализации PHPрасширения (myextension.c). Здесь определен массив функций модуля myextension_functions, в котором указаны при помощи макросов PHP_FE добавляемые функции. Второй параметр макроса определят способ передачи параметров функции. Значение 
NULL определяет, что параметры функции будут передаваться по значению. 
Далее реализована точка входа модуля myextension_module_entry. Она представляет собой специальную структуру Zend Engine. В шаблоне указаны не все значения 
этой структуры, а только название расширения PHP_EXTNAME, массив функций расширения myextension_functions, версия расширения PHP_EXTVERSION и указано, что модуль обладает стандартными свойствами STANDARD_MODULE_PROPERTIES. Неуказанные 
параметры отвечают за инициализацию модуля, его запуск и остановку, а также за информацию о модуле [1].
Макрос ZEND_GET_MODULE производит связывание модуля с интерпретатором.
В конце файла при помощи макросов PHP_FUNCTION созданы шаблоны функций. 
Функции реализуются на языке C.
Рассмотрим пример функции с параметрами и возвращаемым значением. Параметром функции будет количество членов ряда.
Если алгоритм вычисления на С/С++ уже написан, то при реализации функции в 
расширении есть два пути: либо вставить имеющийся код в расширение и вызвать его из 
функции расширения, либо преобразовать его в формат функции Zend Engine. Рассмотрим 
оба подхода.
Для разбора параметров используется специальная функция 
zend_parse_parameters. Первый ее параметр – это количество передаваемых параметров, которое можно получить при помощи специального макроса ZEND_NUM_ARGS(). 
Второй параметр содержит спецификаторы типов получаемых параметров. В примере 
этот параметр имеет значение "l", указывающее на то, что принимается одно значение 
типа long. У каждого типа данных свой спецификатор [2]. Для получения нескольких 
значений в данном параметре спецификаторы указываются подряд. Остальные параметры 
являются указателями на переменные, в которые передаются значения.
Данная функция возвращает одно из двух значений: SUCCESS – если параметры 
приняты без ошибок и FAILURE в противном случае.
Функция возвращает значение с помощью макроса RETURN_DOUBLE(), указывающего, что передается значение типа double. Для других типов также предусмотрены свои 
макросы [2].
Отличие второго подхода будет заключаться в том, что в экспортируемую функцию будет добавлен код вычислений, вместо использования функции листинга 3.
Стандартные средства компиляции в системах семейства Windows не предусмотрены. Сборка расширения производится с использованием некоторой системы программирования, обычно, Visual Studio, в которой необходимо создать и настроить проект динамической библиотеки (dll) на С/С++, а также скачать скомпилированные исходные и binфайлы PHP .
В результате сборки получим dll-файл, представляющий собой расширение. Подключить его можно также либо в файле php.ini, либо при помощи функции dl.