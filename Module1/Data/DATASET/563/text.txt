Метаданные — неотъемлемая часть любого современного веб-приложения, потому что они по
своей сути привязаны к поисковой оптимизации (SEO).
Поисковые системы и их соответствующие страницы результатов (SERPS) полагаются на метаданные, чтобы правильно индексировать и отображать относительную информацию для каждого сайта.
Кроме того, метатеги используются для правильного отображения контента с вашего сайта на
данной платформе социальных сетей, например, статей или товаров для продажи.
По этой причине очень важно понимать, как метаданные настраиваются в современном вебприложении.
Одностраничное приложение (SPA) — это современная реализация веб-приложения, которая
невероятно популярна. Большинство современных фреймворков так или иначе используют его.
Настройка метаданных в самых популярных на сегодняшний день платформах SPA будет в центре 
внимания.
Природа SPA делает настройку метаданных менее простым процессом, чем классические многостраничные приложения. Мы попытаюсь прояснить эту тему, описав следующие ключевые понятия:
1. Структура СПА.
2. Проблема с модификацией метаданных в SPA.
3. Доступные решения для метаданных, использующие, вероятно, самый популярный фреймворк SPA – React.
У вас должно быть базовое понимание HTML, метаданных и одной из трех платформ SPA, чтобы
понять концепции, которые мы рассмотрим.
Как следует из названия, одностраничное приложение буквально состоит из одной HTMLстраницы, отправленной с сервера.
Вам может быть интересно, как весь веб-сайт получается из этой пустой HTML-оболочки.
Это возможно, потому что вместе с HTML-страницей будет обширный код JavaScript на стороне
клиента, который генерирует контент для каждой страницы. Этот код включается на страницу через тег
<script>, который вы можете увидеть в теле этой HTML-оболочки.
Различные теги, начинающиеся с «мета», являются нашими метаданными, наряду с тегом заголовка.
Это не исчерпывающее описание метатегов, так как обычно используются многие другие. Но
название и описание хорошо послужат нам в этой статье.
Тег title является очень важной частью метаданных и должен отражать соответствующий заголовок для текущей страницы в браузере. Прямо сейчас это вполне подходит для домашней страницы. Но
что происходит, когда пользователь переходит на другую страницу?
Метаданные должны измениться соответствующим образом, а фреймворки SPA не делают этого
волшебным образом.
Вы не можете изменить необработанный HTML, потому что каждая страница использует одну и
ту же оболочку и, следовательно, будет отражать одни и те же метаданные для каждой страницы. Поэтому вам нужна умная стратегия кодирования.
Фреймворки SPA в значительной степени сосредоточены на внедрении HTML в DOM для отображения содержимого на экране. Это означает, что обновление тега body является центральной задачей фреймворка. По этой причине обновлением тега head часто пренебрегают.
Для многих сред SPA, таких как React, сообщество разработчиков воспользовалось недостатком,
создав библиотеки, упрощающие процесс обработки метаданных.
Это будет в центре внимания оставшейся части этой статьи — библиотеки метаданных и их использование для самых популярных платформ SPA.
Базовый код JavaScript, изменяющий теги метаданных
Прежде чем погрузиться в эти библиотеки метаданных, важно понять, что в конце концов это всего лишь код. Итак, давайте рассмотрим базовый пример кода JavaScript, который может изменить тег
заголовка и метаописание:
Следующие библиотеки будут выполнять много дополнительной работы помимо этого базового
примера кода, но всегда полезно приоткрыть завесу и увидеть, что на самом деле происходит обычно
довольно просто.
React — это компонентная библиотека для создания масштабируемых SPA. Он имеет все виды
замечательных функций, которые разработчики могут использовать для создания высокопроизводительных приложений. Обслуживание метаданных не входит в их число.
К счастью, разработчики из сообщества React выпустили react-helmet, библиотеку компонентов,
которая значительно упрощает процесс изменения ваших метаданных в теге <head>.
React-helmet теперь считается устаревшим в пользу более надежного react-helmet-async. Мы не
будем вдаваться в причины этого, просто знайте, что, когда в наши дни упоминается react-helmet,
большинство команд и разработчиков на самом деле используют react-helmet-async.
Как видите, реализация достаточно проста. Предпринимаются следующие шаги:
1. Установите react-helmet-async с помощью npm или yarn.
2. Импорт Helmet и HelmetProvider из react-helmet-async
3. Оберните все приложение в компонент HelmetProvider.
4. Используйте стандартные метатеги HTML в компоненте Helmet.
5. После выполнения этих шагов вы теперь можете использовать компонент Helmet в любом
компоненте вашего приложения React.
