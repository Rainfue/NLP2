React – это JavaScript библиотека для построения пользовательских
интерфейсов. React разрабатывается и поддерживается Facebook, Instagram, а
также сообществом отдельных разработчиков и корпораций. React
используется для разработки одностраничных и мобильных приложений. Его
цель — предоставить высокую скорость, простоту и масштабируемость. В
качестве библиотеки для разработки пользовательских интерфейсов React
часто используется с другими библиотеками, такими как Redux.
React предоставляет пользователю язык шаблонов и некоторые
callback-функции для отрисовки HTML. Весь результат работы React — это
HTML.
Рисунок 1 – HTML код.
____«Актуальные научные исследования в современном мире» ISCIENCE.IN.UA__
Выпуск 10(66) ч. 1 ISSN 2524-0986
130
Связки HTML/JavaScript, называемые компонентами, занимаются тем,
что хранят свое внутреннее состояние в памяти (например: какая закладка
выбрана), но в итоге просто реализуется HTML.
Рисунок 2 – JS код
Преимущества и недостатки библиотеки React
В библиотеке React js имеется преимущества и недостатки, в данной
работе будут рассмотрены несколько из них.
Сейчас начнем описать преимущества этой библиотеки:
 посмотрев на исходный код, будет видно как компонент выстроится.
Это может быть важным преимуществом, хотя оно ничем не отличается от
шаблонов фреймворка Angular. например нужно изменить название сайта на
имя пользователя после входа в систему. Если не используется какой-либо
фреймворк MVC, то можно сделать, как приведено на(Рисунок 1) и (рисунок 2),
а на рисунке 3 представлен повторно предыдущий пример только на React js.
Рисунок 3 – Реакт код
 Связывание JavaScript и HTML в JSX упрощает понимание
компонентов.
 Странное сочетание HTML / JavaScript может сбить вас с толку из-за
неприятной ситуации работы без библиотеки реакта. Обычно вы разделяете
представления (HTML) и функциональность (Javascript). Это приводит к
монолитному файлу JavaScript, содержащему все функциональные
возможности для одной страницы, и вы должны следить за сложным потоком
JS->HTML->JS ->.
 Связывание функциональности непосредственно с разметкой и
упаковка ее в портативный, автономный "компонент" сделает вас счастливее, а
ваш код в целом лучше. Ваш Javascript "знаком" с вашим HTML, поэтому имеет
смысл смешивать их.
Рендеринг на сервере
В типичном сайте на PHP или WordPress страница загружается из
контента, поступающего через HTTP, который был отображен на сервере и
представлен в виде полностью визуализированного HTML-файла. Это в
__ ISCIENCE.IN.UA «Актуальные научные исследования в современном мире» ___
Выпуск 10(66) ч. 1 ISSN 2524-0986
131
отличие от приложения React, созданного с помощью CRA, которое просто
отправляет файл js клиенту, а JavaScript-движок клиентского браузера создает
разметку после загрузки файла js.:
 Отсутствие официальной документации. Сверхбыстрое развитие
React.js не оставляет места для надлежащей документации, которая сейчас
немного хаотична, так как многие разработчики вносят в нее индивидуальные
изменения без какого-либо системного подхода;
 Реакт не имеет ясной цели. Это означает, что разработчики иногда
имеют слишком большой выбор;
 Долго овладеть им. React JS требует глубокого понимания того, как
интегрировать пользовательский интерфейс в структуру MVC.
Рисунок 4 – Реакт код
Этот синтаксис в виде тегов на (рисунок 4) не является ни строкой, ни
HTML. Это синтаксический сахар JavaScript, называемый JSX.
Настоятельно рекомендуется использовать JSX вместе с React, так как
он максимально четко описывает внешний вид пользовательского интерфейса,
а также включает в себя всю мощь JavaScript.
 причины использования JSX с реакт:
React не требует использования JSX. Однако это считается крайне
полезным, поскольку JSX обеспечивает абсолютную видимость при работе с
React Fiber — прогрессивная реализация ключевого алгоритма React.
Это прорывное достижение исследований команды разработчиков React, которые длились
более двух лет.
Цель Fiber в улучшении производительности при работе с анимацией и
организации элементов на странице. Главная особенность этой архитектуры— это
инкрементный рендеринг (способность разделять работу рендера на единицы и
распределять их между множественными фреймами).
Есть и другие особенности, включающие возможность приостановки, отмены или
повторное использование входящих обновлений DOM-дерева, возможность расставления
приоритетов для разных типов обновленийи согласование примитивов
Цель исследования, представленного в статье, состоит в проверке
производительности новейшего алгоритма.
Обзор литературы. В настоящее время сложно представить крупную компанию
без собственного web-приложения. Вместе с интересом компаний растет количество
библиотек и фреймворков, нацеленных на облегчение разработки качественных webприложений с использованием одного языка программирования [1]. На текущий момент
лидирующим является JavaScript. Это обусловлено нежеланием пользователя
устанавливать дополнительные программы, при стремлении получить результат
максимально быстро [2].
Фреймворки сегодня - неотъемлемая часть web-разработки, они позволяют
ускорить и упростить процесс создания приложения, решают проблему синхронизации
внутреннего состояния и пользовательского интерфейса. Использование готовых
инструментов и библиотек, протестированных множеством разработчиков, является
наиболее приемлемым подходом при создании функциональных web-приложений [3], [5].
React от Facebook является одним из самых простых в освоении. Библиотека
направлена не только на создание пользовательского интерфейса одностраничного web
приложения (SPA), но и на мобильную разработку [4], [6].


 Колышкина Н.С., Гладских А.П., 2020
 Ядро включает в себя только API необходимый для объявления компонентов. Оно
не включает алгоритм согласования или какой-либо платформо-специфический код. Этот
код находится в компонентах React DOM и React Native [7], [8].
Дискуссия. Для достижения поставленной цели были поставлены и решены
задачи: раскрыть содержание понятия ReactFiber, определить цель его создания, выявить
улучшения в производительности браузера при использовании ReactFiber.
Для корректной работы с web-страницами нужно иметь возможность
остановить/возобновить работу, приоритизировать разные типы работы, использовать
работу повторно, отменить работу. Под работой подразумеваются любые вычисления и
рендеринг.
При работе с пользовательскими интерфейсами много работы выполняется
одновременно, и это может привести к скачкам анимации и медленному отклику на
действия пользователя. Более того, часть работы может быть необязательна, если она
заменен. Для решения этой проблемы потребуется разделить работу на единицы - fiber
(волокно).
Как уже было сказано выше, цель Fiber в увеличении производительности
относительно прошлой архитектуры React - Stack.Преимущество данной реализации стека
в том, что можно сохранить стек контейнеры в памяти и выполнить тогда и где это
необходимо.
Чтобы проверить действительно ли новая архитектура выполняет свою функцию
создадим два компонента. Первый компонент работает на старой версии архитектуры
(Stack), второй — на новой версии (Fiber). При запуске обоих компонентов в браузере,
становится очевидна разница в производительности: анимация второго компонента
работает плавнее и стабильнее анимации первого.
Во вкладке Performance в браузере есть поле Frames - время рендера компонента.
Прирендере происходит процесс сравнения старого и нового виртуального дерева. От
того, насколько быстро выполняется этот процесс, зависит частота смены кадра. В данном
случае она равняется 700 ms, и это достаточно долго (рисунок 1).
Рисунок 1. Работа компонента на ядре Stack.
Отсюда можно сделать вывод, что основной проблемой Stack архитектуры было
медленное выполнение метода render у компонентов. Ускорить его за счёт оптимизации
самого алгоритма разработчикам на удалось.
На рисунке 2 представлена работа компонента на архитектуре Fiber. Кадры
меняются с частотой один раз в 17 ms. Эта скорость получена за счет того, что Fiber
разбивает функцию, которая выполняется долго, на небольшие функции, которые
выполняются быстро. Такая производительность позволяет работать с webприложениями, которые переполнены анимацией и сложными элементами, без
торможений.
Рисунок 2. Работа компонента на ядре Fiber.
Выводы. Fiber — это новая реализация стека, подстроенная под React компоненты.
Архитектура ReactFiber имеет значительные преимущества в улучшении
производительности рендеринга. Это было доказано на примере двух компонентов,
основанных на старой архитектуре (Stack)и новой (Fiber