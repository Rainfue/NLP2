В связи с разработкой веб-сервиса привязки метеоданных на растровых изображениях возникла необходимость интеграции NCL в PHP. NCL (NCAR Command Language) – свободно распространяемый интерпретируемый язык, предназначенный для визуализации и обработки географических или атмосферных данных. Он позволяет легко преобразовывать цифровые данные в
изображения, при этом поддерживает практически весь спектр форматов, которые используются
для хранения географических и атмосферных данных (netCDF3/4, GRIB1/2, HDS-SDS, HDF4-EOS
и другие).
PHP-интерпретатор используется как приложение веб-сервера. Можно выделить следующие
способы интеграции NCL в PHP: консольный способ, способ представлений и способ расширения.
Консольный способ
Данный способ основывается на возможности PHP работать с консолью операционной системы и представляет собой наиболее очевидное решение. При нем заранее написанный код NCL
хранится в файлах-сценариях. PHP имеет список сценариев и список переменных, которые необходимо передать NCL-скрипту. Передача данных осуществляется за счет переменных окружения.
В необходимый момент PHP задает переменные окружения, вызывает консольную утилиту NCL,
указав ей путь до файла-сценария. Данные PHP забирает в месте заранее определенным для каждого сценария (это может быть переменная окружения, выходной поток или файл). Управление
NCL-процессом во время его работы практически невозможно.
При работе этого способа безопасность данных находится на допустимом уровне, так как получить несанкционированный доступ к данным возможно только через root-доступ к консоли сервера. Консольный способ является наименее затратным по времени его кодирования программистом (порядка несколько часов).
При изменении версии NCL будет необходимо обновить версию интерпретатора на сервере и
изменить ряд входных параметров, если это потребуется. При этом код существующих скриптов
NCL изменять либо не придется, либо придется изменять в незначительной степени, в связи с тем,
что они являются скриптами NCL, совместимость с которыми в новых версиях будет поддерживаться.
Способ представлений
Данный способ можно рассматривать как модифицированный вариант предыдущего, однако
данная модификация полностью меняет архитектуру взаимодействия и принцип обмена данными.
Модификация консольного способа заключается в том, что NCL-скрипт не храниться в отдельном
файле, а генерируется «на лету» с помощью PHP.
В веб-ориентированных системах давно переменяется парадигма программирования MVC. Её
суть заключается в отделение бизнес-логики приложения от описания объектов и генерации пользовательских ответов (чаще всего пользовательского интерфейса). Практическую реализацию способа представлений можно представить как замену стандартного генератора представлений в
MVC-структуре на некоторый компонент, который реализовывал бы генерацию NCL-скрипта по
методу старого генератора и передавал бы результат NCL-утилите. При этом для моделей и контролеров интерфейс и парадигма взаимодействия остается та же самая.
Обмен данными при способе представлений происходит за счет указания констант и переменных в теле NCL-скрипта. Возврат данных от NCL c помощью PHP осуществляется в генерируемых «на лету» файлах. Управление NCL-процессом осуществляется за счет формируемых
внутри NCL-скрипта последовательностей команд. В этом случае достаточно правильно организовать взаимодействие и фильтрацию входных данных (которую придется организовывать в любом
случае) чтобы избежать проблем с безопасностью.
Поскольку для управления NCL в случае способа представлений используется интерпретируемый код сценария, то реализация этого способа будет работать медленнее, чем скомпилированный код контроллера для способа расширения. Однако в связи с тем, что решение основных
задач не требует большой вычислительной нагрузки, то эта разница в производительности будет
практически не заметна. Время, затраченное на кодирование способа представлений, будет занимать больше времени, чем кодирование консольного способа, приблизительно в 1,5 раза.
Способ расширения
Этот способ основывается на том факте, что интерпретатор PHP может быть расширен за счет
дополнительных модулей написанных на языке C++. Таким образом, поскольку NCL распространяется по лицензии GPL и имеет открытый исходный код, написанный на C++, возможно создать
расширение, переносящие весь функционал NCL в PHP. При данном способе реализации обмен
данными осуществляется за счет обычных внутриязыковых взаимодействий между функциями,
объектами и переменными. Контроль над исполнением NCL-процессов осуществляется за счет
специального контроллера, который можно интегрировать в функции NCL, во время их интеграции в PHP. Этот способ не имеет недостатков с безопасностью, поэтому является более защищенным.
По сравнению с предыдущими двумя способами, способ расширения является гораздо более
затратным для кодирования. Без подробного анализа точное время кодирования сложно оценить,
но, имея опыт разработки расширений для PHP и представляя объем функций NCL, можно сделать
эмпирический вывод, что данная задача займет порядка 200 ч. Реальные сроки, за счет выявлений
несовместимости различных библиотек, версий компиляторов и прочих подводных камней может
быть в несколько раз больше.
При выходе новой версии NCL или PHP специалисту, ответственному за поддержку данного
проекта, будет необходимо произвести многочасовые работы по анализу и внедрению изменений.
Кроме того, поскольку внедрение функций из новой версии может лавинообразно повлечь за собой изменение PHP-функций расширения, то это может привести к значительному изменению в
самих NCL-основанных алгоритмах.
Результаты работы
Результатом взаимосвязи PHP и NCL, в соответствии с концепцией способа представлений,
является веб-сервис, генерирующий изображение формата JPEG с контурами земной поверхности
по заданным в формате XML координатам. В данный момент сервис находится в стадии разработки, однако демонстрирует результаты взаимодействия NCL и PHP (рис. 1).
Проектирование и реализация подобного взаимодействия являются важным этапом процесса
разработки архитектуры сервиса привязки метеоданных, полная архитектура которого приведена
на рис. 2. Данный сервис предназначен для привязки метеоданных к растровым изображениям в
рамках клиент-серверного взаимодействия. В данном проекте NCL выполняет роль картографического ядра, обрабатывающего метеоданные и размещающего их на изображении, а PHP является
общим контроллером, обеспечивающим эффективную сетевую работу приложения, связь с базой
данный и выполнение бизнес-процессов.
Несмотря на то, что по качественным характеристикам способ расширения опережает как
способ представлений, так и консольный способ, затраты на его реализацию и сопровождение
превышают получаемые выгоды. В связи с этим, предпочтительно реализовывать способ пред-
ставлений, как решающий все поставленные задачи, удовлетворяющий качественным критериям и
обладающий низкой трудозатратностью для программиста.
Кроме того, дополнительным преимуществом данного способа является то, что он концептуально вписывается в современные устоявшиеся шаблоны веб-программирования, поскольку таким
же способом организуется взаимодействие между PHP и JavaScript, то есть способ представлений
является привычным для любого опытного веб-программиста, что легко позволит освоить работу
с ним. Также данный способ легко распространяем на другие подобные ситуации, что может позволить в будущем значительно расширять функционал сервиса, без больших трудозатрат на интеграцию.
В рамках данной работы были выполнены проектирование и реализации схемы взаимодействия PHP и NCL, что и является её результатом.