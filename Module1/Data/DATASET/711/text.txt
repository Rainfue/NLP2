Системы мониторинга беспроводного оборудования являются важным
компонентом сетевой инфраструктуры. Веб-интерфейсы в свою очередь являются
главным каналом для мониторинга и управления сетевым оборудованием [3].
Растущее число пользователей системы мониторинга беспроводного
оборудования влечет за собой вопрос о необходимости повышения
производительности веб-интерфейса. Существует множество способов улучшения
производительности, в том числе, разделение серверной и клиентской логики
проекта. Применение React может помочь повысить производительность и
уменьшить нагрузку на сервер.
Сайты обычно создаются с помощью серверного приложения, которое
запрашивают данные и формируют HTML-страницы. Этот подход замедляет
процесс, так как каждый раз приходится перезагружать страницу. Для ускорения
работы требуется доработка серверной архитектуры приложения.
SPA – это приложение, которое работает в браузере и не перезагружает
страницу во время работы [1]. Этот тип приложений появился вместе с HTML5 и с
развитием стандартов языка JavaScript. SPA-приложения написаны на языке
JavaScript, который является единственным языком, интерпретируемым браузером.
Различные библиотеки и расширения, такие как TypeScript, предоставляют
дополнительные возможности для написания SPA-приложений.
~ 198 ~
Разработка SPA сочетает в себе простоту и быстроту в загрузке. Это
обусловлено тем, что при создании одностраничного приложения формируется
лишь единственный файл – «index.html», включающий в себя соответствующие
стилевые файлы, и главный файл, написанный на языке JavaScript. В отличие от
обычного веб-приложения, переход между страницами не вызывает перезагрузку
страницы целиком в браузере и дополнительные запросы к серверу. Основная
логика одностраничного приложения обычно полностью загружается по первому
запросу [2]. Таким образом, сервер пересылает на клиентскую сторону только
необходимые данные из базы, на основании которых генерируются страницы с
использованием шаблонов, описанных в JavaScript файле. Следовательно, SPA –
это приложение, написанное на языке JavaScript и позволяющее за счет одного
файла значительно ускорить процесс загрузки приложения [4].
С JS-стандартами возникло много фреймворков для SPA, включая React, Vue
и Angular. Они помогают работать с данными и создавать наборы компонентов,
которые можно использовать многократно.
Навигация в приложении осуществляется при помощи специальных
библиотек, таких как React-Router, VueRouter и прочих, которые отвечают за
сопоставление путей соответствующим компонентам и определение того, где
нужно отобразить каждый из них.
Данные в SPA управляются через состояния, которые инициализируются при
вызове компонента. Операции выполняются на стороне клиента, а на сервер
передаются только обработанные данные. Хранилище данных доступно из любой
точки приложения.
Для сравнения скорости загрузки проекта были выбраны две реализации:
серверное приложение и одностраничное веб-приложение (SPA). Необходимо
учитывать такие характеристики, как скорость загрузки и переход между
страницами. В настоящее время, два наиболее распространенных критерия для
оценки скорости загрузки веб-сайта – это первоначальная загрузка сайта и
переход между страницами. Первоначальная загрузка сайта включает в себя
подсчет количественного показателя времени, которое требуется для загрузки
содержимого сайта каждым элементом веб-страницы. Наиболее важным
критерием, когда речь идет о переходе между веб-страницами, является
количество запросов на сервер и скорость загрузки при переходе на новую
страницу. Первоначальная скорость загрузки серверного приложения была
измерена и составила 2.07 секунды, данный трафик указан на рисунке 1.
Рисунок 1 – Трафик загрузки серверного приложения
Первоначальная скорость загрузки одностраничного веб-приложения
составила 1.42 секунды, трафик представлен на рисунке 2.
~ 199 ~
Рисунок 2 – Трафик загрузки одностраничного веб-приложения
Переход по страницам в серверном приложении похож на рисунок 1. Это
связано с тем, что при переходе по страницам, каждый раз приходят данные с
сервера (стилевые, скриптовые и сама HTML-страница), данный трафик
представлен на рисунке 3.
Рисунок 3 – Трафик перехода по страницам серверного приложения
В случаи со SPA, виден значительный прирост в скорости загрузки. На рисунке
4 видно, что с сервера получаются только необходимые данные из базы, а стилевые,
скриптовые и сама HTML-страница больше не загружаются.
Использование одностраничной веб-приложения (SPA) как архитектуры
проекта снизило время загрузки страниц и увеличило эффективность работы
пользователей. Также применение данной архитектуры способствует более
простой поддержке и обновлению проекта.
Рисунок 4 – Трафик перехода по страницам одностраничного веб-приложения