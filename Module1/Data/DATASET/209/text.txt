Интернет вещей (IoT) есть новая ИТ-парадигма, которая имеет цельюобъединитьврамках единой системы объекты и данные из пространств виртуальных, социальныхифизических сущностей, условно называемых «вещами» [1]. Например, она можетобъединять в единой системе программные средства и распределенные данные, представленные моделью облачных вычислений, информационные и программныекомпоненты социальных сетей и сообщества людей, которые в них сформировались, атакже сенсорные сети, которые формируют множество источников информацииосостоянии объектов физического мира. Новое свойство модели IoT состоит в том, чтоонарассматривает множество разнородных сущностей, обладающих встроеннымивычислительными и коммуникационными возможностями и имеющих доступ к различнымисточникам информации, в единой программной архитектуре и в едином семантическоминформационном пространстве, которое дополняется богатым набором облачныхвеб-сервисов семантического Web 2.0, установленного поверх коммуникационной компонентыИнтернета. И именно это свойство открывает для систем IoT уже в настоящеевремяогромные перспективы. Она, по сути, предоставляет человеческому сообществу и индустрииновуюсемантически богатую и мощную информационную интернет-технологиюболее высокогоуровня интеллектуальности по сравнению с отдельными ее компонентами, которыеразработаны, например, применительно к концепции облачных и грид-вычислений, социальных сетей и в концепции интеллектуальных сенсорных сетей. Возможностьформировать приложения, работающие одновременно с объектами социального, виртуального и физического миров, есть большое достоинство IoT, существенноповышающее масштаб приложений, с которыми эта технология в состоянии работать, ирасширяющее множество потенциальных классов приложений. Наверное, главная особенность систем IoT состоит в том, что объектывиртуального,социального и физического миров – это распределенные автономные сущности, аихвзаимодействие в концепции IoT является основным механизмом, управляющимповедением каждого объекта и формирующим эмерджентное поведение системывцелом.В отдельном приложении индустриального уровня общее количество такихобъектовможет быть огромным, например, исчисляться десятками и сотнями тысяч идажемногобольше. Далее, особенность систем типа IoT состоит и в том, что любое его приложениеимеетсетевую структуру, централизованное управление которым невозможно. Действительно,приложение IoT на мета-уровне есть сетевой объект с огромным количествомузлов,функционирующий на основе локальных взаимодействий, для которого трудно представитьдаже саму возможность централизованного управления. Еще одной важной особенностью систем рассматриваемого типа является то, чтовсетиIoT может исполняться параллельно много приложений (решаться много задач), которыетребуют для своего исполнения одни и те же ресурсы и сервисы. Очень важно подчеркнуть,что в концепции IoT все доступные ресурсы являются ресурсами общего пользования.Другими словами, в системе IoT ни один ресурс не имеет владельца, и это сразуостроставит ключевой вопрос о том, каким образом в системе будет решаться проблемараспределения ресурсов и разрешения конфликтов. Очевидно, что отмеченные и другие особенности приложений IoTпредъявляютспецифические требования к свойствам методов, архитектур и технологийпрограммирования, которые в состоянии поддержать разработку подобныхсистем.Представляется, что из современных ИТ только технология распределенных автономныхпрограммных агентов, способных моделировать взаимодействующие объектывиртуального, социального и физического миров в едином информационномпространстве,является практически единственным претендентом на роль методологии итехнологииконцептуализации и разработки приложений IoT. Действительно, технология агентов в Дорожной карте 2004 года [2] определяетсякактехнология вычислений на основе взаимодействий, и эта черта технологии агентовявляетсяключевой для IoT. В агентской модели выполняются отдельными агентами автономно(этивычисления «не видны» другим модулям системы), а их координация выполняетсязасчетих информационных взаимодействий. Очевидно, что эти особенности технологииавтономных программных агентов хорошо соответствуют требованиям со сторонызадачIoT.Интеграция модели IoT с моделью агентов и многоагентных систем(МАС) наконцептуальном уровне, на уровне архитектуры и программной реализации приложенийIoTрассматривается в настоящее время в научном сообществе как новый долговременныйтренд, асоответствующее направление исследований и разработок уже получило название Интернетагентов (англ. Internet of Agents, IoA) [1]. С этой концепцией связывают большие надежды,прежде всего в части новых вычислительно эффективных распределенных алгоритмическихсредств решения задач из области IoT и технологии их программной реализации. В данной работе рассматривается абстрактная постановка задачи для IoA-приложенийописанного выше класса, даются примеры таких приложений (раздел 2), описываютсяосновные особенности модели таких IoA-приложений (раздел 3), предлагается архитектураосновной компоненты модели IoA, которой является распределенная программно-коммуникационная инфраструктура, поддерживающая взаимодействие агентовипреобразующая множество отдельных агентов в сетевой объект, функционирующийкакединое целое (раздел 4). В заключении кратко характеризуются перспективыIoAкакпарадигмы разработки и программной реализации сложных приложений рассмотренногокласса.
Существует множество задач, которые могут успешно решаться с использованиемпарадигмы IoA для приложений IoT, однако, по-видимому, не для всех таких приложенийпарадигма IoA является наилучшей. В данной работе рассматривается класс приложений, вкоторых:
a) IoT-приложение решает на абстрактном уровне задачу поставки сервисов по запросам, причем не обязательно web-сервисов, хотя в процессе формирования ипоставкизапрашиваемого сервиса, как правило, используются те или иные web-сервисы;
б) в процесс решения вовлечено большое количество относительно автономныхобъектов (физических, виртуальных и социальных), каждый из которых решает туилииную специализированную подзадачу в интересах глобальной задачи приложения;
в) основным способом поиска решения и его исполнения является взаимодействие, возможно, значительного количества объектов, которые совместно формируюти, возможно, коллективно исполняют заявку на сервис. Самым естественным и понятным примером такого IoT-приложения являетсякрупномасштабная сенсорная сеть, которая собирает информацию о состоянии некоторогомножества физических или социальных объектов (параметров погоды, параметровгеофизического характера, информацию о состоянии объектов роботизированногопроизводства, измеряет интенсивность информационного обмена в каком-то сегментенекоторой социальной сети и т.п.). Информацией этой сети могут пользоваться сразумногопотенциальных потребителей, каждый из которых решает свою прикладнуюзадачу, используя для этого те или иные наборы данных, собираемых в сенсорной сети. Прирешении задач потребителя сервиса система IoT может запрашивать облачные сервисы. Конечной целью приложения может быть выдача управляющих воздействий на некотороемножество объектов, физических, виртуальных или социальных, которые поэтимкомандам выполняют какие-то, возможно, групповые, действия. Внешне по-другому выглядят задачи поставки логистических сервисов. Примерамитаких сервисов являются, например, курьерский сервис, и/или сервис сбора идоставкипочтовых отправлений, и/или сервис доставки покупок из интернет-магазинов. Вкачествепримера может рассматриваться также IoA-приложение, которое специализируетсянавыполнении заявок на сбор информации о наземных объектах средствами космическогонаблюдения [3]. Приложением такого же класса может быть также система, поставляющаясервис транспортной логистики [4] и/или система, планирующая выполнение заказовнапроизводство некоторого продукта в B2B-производственной сети предприятий [5-7] ит.п. Заметим, что общая черта упомянутых типов приложений состоит в том, что онимогутбыть представлены задачей детерминированного управления в системах со случайнымпотоком заявок на поставку, возможно, сложных сервисов. Оказывается, что все этизадачимогут быть сведены к общей абстрактной модели. Дадим кратко ее формальное описание. Предположим, что рассматривается задача управления выполнением потока заявок(заказов) Su  S на сервис. В качестве частного случая сервиса может рассматриватьсязаказ на производство некоторого изделия или доставку некоторого груза (пакетадокументов, посылки и т.п.) из одной точки пространства в другую заданнуюточку. Этизаявки порождаются объектами Oi O физического, виртуального или социальногомираскоординатами Gi G в случайные моменты времени T(i) Tu
. При этом координатымогутбыть заданы как в географической системе координат <широта, долгота>, такивнекоторой локальной системе координат, например, <улица, номер дома>. Полагаетсятакже, что координаты Gi источника заказа Ri являются случайнымвеличинами, принимающими значения из фиксированной области значений G. Заказы поступают в систему в реальном времени, и каждый заказ существует в ней от момента, когдасистемаего получает, до окончания исполнения заказа или до момента отказа системыилизаказчика от выполнения заказа по некоторым причинам. С другой стороны, предполагается, что в системе существует множество провайдеровзапрашиваемого сервиса Pj  P . Они могут иметь географические координатыGj G,которые могут зависеть от времени, если провайдер мобильный. Каждая заявка поступаеткодному из провайдеров в соответствии с некоторой принятой политикой. Всистемесуществует также еще множество объектов Ek  E , которые взаимодействуют с объектамимножества Pj  P и множества Su  S , участвуя в выполнении заказов, поступающихотобъектов множества O . Важной компонентой постановки задачи является коммуникационная среда , котораяобеспечивает возможность двунаправленных коммуникаций между частьюиливсемипарами объектов, введенных выше в рассмотрение. Предполагается также, чтосредаобладает возможностью поддерживать семантическое взаимодействие объектов втерминахпонятий общей онтологии, в частности, поддерживать обмен сообщениями междунимивсоответствии с некоторым множеством протоколов взаимодействия (случаевиспользования). Задача IoT-приложения (системы обслуживания) состоит в том, чтобыобеспечитьвыполнение потока заявок на сервисы, поступающих в реальном времени, с требуемымкачеством, которое формально оценивается заданным набором показателей {,...,}1mIIIинекоторой политикой, позволяющей построить отношение порядка для любойпарывекторов < r s I , I >, т.е. сравнить любую пару вариантов выполнения заявки. В описанной модели каждый объект множеств S , O, Pи Eпредставляетсяагентомсоответствующей роли, а задача обслуживания потока заявок решается на основе переговоровэтих агентов с использованием некоторого множества протоколов, которые реализуютраспределенные механизмы взаимодействия объектов системы в интересах решения задачи. Рассмотрим два простых примера конкретных приложений, в которых постановказадачи сервисного обслуживания отвечает приведенной формальной постановке задачи. 1. Такси с беспилотными автомобилями
Реально такси-сервис с беспилотными автомобилями может появиться уже примерночерез несколько лет. Отсутствие человека на борту автомобиля в этом случае потребуетизменения модели планирования исполнения заказов. Заметим, что уже сейчас наиболееэффективные системы управления исполнением заказов используют алгоритмыуправления,в которых значительная роль отводится программным агентам, выступающимвролипосредников между шофером такси и заказом (клиентом) [8]. Внихосновнаявычислительная нагрузка переносится на взаимодействие этих агентов. Благодаряэтомуудается построить эффективные системы управления заказами и такси в реальномвремени,причем важная роль в этой системе отводится web-сервисам [8]. Эта система являетсяпримером практической реализации концепции IoA. Ожидается, что в системах планирования заказов в случае беспилотных автомобилейроль агентских технологий существенно возрастет, поскольку на агентов потребуетсявозложить еще и некоторые функции диспетчера. Кроме того, дополнительно появитсяещеодин новый аспект работы системы планирования заказов. Он обусловлентем, чтосовременный бизнес ориентируется на клиента и потому заинтересован в поиске решенийна множестве компаний, объединенных в B2B-сеть, узлы которых (отдельные компании)конкурируют в борьбе за клиента. Это означает, что программные агенты, совместнорешающие задачу планирования, должны будут функционировать в распределеннойпрограммно-коммуникационной среде, обеспечивающей семантическое взаимодействие распределенных агентов с доступом к веб-сервисам. Эта среда позволит объединитьмножество физических, виртуальных и социальных объектов, присутствующихврассматриваемом приложении как сущности IoT, в единую систему (в сетевойобъект)взаимодействующих программных агентов, «населяющих» Интернет. Формально рассматриваемая задача может быть представлена в терминах абстрактноймодели, приведенной выше. Пусть Su  S – элементы потока заказов на такси, для каждогоиз которых указано местонахождение клиента Gi Gи время генерации заказа T( )
0i T;
Pj  P – диспетчерская, в которую поступил этот заказ, и Ek E– произвольныйбеспилотный автомобиль, который работает на линии в момент генерации заказа. Далее, если каждому объекту, введенному в постановке задачи, поставить в соответствие агента, содержащего индивидуальную информацию об этом объекте, представленнуюв терминахобщедоступной онтологии, если обеспечить их доступ к веб-сервисам, а также поместитьвобщую программно-коммуникационную среду , поддерживающую обмен сообщениямимежду агентами и заданное множество протоколов распределенного решения задач, топостроенное таким способом программное приложение будет приложениемклассаIoA, которое формализуется в терминах приведенной выше модели. 2. Курьерский сервис
Курьерский сервис в настоящее время является очень востребованным у населения. Ониспользуется при прямом обмене документами между компаниями, в доставке почтовыхсообщений, в доставке товаров из интернет-магазинов и т.п. Существуют различные варианты организации курьерской доставки. Они различаютсяналичием или отсутствием промежуточных пунктов хранения, видомтранспорта, используемого для доставки документов, посылок, товаров и т.д., стратегиейдоставки. Сейчас наиболее сложной является задача курьерской доставки с использованиемкросс-докинга. Заметим, что под кросс-докингом в курьерском сервисе понимается бизнес-модель доставки, в которой участвуют несколько курьеров. Они должныстыковатьсвоитраектории передвижения в зоне доставки таким образом, чтобы сэкономить топливоиускорить доставку попутных сообщений при минимальном удлинении собственныхтраекторий движения. Легко проверить, что формальная модель процессов курьерской доставкималочемотличается от описанной выше модели сервиса такси. Она естественнымобразомпредставляется в тех же терминах агентской концепции, что и абстрактная модель, описанная выше. 3. B2B-сети производственной логистики
Сетевая организация бизнеса рассматривается в настоящее время как перспективнаямодель ведения бизнеса. В ней используется концепция B2B-сети, которая стала предметомисследований и разработок после 2000 г., особенно в программах Европейскойкомиссии(FP6, FP7, Горизонт 2020) при ориентации на модели распределенного бизнеса всетяхпроизводственной и транспортной логистики, а также в других типах распределенногобизнеса [6]. Достаточно упомянуть, что в рамках названных программ более 40 проектовтак или иначе касаются исследований и разработок по этой теме. Важно отметить, что в соответствии с тенденциями в области современныхмоделейтерриториально распределенного бизнеса эта модель бизнеса становится необходимостьювсвязи глобализацией рынка рабочей силы, специализацией предприятий и разделениемтруда, ростом сложности продукции и сервисов, а также в связи с новыми возможностямиведения распределенного бизнеса, которые обеспечиваются облачнымресурсамиисервисами Web 2.0. В современной трактовке B2B-сеть понимается как территориально распределеннаясетьпредприятий (компаний), способных выполнять какое-то множество специализированных видов работ по производству тех или иных продуктов или поставлять какие-тосервисы.Обычно в такой сети технологические возможности предприятий взаимно дополняютдругдруга. Поэтому они заинтересованы в кооперации при производстве сложных изделийилипоставке сложных сервисов, когда итоговая стоимость конечного продукта оказываетсяменьше за счет специализации, более дешевой рабочей силы и возможногоснижениятранспортных расходов. С содержательной точки зрения предполагается, что заказы, например, на производствокаких-то материальных продуктов, транспортировку, сборку сложных изделий, на поставкусервисов и т.п. могут поступать в сеть из внешней среды в любой ее узел, а такжемогутпорождаться самими узлами сети. Термин заказ обозначает задание на производствокакого-то, возможно, сложного продукта или на поставку сложного сервиса. Полагается,что у заказа есть конкретный заказчик, и он же является потребителемрезультата.Выполнение каждого заказа реализуется бизнес-процессом – частично упорядоченныммножеством работ, каждая из которых требует определенных технологическихвозможностей, адекватных технических, человеческих, временных и другихресурсов,которыми должно обладать предприятие-исполнитель (узел сети), готовое взятьсязавыполнение всего заказа, или такими возможностями должны обладать предприятия,вовлеченные в кооперативное исполнение заказа. Данное приложение является одним из типичных представителей приложенияIoT, вкотором участвуют физические объекты (предприятия, цеха, станки, сенсоры), социальныеобъекты (рабочие, менеджеры разных уровней и специализации) и виртуальные объекты(программное обеспечение). Центральным элементом программной и коммуникационнойподдержки работы B2B-сети является распределенная инфраструктура, задача которой–обеспечить семантическое взаимодействие и коммуникации узлов сети, а также ихдоступкоблачным сервисам и ресурсам. Абстрактная модель исполнения заказов в B2B-сети имеет ту же форму, что ивдругихранее рассмотренных примерах приложений IoT. Однако она более многообразна ипотомуможет рассматриваться в качестве примера, который удобен для анализа наиболееобщихособенностей распределенных приложений IoT, реализуемых в концепции итехнологииIoA. По этой причине далее оно рассматривается в качестве демонстрационного примера. Можно подумать, что МАС-технология, имеющая уже более чем тридцатилетнююисториюисследований и разработок в области методологий и инструментальных средств, можетбытьбыстро и просто адаптирована под класс приложений IoT. Однако не все так просто. Во-первых, технология МАС, по существу, до настоящего времени не имеет хорошоразвитых и методологически удобных средств разработки приложений промышленногоуровня. В последние годы это отмечается в ряде работ по технологии МАС[1, 9-12], ивних этот факт указывается как серьезная проблема теории и практики МАС, следствиемкоторой является слабое использование МАС-технологий на индустриальномуровне. Во-вторых, существующие методологии и инструментальные средстваМАСрассматривают обычно другой класс задач, чем тот, который характерендляМАС-концептуализации приложений IoT. Действительно, для МАС-приложений IoTхарактерныпростые модели агентов, которые взаимодействуют сложным образомс большимколичеством других простых агентов. Однако традиционные методологии и инструментытехнологии МАС преимущественно ориентированы на создание сложных BDI-агентовсразличными ролями, которые решают сложные задачи и относительнослабовзаимодействуют. Достаточно напомнить, что платформа JADE, которая используетсячаще других при разработках приложений, вообще рассчитана только на диалоговоевзаимодействие агентов и вообще не имеет инструментов для реализации протоколов. 
В-третьих, IoA как особая парадигма вычислений в системах IoT имеет правонасуществование только в специальном классе приложений. Как видно из материалапредыдущего раздела, в IoT-приложениях рассматриваются, по существу, не отдельныеагенты, а сложный сетевой объект, состоящий из большого количествавзаимодействующих простых автономных агентов, заданных в коммуникационнойсредеInternet. И это очень важная особенность IoA как парадигмы вычислений. Поведение сетевогообъекта складывается из локальных взаимодействий большого количества отдельныхпростых объектов, представленных в системе автономными программнымиагентами. Заметим, что именно так устроены системы с самоорганизацией, многочисленные примерыкоторых дает природа. Все биологически-инспирированные принципы самоорганизации, например, «роевой интеллект» (англ. swarm intelligence) и другие парадигмыпостроеныточно так же. Хорошо известно, что в них глобальное поведение, проявляющееся намета-уровне, не выводится из поведения отдельных объектов. То же самое следует ожидатьиотприложений IoT, реализованных на основании МАС-концепции и технологии. Посути, эмерджентное поведение сетевого объекта как единого целого есть проявление намета-уровне поведения большого числа агентов, взаимодействующих на локальномуровнепозаданным правилам (в соответствии с заданными протоколами). Очень важно отметить, что в упомянутой ранее системе управления такси [8] основнойвычислительной процедурой является локальная процедура мэтчинга, в которой пара агентов–Агент ресурса (он представляет конкретный автомобиль и его текущее состояние) иАгентзаказа взаимодействуют для оценки возможности соответствующей сделки. Числотакихвзаимодействий в процессе планирования выполнения каждого заказа оказывается достаточнобольшим, и авторы разработки экспериментально зафиксировали самоорганизующийсястильработы системы управления такси, в том числе неожиданные смены устойчивого состояниясистемы
1
. Несомненно, что это будет иметь место и для других приложений IoT. Но с другой стороны, этот факт практически исключает возможность использованиядляпроектирования и разработки систем управления поведением сетевого объектаIoTсуществующих методологий и инструментов МАС. Это объясняется также хорошо известнымфактом, что методология и технология проектирования и разработки самоорганизующихсяМАС могут выполняться только по принципу «снизу–вверх» (см. обзор таких методологийитехнологий в [13, 14]), в то время как все существующие методологии и технологииМАСиспользуют подход «сверху–вниз». По существу, это означает, что методологиюпроектирования и технологию разработки для IoA-приложений необходимо разрабатыватьпрактически заново, опираясь на существующий задел в области технологиисамоорганизующихся МАС [13, 14]. Но и IoA-архитектура IoT-приложения должна быть устроена иначе, чемархитектуратрадиционной МАС. В традиционных МАС основным объектом внимания при разработкеявляется агент, в частности, его поведение при исполнении назначенных ему ролей, атакжеотносительно простая коммуникационная компонента агента, ответственнаязаформирование исходящих сообщений и интерпретацию входящих сообщений. АгентыIoA-приложений, напротив, будут намного проще, и потому их программирование не должносоставить труда. Для таких систем основной задачей проектирования и разработки будет не методологияитехнология разработки агентов, а создание программно-коммуникационной инфраструктуры, которая и превращает множество простых автономных агентов в единый сетевойобъект. Еепрототипом в традиционных МАС является обычная централизованная агентская платформа, например, платформа JADE, которая хорошо освоена программистами МАС[15]. Однакоплатформа IoA-систем в основной массе потенциальных приложений не можетбытьцентрализованной, поскольку ее функции (ее случаи использования) намного сложнееиразнообразнее, и они реализуются достаточно сложными протоколами взаимодействия,которые обеспечивают координацию коллективного поведения агентов в IoA-системах. Программно-коммуникационная инфраструктура IoA-приложений является основнымобъектом исследований в данной работе. В следующем разделе приводится анализ базовыхсервисов, которые должна обеспечивать эта инфраструктура.
Ранее для IoA-реализации приложения IoT того типа, который рассматриваетсявданнойработе, было показано, что множество взаимодействующих агентов IoA, помещенныхвпрограммно-коммуникационную среду, называемую здесь также инфраструктурой,превращается в сетевой объект, поведение которого определяется множествомлокальныхвзаимодействий агентов. Рассмотрим те задачи, решение которых должна поддерживатьинфраструктура. Функции, реализуемые инфраструктурой, называются далее сервисами, которыеонапредоставляет отдельным агентам, а также сетевому объекту в целом. Отметим, чтовданной работе рассматривается вариант распределенной инфраструктуры,поддерживающей открытую архитектуру сетевого объекта, в котором состав узлов, атакжетопология их связей являются динамическими свойствами. Использованиеэтогопредположения является существенным, т.к. в рассматриваемом классе приложенийIoTфизические объекты могут быть мобильными и используют беспроводные коммуникации,которые имеют ограниченную дальность. Кроме того, как можно видеть из приведенныхвыше примеров конкретных классов приложений IoT, новые узлы могут присоединятьсяксетевому объекту динамически, а также покидать его в любой момент времени. Этисвойства сетевого объекта как раз и характеризуют его как открытую систему. Рассмотрим базовые сервисы, которые должна обеспечивать эта инфраструктуравобщем случае системы, реализующей парадигму IoA2
. 1. Коммуникационный сервис. Физической основой этого сервиса является сеть Интернет.Коммуникационный сервис должен предоставлять каналы связи для доставки сообщенийизузла сетевого объекта как автономным сущностям, установленным в самомузле, такидругим узлам сети, для которых текущий узел является либо адресатом сообщения, либопромежуточным узлом для поиска нужного адресата с помощью принятогопротоколамаршрутизации. В случае открытой p2p-сети коммуникационнуюкомпонентуузла,обеспечивающую сервис адресации сообщений, принято называть пиром(от англ. peer–одноранговый, равноправный). Его основная задача – управление списком своих контактов.Суть этой задачи состоит в ведении актуального списка доступных каналов связиисоседейпо сети, достижимых с помощью этих каналов с учетом динамики состава соседейкакзасчет изменения состава узлов сети, так и за счет изменения ее топологии. 2. Сервис адресации сообщений. Сервис адресации сообщений – это механизмпоискаадресата сообщения в открытой сети. Ввиду открытости сети эта адресациядолжнавыполняться по специальному протоколу, который реализует некоторый механизмпоискамаршрута доставки сообщения в сети с динамической архитектурой. Средивариантовреализации этого механизма в открытых сетях наиболее распространеннымспособомпоиска адресата является использование сервисов белых и желтых страниц. Дляслучаясети с динамикой топологии и состава узлов имеется рабочий вариант стандарта FIPA[16]для распределенного сервиса желтых и белых страниц. Он предлагает использовать распределенную p2p-агентскуюплатформу, обеспечивающую типовой механизм p2p-взаимодействия в сети, который реализует«полное разъединение связи агента с пиром от прикладного уровня, позволяяихнезависимую модификацию» [16, 17]. При этом распределенная агентская платформареализуется как оверлейная (виртуальная) сеть, установленная поверх коммуникационногоуровня, представляемого сетью пиров. Аналогично прикладной уровень, образуемыйузламисети агентов, реализуется в этой концепции как оверлейная сеть, установленная в своюочередьповерх оверлейной сети экземпляров распределенной агентской платформы. Заметим, чтовнастоящее время существуют и другие возможности поддержки адресации сообщенийвp2p-сети агентов, базирующиеся на обмене сообщениями, например, акторные системы, различныереализации стандарта JMS (от англ. Java Messaging System) и др. 3. Поддержка открытости сети. Открытость сети обеспечивается, с однойстороны, множеством стандартных протоколов, с помощью которых произвольное предприятиеможет войти в сеть, объявить о своих сервисах, получить информациюо соседяхиихсервисах и стать таким способом равноправным узлом сети. С другой стороны, открытостьсети обеспечивается стандартными протоколами, которым следуют узлысети, намеревающиеся покинуть сеть. При этом инфраструктура должна обеспечитьмаршрутизацию сообщений при модификации топологии сети и зафиксировать изменениесостава сервисов, доступных в ней. Такая постановка задачи рассматривается в литературепо открытым сетям. Кроме классических вариантов реализации открытости сетитипатехнологии JXTA [18], которая является Java-реализацией стандарта, разработанногоUPnP-форумом [19], в последнее время появились и другие возможности по реализацииp2p-концепции программно-коммуникационной инфраструктуры для реализации открытыхad-hoc сетей, но их достоинства и недостатки еще предстоит оценить. 4. Обеспечение информационной совместимости узлов. Эта задача является однойизнаиболее важных для поддержки возможности кооперации узлов сети при распределенномвыполнении ими общих бизнес-процессов [20]. Примером такой кооперацииявляетсязадача кросс-докинга, упомянутая в предыдущем разделе при описании двух приложенийIoT. В соответствии с современной концепцией основным методомобеспеченияинформационной совместимости узлов является использование общей онтологии. Этотаспект агентских сетей активно исследуется в научном сообществе. Он исследуетсяпрактически в каждом проекте программы Европейской комиссии, в частности, программыHorizon 2020, посвященной распределенным моделям бизнеса, коллективному поведениюроботов и др. [21]. 5. Поддержка стандартных протоколов взаимодействия узлов сети в различныхслучаях использования (англ. use cases) и конкретных сценариях их реализации. Этазадачаимеет целью обеспечение единообразия протоколов взаимодействия узлов сетиприрешении содержательных задач. Примером этих задач является, например, задачапланирования распределенного выполнения сложного заказа, поступившего в некоторыйузел сети. Хорошо зарекомендовали себя алгоритмы, использующие механизмысамоорганизации на основе модели аукциона, например, на основе его простейшеговарианта – протокола контрактных сетей [22]. Другим примером протокола взаимодействияузлов сети может быть протокол распределенной координации локальных расписанийработы множества узлов сети при совместном выполнении ими множества бизнес-процессов. Пример такого протокола имеется в [23, 24].
Концепция Интернета вещей, активно развиваемая в последние годы, предназначенадлярешения крупномасштабных задач, которые вовлекают в процесс решения огромноеколичество объектов физического, социального и виртуального мира. Эти объекты могут быть источниками весьма разнородной информации, средствами ее обработкиипринятиярешений, исполнительными органами, воздействующими, в свою очередь, на объектыфизического, социального и виртуального мира. К таким объектам относятсятакжеоблачные ресурсы и семантические сервисы Web 2.0, доступ к которымвыполняетсяспомощью коммуникационной среды Интернет. В настоящее время идет активныйпоискконцепций и интеллектуальных ИТ, которые в состоянии хорошо справляться с задачамиописанного класса, а они имеют большую социальную и коммерческуюценность. В работе проанализирована одна из таких информационных технологий, котораябылапредложена совсем недавно (не раньше 2013 года). Она предлагает использовать парадигму,названную Интернет агентов. В работе дана краткая характеристика существаэтойконцепции, абстрактная модель задач, для концептуализации и программнойреализациикоторых наилучшим образом подходит ИТ IoA. Эта постановка задачи проиллюстрированаконкретными примерами приложений. В работе показано, что приложениеIoT,формализованное в модели IoA, сводит задачу к исследованиюкрупномасштабногообъекта сетевой структуры, поведение которого формируется на основе множествалокальных взаимодействий простых агентов, формирующих самоорганизующеесяэмерджентное поведение объекта сетевой структуры. В работе предложена также архитектура основной компоненты системы, построеннойвконцепции IoA, а именно информационно-коммуникационной компоненты, котораяфактически формирует среду, в которой «живут» автономные агентыикотораятрансформирует множество таких агентов в объект сетевой структуры. Проведентакжеанализ базовых сервисов, которые должна обеспечивать эта инфраструктурная компонентаIoA, а также показано, что в настоящее время уже имеются частные решения, которыепозволяют практически реализовать эту инфраструктуру, что обосновывает практическуюреализуемость этой парадигмы программной реализации приложений из областиIoT.