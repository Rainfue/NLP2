JavaScript – один из самых популярных языков
программирования в настоящее время. Большинство
клиентских приложений, и не только, пишутся на нем.
Если вы разрабатываете приложения в текущей экосистеме JavaScript, то вы наверняка знаете, что это
практически невозможно без использования одного из
многих инструментов сборки JavaScript. В современных реалиях у вас может быть несколько сборщиков
под каждое приложение, в зависимости от типа и
предназначения проекта. Важно понимать, какие существуют инструменты, и в чем различие между ними. В этой статье будет представлен обзор самых популярных инструментов сборки JavaScript, будут выделены основные плюсы и минусы каждого из них, а
так же различия между ними.
Для начала стоит разобраться, что вообще представляет из себя инструмент сборки. Инструмент
сборки JavaScript – инструмент, который позволяет
автоматизировать, путем написания различного рода
скриптов, выполнение широкого спектра задач в отношении к разрабатываемому ПО. Такие инструменты автоматически выполняют задачи, которые в противном случае мы выполняли бы вручную. Как правило, выделяют следующие задачи:
– облегчение, сжатие файлов;
– оптимизация изображений и шрифтов;
– объединение (конкатенация) файлов;
– компиляция или транспиляция кода;
– генерация сервера разработки;
– перезагрузка модулей в режиме реального времени без полного обновления страницы;
– просмотр файлов и автоматическое создание
сборок при обнаружении изменений;
– управление и обновление зависимостей;
– автоматизированный анализ и поиск ошибок в
коде;
– деплоинг кода (процесс развертывания и запуск
веб-приложения или сайта на сервере или хостинге);
– запуск модульных тестов;
– автоматическая генерация документации;
– полифиллинг (процесс добавления недостающих методов, свойств или API к старым браузерам
путем предоставления собственной версии недостающего родного кода).
Видно, что большинство функций одинаковы для
каждого сборщика, однако между ними, по-прежнему,
можно выделить различия. У каждого инструмента
реализация этих методов выполняется по-разному, а
также существует набор своего уникального функционала.
В этой статье будут рассмотрены 3 самых популярных на данный момент сборщика модулей с точки
зрения практического применения и удобства пользования. 
Пожалуй, это самый известный инструмент сборки. В процессе работы Webpack анализирует модули
приложения, создает граф зависимостей, затем собирает модули в правильном порядке в один или несколько бандлов (так называемый узел или пучок), на
который впоследствии может ссылаться файл index.html (рис. 1).
Parcel – это еще один популярный инструмент
сборки, написанный на языке Rust. Уже спустя несколько дней после своего релиза он собрал большое
количество положительных отзывов и много звездочек на github. Данный сборщик позволяет быстро собирать маленькие проекты без длительной настройки. 
Vite был создан не так давно, среди прочих сборщиков он является самым молодым. Его разработчик –

50
Эван Ю, который до этого создал Vue.js – популярный
фреймворк для JavaScript. Именно под этот фреймворк и
был разработан Vite, встроенная поддержка позволяет
использовать его в большинстве фронтенд-проектов,
написанных на других языках. В своей основе данный
сборщик использует Rollup и esbuild. 
Каждый из этих инструментов имеет как свои
преимущества, так и недостатки. Если говорить про
Webpack, то можно выделить следующие достоинства:
– расширенное разделение кода. Webpack известен тем, что позволяет загружать определенные
скрипты по необходимости, а не целый бандл на каждой странице;
– плагины и загрузчики. Webpack включает в себя
большую экосистему плагинов и загрузчиков, что
способствует значительному расширению его функциональности;
– возможности настройки. Вы можете использовать данный сборщик вообще без настройки, но получить максимальную мощность от него вы сможете,
если будете настраивать его под каждый проект отдельно;
– поддержка множества различных форматов вывода.
Из общих плюсов также можно выделить широкую распространенность и популярность, что делает
процесс поиска различной информации и документации простым.
Недостатки следующие:
– сложность освоения. Webpack – это объемный и
многофункциональный инструмент, что делает его
изучение весьма длительным и тяжелым;
– актуальность информации. Часть документации
устарела, так как обновления привносят большое количество изменений;
– процесс разработки. Из-за объемности и сложности настройки конфигурация Webpack становится
слишком нагроможденной, что приводит к замедлению процесса разработки.
Выделим достоинства Parcel:
– нулевая конфигурация. Для работы с Parcel
вам вообще не нужно ничего настраивать, не нужен
опыт работы с инструментами сборки, чтобы начать
работу;
– диагностика ошибок. В случае ошибки, в терминале и в браузере будет отображаться удобная и
интуитивно понятная диагностика;
– скорость сборки. Среди всех инструментов
сборки, Parcel является одним из быстрейших;
– поддержка различных типов файлов. Вам не
нужно настраивать Parcel для работы с определенным
типом файлов, функции настройки поддерживают
практически любой фронтенд-проект;
– встроенная поддержка HMR (Hot Module Replacement). Такое нововведение позволяет отображать
изменения в кратчайшие сроки.
К недостаткам же можно отнести следующие моменты:
– работа с кэшем. Плохо оптимизирована, особенно заметно при работе с моно-репозиторием;
– задержка HMR. Потребуется много времени,
чтобы отразить изменения в браузере, что может быть
связано с кэшом. Браузер может попасть в состояние
загрузки, из которого уже никогда не выйдет. В таком
случае остается только перезапустить скрипт сборки
или закрыть вкладку.
Рассмотрим Vite. Из достоинств данного инструмента можно однозначно выделить следующее:
– время сборки. Оно достаточно быстрое, особенно если это локальная сборка;
– Rollup и esbuild. Как уже упоминалось выше,
в своей основе Vite использует esbuild для предварительной сборки и Rollup для производственной сборки;
– улучшение работы с медленными серверами.
Vite сокращает время обслуживания приложения за
счет предварительной сборки (c использованием esbuild) и обслуживания кода собственными модулями
ES (ecmascript);
– HMR. Vite может очень быстро заменять модули
даже для самых больших и тяжелых приложений.
К недостаткам можно отнести следующие пункты:
– плохая поддержка typescript. Typescript – это,
можно сказать, уже золотой стандарт, мало приложений обходятся без него;
– конфигурация. Ее нужно настраивать, хотя бы
на минимальном уровне;
– переменные среды. Работа с ними в данном
сборщике отличается от общепризнанных стандартов,
что может повлечь некоторые неудобства. Например:
обращение переменных .env происходит по другому
пути.
Теперь, когда были рассмотрены плюсы и минусы
каждого, можно приступать к непосредственному
сравнению сборщиков.
Анализ инструментов сборки
Для начала нужно выделить критерии сравнения.
Сборщик можно назвать эффективным, если соблюдены следующие условия:
– быстрота сборки;
– удобство пользования;
– многофункциональность.
По этим критериям и будем сравнивать.
Webpack в вопросе скорости сборки является рекордсменом с конца. По мере того как приложение
будет развиваться и расти, будет расти и время сборки, вплоть до нескольких минут. Большинство современных сборщиков обгоняют его в десятки, а то
и в сотни раз. Конечно, можно ускорить время сборки различными плагинами, но это лишняя нагрузка,
к тому же это все равно не сделает его конкурентоспособным. У Parcel и Vite ситуация намного лучше,
они собирают проект гораздо быстрее, особенно
Parcel. 