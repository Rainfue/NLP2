В течение продолжительного времени, масштабируемость частоты и технологические достижения позволяли подавляющему большинству компьютерных систем и комплексов увеличивать производительность без применения методов аппаратного ускорения или структурных изменений. Не смотря на то, что эти тенденции сохраняются, их
влияние на современные приложения менее значительно, по сравнению с влиянием таких препятствий, как стена мощности (нагрев) и стена памяти.
Термином «Стена памяти» обозначают растущую разницу в скорости работы
между центральным процессорным устройством и памятью за пределами чипа ЦПУ.
Важной причиной возникновения этой разницы является ограниченная пропускная способность коммуникационных каналов за пределами чипа. С 1986 по 2000 г. скорость
ЦПУ увеличивалась со среднегодичной скоростью 55%, в то время, как средняя скорость элементов памяти возрастала лишь на 10%. Учитывая эти тенденции, было ожидаемым, что задержки при работе с памятью станут узким местом в производительности вычислительных систем в достаточно короткие сроки.
Увеличение скорости ЦПУ в некоторой степени замедлилось, отчасти вследствие
существенных физических барьеров и отчасти из за того, что текущая архитектура
ЦПУ уже достигла «стены памяти» в некотором смысле. Корпорация Intel обобщила
эти причины в документе [1] изданном в 2005 г.
Одним из главных методов получения дополнительной производительности вычислительных систем, в условиях действия этих ограничений, является введение в систему дополнительных специализированных ресурсов, в результате чего вычислительная система, подвергшаяся изменениям, становится гетерогенной.
Гетерогенные вычислительные платформы - электронные системы, имеющие в
своем составе различные типы вычислительных блоков. Таковыми могут выступать:
− процессор общего назначения (GPP);
− со-процессор;
− процессор специального назначения, например цифровой сигнальный процессор
(DSP) или графический процессор (GPU));
− логика ускорения: специализированная интегральная схема (ASIC) или программируемая пользователем вентильная матрица (FPGA)).
Таким образом, гетерогенная вычислительная система содержит процессоры с
разными наборами команд (ISA). Спрос на повышение гетерогенности в вычислительных системах, частично связан с необходимостью в высоко-производительных, высокореакционных системах, которые взаимодействуют с другим окружением (аудио/видео
системы, системы управления, сетевые приложения и т.д.). Проблемы, описанные выше
приводят к тому, что применяемые вычислительные системы становятся гетерогенными. Это позволяет разработчику использовать несколько типов вычислительных элементов, каждый из которых способен выполнять задачи, которые лучше всего для него
подходят. Добавление дополнительных, независимых вычислительных ресурсов неизбежно приводит к тому, что большинство гетерогенных систем рассматриваются как
параллельные вычислительные системы или многоядерные системы.
Методы описания гетерогенных программ
Одним из методов создания гетерогенных электронных систем является применение некоторого модифицированного языка или среды программирования с целью задействовать ресурсы компонентов персональных вычислительных систем, в том числе графического процессора (GPU).
В табл. 1 приведены сведения о основных средах, позволяющих реализовать методику GPGPU. OpenACC предоставляет программисту набор директив компилятора, с помощью
которых можно отметить части кода, которые следует выполнять на GPU, обозначить
какие из переменных являются общими, а какие индивидуальными для потока.
OpenACC - стандарт, описывающий набор директив для написания гетерогенных программ, задействующих как графический, так и центральный процессор.
OpenCL - фреймворк для написания компьютерных программ, связанных с параллельными вычислениями на различных графических и центральных процессорах, а
также FPGA. В данный фреймворк входят интерфейс программирования приложений
и язык программирования, который основан на стандарте языка С (C99 [2]). OpenCL
обеспечивает параллелизм на уровне данных и на уровне инструкций, является реализацией техники GPGPU. Возможности встроенного языка достаточно ограниченны и, во
многих случаях, не позволяют в короткие сроки достигнуть высокой производительности процесса разработки.
Описание системы, применение асинхронных фреймворков
Для разрешения данной проблемы стоит прибегнуть к применению некоторых
методов, возникших (подчас стихийно) в областях не связанных напрямую с рассматриваемой. К таким областям относятся техники и конструкции функциональных языков
программирования, а так же событийно-ориентированного программирования. Примером реализации событийно-ориентированной серверная платформа является Node.js, основанная на V8 и использующая язык JavaScript. Node.js позиционируется как инструмент, ориентируемый на создание высокопроизводительных, хорошо масштабируемых
клиентских и серверных приложений для реализации веб технологий «реального времени». Рисунок 1 представляет пример реализации простейшего echo сервера на Node.js.
На рисунке 2 представлено схематическое изображение варианта построения архитектуры гетерогенной событийно-управляемой вычислительной среды. Преимуществом такого подхода является уменьшение вычислительных затрат связанных с координацией вычислительного процесса. Наиболее эффективна такая система в задачах
связанных с обработкой большого количества данных, поступающих от разнородных
устройств, датчиков, таких как управление автоматизированным портом, системами
«умный город». 