Высокая сложность современного программного обеспечения, обусловленная большим
объемом исходного кода, иногда достигающим нескольких миллионов строк, а также
наличие уязвимостей и ошибок в нем, является фундаментальной проблемой, вызванной
текущим состоянием развития информационных технологий. Веб-браузер является ярким
примером, демонстрирующим данный факт. На рис. 1 представлена поверхность атаки веббраузера.
Среди всей архитектуры веб-браузера, поиск уязвимостей в JavaScript интерпретаторах
является наиболее сложной, потому востребованной задачей в тестировании веб-браузеров.
Появление в 90-х годах 20 века динамических веб-приложений стало отправной точной
популярности языка JavaScript. По данным рейтинга W3Techs1 на октябрь 2023 года 98,8%
всех веб-сайтов используют язык JavaScript. Любой современный веб-браузер поддерживает
язык динамической разработки JavaScript без использования дополнительного программного
обеспечения (ПО) с помощью встроенного JavaScript интерпретатора. Стремительный рост
числа новых интернет-технологий требует постоянного усложнения и наращивания кодовой
базы интерпретатора веб-браузера. Данный факт часто приводит к ошибкам, что негативно
сказывается на безопасности веб-браузера в целом и активизирует деятельность авторов
вредоносных программ. Согласно Национальной базе данных уязвимостей (NVD2), 43% всех
уязвимостей, обнаруженных в веб-браузерах Microsoft Edge и Google Chrome, были
уязвимостями интерпретатора JavaScript. 
Современные руководящие документы по безопасной разработке предлагают широкий
спектр методов экспертного, статического и динамического анализа3. Наиболее
распространенные из них: межпроцедурный контекстно-чувствительный анализ, анализ
бинарного кода, а также байт-кода, формальная верификация, отслеживание помеченных
данных и сканирование уязвимостей, а также направленный анализ участков кода и
моделирование атак. Каждый из них имеет свои достоинства и недостатки, однако фаззингтестирование применительно к задаче выявления уязвимостей сложного программного
обеспечения, такого как JavaScript-интерпретаторы имеет ряд преимуществ:
• высокая степень автоматизации, что позволяет проводить тестирование большого
объема кода за обозримое время;
• может быть использован для тестирования любой системы, которая имеет входные
данные;
• возможность обнаружения новых и неизвестных ранее уязвимостей;
• автоматизированное тестирование может выявить те ошибки, которые не удалось
найти методом ручного тестирования, за счёт большего покрытия кода;
• автоматизированное тестирование позволяет человеку участвовать лишь на этапе
работы с результатами;
• позволяет собрать общее представление о защищенности тестируемого кода.
Фаззинг становится все более популярным методом проверки функциональности
программного обеспечения и поиска уязвимостей безопасности. Он успешно применяется
для тестирования различных приложений, начиная от механизмов рендеринга и процессоров
изображений и заканчивая компиляторами и интерпретаторами.
Программная реализация, которой проводится фаззинг-тестирование, называется фаззером.
В различных источниках классификация фаззеров может отличаться, чаще всего она
производится по следующим параметрам: по информации о целевой программе, которая
будет подвергнута фаззингу; по наличию обратной связи с тестируемой программой; по
операциям, которые будут совершаться над входными данными, а по методам генерации
данных [1].
В области тестирования JavaScript интерпретаторов проведено множество
исследований, среди них: генеративные фаззеры создают новые тестовые случаи с нуля на
основе заранее определенной грамматики, такие как jsfunfuzz4 и Fuzzilli [2], или путем их
создания из синтезируемых блоков кода, разобранных на большой корпус [3]. Мутационные
фаззеры генерируют новые тестовые примеры на начальных входных данных для
тестирования. Например, LangFuzz [4] разбивает программы в большом корпусе на
небольшие фрагменты кода, рекомбинирует их с исходным вводом и генерирует новые
тестовые примеры; Skyfire [5], Nautilus [6] и Superion [7] мутируют каждую программу
индивидуально с помощью сегментов, полученных от других программ в корпусе, или с их
правилом мутации.
По количеству информации о целевой программе фаззеры подразделяются на: фаззеры
«белого ящика», фаззеры «серого ящика» (например, [2[2], 6-7]) а также фаззеры «черного
ящика» (например, [3-5]). Среди распространенных фаззеров JavaScript интерпретаторов нет
представителей «белого ящика» ввиду сложности и объемности кода интерпретаторов.
В последние годы фаззинг «серого ящика» на основе покрытия зарекомендовал себя как один
из наиболее эффективных методов поиска ошибок безопасности на практике. Фаззингтестирование методом «серого ящика» предполагает внедрение инструментов в тестируемую
программу для получения обратной связи для управления ходом тестирования. Главное
преимущество метода в том, что фаззер получает информацию не только о выводе и
аварийном завершении программы, но и о ходе исполнения программы. В общем случае
информация может быть любой, но обычно используют такую метрику, как покрытие кода
программы.
AFL – это канонический пример фаззера, который в 2013 году дал толчок в массовому
использованию фаззинга с обратной связью, и обнаруживший тысячи громких уязвимостей.
Его базовая идея заключается в сборе покрытия ветвей при каждом исполнении, а цель –
максимизация покрытия. Сейчас первоначальный AFL уже не используется, но от него
образовалось множество проектов. Самый популярный и быстроразвивающийся из них – это
AFLPlusPlus (AFL++) [8]. Он вбирает в себя новые техники и постоянно расширяет
возможности исследователей. AFL++ известен своей высокой производительностью и
эффективностью в обнаружении уязвимостей и ошибок в программном обеспечении. AFL++
обрабатывает целевую программу в два этапа: инструментирование целевой программы и
фаззинг инструментированной программы. На этапе инструментирования в точки ветвления
тестируемой программы внедряются маяки для считывания покрытия ветвей вместе с
количеством попаданий в них.
Однако, применение фаззинга с обратной связью к интерпретаторам JavaScript нетривиально.
AFL++ эффективен при работе с бинарными данными, а не с текстовыми и тем более не с
жестко структурированными входными данными, такими как JavaScript код. AFL приходится
тратить много времени на борьбу с корректностью синтаксиса, находя при этом только
ошибки синтаксического анализа. Универсальные алгоритмы обрезки и мутации данных,
встроенные в фаззер AFL++, работают на битовом уровне представления JavaScript кода, что
разрушают тонкую семантику или условия, закодированные в коде. Из чего следует, что
большая часть предложенных некорректных мутированных входных данных с высокой
вероятностью будет мешать обнаруживать новые пути в коде. Тестовые примеры,
сгенерированные текущими методами, могут ссылаться на переменные, которые не
определены в текущем контексте выполнения. Вследствие чего, программа может
завершиться из-за синтаксической или семантической ошибки уже во время выполнения. На
рис. 2 представлена разница операций замены и вставки значений встроенным в AFL++
способом и на основе AST.
