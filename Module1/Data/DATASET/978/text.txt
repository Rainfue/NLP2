Почти каждое приложение, над которым работает разработчик требует использование какого-то времени. Обычно требуется вести учет времени, в котором происходят различные действия, например, время, в котором запись создается, обновляется, удаляется, когда пользователь входит в систему и т.д. 
В какой-то момент Вам придется хранить, извлекать и отображать даты и 
время в разных форматах. Также, вероятно, будет необходимость производить 
расчеты, включающие время, такие как добавление или вычитание определенного количества дней из даты, их сравнение. 
В этой статье мы подробно рассмотрим работу с датой и временем в PHP.
Компьютеры научились подсчитывать время с эпохи Unix 1 января 1970 
года в 00:00:00 UTC (Всемирное координированное время). UTC также известен 
как GMT (Среднее время по Гринвичу), которое является временем при долготе 
0°.
Unix-время идет с той же скоростью, что и UTC. Благодаря этому у нас есть 
возможность рассчитать дату и время UTC любого заданного момента с 1 января 
1970 года, подсчитав количество секунд с эпохи Unix.
Компьютеры подсчитывают время с помощью временной метки Unix, вычисляя количество секунд, прошедших с 1 января 1970 года. Тем не менее, это 
было бы трудно и невероятно неэффективно для людей, так как мы используем 
года, месяцы, дни, часы, минуты и секунды. Такой формат тоже имеет сложности, потому что в разных регионах разные способы написания даты. Например, 
в США даты записываются, начиная с месяца, затем дня и года. 15 ноября 2011 
года будет записано как 11-15-2011, а в Европе 15-11-2011.
Для стандартизации даты Международная организация по стандартизации 
(ISO) представила стандарт ISO8601. Он определяет, что любая дата должна 
быть записана в формате от наиболее важных данных, до незначительных. Таким 
образом мы получаем формат: год, месяц, день, час, минута и секунда:
YYYY-MM-DD HH:MM:SS
В приведенном выше примере YYYY представляет собой четырехзначный 
год, а MM и DD - это двузначный месяц и день соответственно (запись начинается с 0, если число меньше 10). После этого HH, MM и SS представляют собой 
двузначные часы, минуты и секунды, начиная с нуля, если меньше 10. 
Такой формат устраняет двусмысленность в представлении дат, где даты, 
записанные как ДД-ММ-ГГГГ или ММ-ДД-ГГГГГ могут быть неправильно истолкованы, если день является действительным номером месяца.
Большинство баз данных используют формат YYYY-MM-DD HH:MM:SS 
для хранения даты и времени и YYYY-MM-DD для хранения даты.
У разных регионов мира разные часовые пояса. Вы можете узнать, в какой 
часовой пояс установлен ваш веб-сервер, с помощью следующей функции PHP.
<?php
$timezone = date_default_timezone_get();
echo "The server is set to: ".$timezone;
Чтобы переключиться на временной пояс, который будет использоваться в 
Ваших функция даты и времени в PHP, следует использовать функцию 
date_default_timezone_set($timezoneId), где $timezoneId - это строковое значение.
Например:
<?php
date_default_timezone_set("Africa/Nairobi");
Приведенный выше код устанавливает часовой пояс в Найроби, Кения.
Если пользователи Вашего веб-сайта или приложения из разны часовых 
поясов, желательно установить часовой пояс сервера в UTC.
Это можно сделать следующим образом:
<?php
date_default_timezone_set("UTC");
Функция возвращает текущую метку времени unix, т.е. общее количество 
секунд, прошедших с 1 января 1970 года в 00:00:00 UTC.
<?php
$timestamp = time();
echo $timestamp;
Функция возвращает строку, отформатированную в соответствии с заданной строкой формата, используя заданную целочисленную метку времени.
Он принимает следующий формат:
date($format, $timestamp)
где $format - это строковое значение, а $timestamp - необязательное целочисленное значение unix timestamp. Если $timestamp не задан, функция по умолчанию использует значение time()
date($format)
Функция strtotime() анализирует английское текстовое datetime в метку 
времени Unix (количества секунд с 1 января 1970 года 00:00:00 GMT).
Синтаксис:
strtotime(time, now);
time - обязательный параметр, указывающий строку даты/времени. now -
необязательный параметр, указывает временную метку, используемую в качестве основы для расчета относительных дат.
Самый простой способ добавить или вычесть время к дате в PHP - это использовать строку, указывающую продолжительность времени, которую вы хотите добавить или вычесть, и дату, внутри функции strtotime(), которой предшествует символ плюс (+) или минус (-).
Пример 1
Добавление времени к текущему времени
<?php
//Добавление 5 часов к текущему времени
$latertime = date("Y-m-d H:i:s", strtotime(" + 5 hours"));
echo "Через 5 часов время будет ".$latertime;
Пример 2
Добавление времени к DateTime
<?php
$date = "2021-08-27 13:19:00";
//Добавление 3 часов к вышеуказанным датам и времени
echo date("Y-m-d H:i:s", strtotime($date." + 3 hours"));
//Вычитание 5 часов из даты и времени выше
echo date("Y-m-d H:i:s", strtotime($date." - 5 hours"));
Пример 3
Добавление дней, недель, месяцев и лет к дате
<?php
$date = "2021-08-27";
//Добавление 2 дней к дате
echo date("Y-m-d", strtotime($date." +2 days"));
//Добавление 3 недель к дате
echo date("Y-m-d", strtotime($date." +3 weeks"));
//Вычитание 4 месяцев из даты
echo date("Y-m-d", strtotime($date." -4 months"));
//Добавление 1 года к дате
echo date("Y-m-d", strtotime($date." +1 year"));
Довольно легко можно сравнить две даты, если они находятся в одном формате:
<?php
$date1 = "2021-01-27";
$date2 = "2021-08-27";
if($date1 > $date2){
echo $date1. " Больше, чем ".$date2;
}
else{
echo $date2. " Больше, чем".$date1;
}
Если две даты имеют разные форматы, вам сначала нужно преобразовать 
их в метку времени Unix, а затем сравнить их, как показано ниже.
<?php
$date1 = "2021-01-27";
$date2 = "Friday 27 Aug, 2021";
//Преобразование в временную метку Unix
$timestamp1 = strtotime($date1);
$timestamp2 = strtotime($date2);
if($timestamp1 > $timestamp2){
echo $date1. " is greater than ".$date2;
}
else{
echo $date2. " is greater than ".$date1;
}
При разработке какого-либо продукта Вам так или иначе придется работать с датой и временем. В этой статье мы рассмотрели методы работы с датой и 
временем в PHP, как компьютеры подсчитывают время, что такое временная 
метка Unix, как получить текущее время, работать с часовыми поясами, преобразовывать даты и время, добавлять или вычитать дату и время различных и одинаковых форматов, а также их сравнение.
