Базовая абстракция действий, процесс разработки которой описывается в данной статье, представляет собой систему действий, направленных на 
достижение цели [1]. Единичные действия, входящие в эту систему, состоят из 
элементов, над которыми выполняется некоторая функция, с помощью некоторого 
инструмента [2–5]. Стоит задача разработки базовой абстракции действий средствами языков программирования высокого уровня. 
Современные языки программирования часто делят по типу используемых абстракций на структурные языки (скриптовые) и объектно-ориентированные. Объектно-ориентированные имеют в своем составе абстракции – классы, которые содержат в себе переменные, функции, обладают возможностью наследования. Нужно 
определить, насколько абстракции в программировании (классы) для реализации 
базовой абстракции действий. В качестве примера базовой абстракции действий решено создать базовую абстракцию действий по выполнению математических операций. Математические операции лежат в основе вычислительной техники, именно на 
их базе строятся сложные математические модели, составляющие основу любого 
программного обеспечения. Немаловажно отметить в то же время простоту и доступность математических операций для понимания широкой аудитории. Теперь 
нужно рассмотреть, какие действия нужно совершить, чтобы реализовать базовую 
абстракцию действия по выполнению математических операций. 
Базовая абстракция действия для реализации математических операций.
Представим элементы, функции, инструменты по реализации математических 
операции в виде действий. Для этого заполним табл. 1.
Согласно таблице, для достижения цели «Реализовать математическую операцию» нужно совершить действие, в котором элементами будут «Переменная a» 
и «Переменная b», функцией будет «Математическая операция», а инструментом 
«Конструктор класса действия».
Для того, чтобы получить элементы «Переменная a» и «Переменная b», нам 
необходимо над элементами «Значения переменных», выполнить функции «Задать 
значение» и «Получить значение» с помощью инструмента «Класс языка программирования». 
Для того, чтобы получить функцию «Математическая функция», нам необходимо над элементом «Параметр» произвести функцию «Выполнить» с помощью 
инструмента «Структура функции языка программирования». 
Для получения инструмента «Конструктор класса действия» нам необходимо над элементами «Правила алгебры» и «Готовые классы элементов, функций» 
произвести функцию «Сопоставления алгебры и классовой структуры» с помощью 
инструмента «Синтаксис языка программирования».
Можно заметить, что собрав воедино элементы «Значения переменных», 
«Параметр», «Правила алгебры» и «Готовые классы элементов, функций», мы получим «Элементы классов». Аналогично получаем «Функции классов», и «Структуру классов». Можно заметить, собрав воедино «Элементы классов», «Функции 
классов» и «Структуру классов», получаем также цель, которую нам нужно достигнуть (табл. 1). После описания базовой абстракции можно приступать к обоснованию выбора языка программирования.
Обоснование выбора языка программирования. Первое требование – поддержка возможностей объектно-ориентированного программирования. Как видно 
из табл. 1, действия по созданию элементов функций и инструментов используют 
элементы ООП.
За последние годы рынок web – разработки в мире увеличился более чем в 1,5 
раза. В мире прослеживается тенденция роста использования web–технологии – это 
удобно, и имеют прогнозы, что за такими сервисами будущее [6]. Следовательно, 
язык должен быть web – ориентированным.
Далее нужно учесть субъективный фактор – опыт программирования на языке «С++». Использования языка с похожим синтаксисом позволит сократить затраты времени на обучение.
И напоследок важным требованием является простота настройки среды для 
написания программ. Иными словами, настройка среды должна быть легкой в установке для пользователя, а сама среда бесплатной, что увеличивает ее доступность для широкой аудитории. 
Ориентируясь на данные требования, был выбран язык PHP. Данный язык 
удовлетворяет всем требованиям:
1. В PHP поддерживается ООП [7, 8]. Объектно-ориентированная технология, встроенная в язык, аналогична объектно-ориентированному программированию в языке С ++. 
2. PHP – web – ориентированный язык, который может быть встроен в 
HTML, что обеспечит простоту создания форм представления. Также одним из значительных преимуществ PHP является поддержка широкого 
круга баз данных. Можно воспользоваться расширением, специфичным 
для отдельной базы данных, таким как MySql.
3. Для создания базовой абстракции язык программирования должен быть 
гибким и динамическим. Именно эти свойства позволят изменять компоненты базовой абстракции, создавая новые действий. PHP является динамическим [9], что также упрощает создание с его помощью web – приложений.
4. Простота работы и настройки: для реализации проекта вполне достаточно будет использование возможностей Джентльменского набора Web-разработчика 
(«Д.н.w.р», читается «Денвер») – проекта Дмитрия Котерова [10, 11]. Набор 
сочетает в себе локальный web-сервер (Apache), интерпретатор PHP и сервер баз данных MySQL. 
На основании описанных выше причин, мы считаем, что именно этот язык 
является оптимальным выбором для нашей задачи.
Определение классовой структуры для реализации базовой абстракции. 
При разработке данной абстракции решено использовать возможности объектноориентированного программирования. Для того, что определить оптимальную 
классовую структуру, необходимо пройти путь от момента реализации через синтаксис языка программировании до построения классовой структуры, создающей 
элементы, функции, инструменты (табл. 1) действия по выполнению математической операции. Опишем этапы практического получения оптимальной классовой 
структуры действия:
1. Реализация действия через синтаксис языка программирования. Программа будет содержать три переменные (два числа – входящие и одна переменная результата) с оператором множественного выбора – CASE. Именно такую реализацию предложит программист непосредственно для реализации одной математической операции. Вероятность повторного использования этого кода для создания нового действия отсутствует. То есть, для 
изменения программы придется ее почти полностью переписать.
2. Реализация действия как экземпляра класса myAction. Для того, чтобы 
можно было работать с созданным действием дальше, возможно использовать объектно-ориентированные возможности языка PHP. Теперь программа по реализации действия будет представлять собой один класс с четырьмя функциями, входные данные – также три переменные, оператор 
множественного выбора – внутри функции класса. Действие создается в 
виде экземпляра класса. Однако возникает проблема: при создании нескольких действий создадутся соответствующие классы, имеющие в своем 
составе несколько функций, но использующие лишь одну. Необходимо 
решить эту проблему.
3. Реализация действия как класса myAction, использующего методы 
других классов. Для решения проблемы, сформированной в предыдущем 
пункте, было решено для переменных, констант и четырех арифметических операций создать отдельные классы. Таким образом, классовая 
структура программы, полученная на этом этапе (рис. 1), будет состоять 
из шести классов – два класса для переменных и четыре класса для действий. Оператор множественного выбора определяет, какую операцию необходимо использовать в данный момент.
На рис. 1 можно увидеть, что действие, реализованное через экземпляр Action класса myAction, использует методы наследников базовых классов элементов 
Element и функций Function. Наследниками базового класса Element являются 
классы Constant и Variable. Программно отличие эти двух классов сводится к отсутствию функции Change_var() в классе констант. Это отражает физический 
смысл переменных и констант. Наследниками базового класса функций Function
являются классы, реализующие математические операции: умножение (Multi), деление (Divide), сложение (Plus), вычитание (Minus). Как можно заметить, функции, 
реализующие арифметические операции имеют единую классовую структуру. 
Нужно подумать о том, как объединять действия. Такие объединения будем назвать работой [12, 13].
4. Реализация работы из действий как классовой структуры. Классовая 
структура из предыдущего этапа претерпит следующие изменения – будет 
добавлен базовый класс работы, а базовые классы элементов Element и 
функций Function становятся его наследниками. Таким образом, классовая 
структура программы реализующей действия, будет включать один (базовый) класс работы, один базовый и два класса элементов, и один базовый 
и четыре класса функций. Работы создаются как экземпляры базового 
класса.
5. Реализация работы из действий как классовой структуры, с абстрактным классом работы и классами работы. Классовая структура, 
созданная на предыдущем этапе, привязывает любые изменения в работе к 
изменениям в базовом классе Work. В свою очередь, так как базовые классы элементов и функций являются наследниками класса Work, любые изменения в последнем отразятся и на них. Было решено создать классы 
конкретных действий, являющимися наследниками класса Work. Само 
действие будет создаваться так, как было описано в этапе 3. Например, на 
рис. 2 показана работа, состоящая из двух действий, одно из которых –
Action1 – реализует действие по вычитанию переменной из константы.
Последний вариант является наиболее соответствующим концепции. Однако, 
необходимо сказать о том, какие ограничения имеет данная абстракция. Действия 
в ней характеризуются обязательным присутствием:
 двух экземпляров базового класса элементов;
 одного экземпляра базового класса функции;
 отсутствием инструмента в явном виде (используются возможности языка 
программирования);
 одного значения результата, в данном случае, одного числа.
Заключение и дальнейшие исследования. В процессе работы была решена 
поставленная задача – на языке php была создана базовая абстракция действий по 
выполнению математических операций. Таким образом, с одной стороны можно 
сделать вывод об адекватности языка для создания базовых абстракций действий 
по выполнению математических операций. С другой стороны, необходимо отметить недостатки, которые имеют место. 
Самый существенный недостаток состоит в том, что созданные классы усложняют структуру программы. Для написания программы, реализующей операцию сложения, придется создавать классы для переменных, констант, отдельно 
класс для функции, реализующей математическую операцию. Данный факт является обратной стороной представления действий в едином виде, и дает преимущество виде возможностей настройки действий и их конфигурирования.
Другой недостаток заключается в том, что в классовой структуре инструмент 
в явном виде не представлен. Иными словами, роль инструмента играет язык программирования и его возможности. Это некритично для действий по выполнению 
математических операций, рассмотренных в данной статье, однако для более 
сложной задачи, вполне возможно, потребуется надстройка над языком. Таким 
образом, одно из направлений дальнейшего исследования заключаются в создании 
более сложных математических работ, предусматривающих:
 один элемент, как, например, в работе с унарными операциями;
 создание инструмента для выполнения работ, выходящих за возможности 
команд языка программирования;
 два и более значения результата (уравнения второго и более порядка).
Второе направление – создание базовой абстракции для действий, отличных 
от математики, применимых непосредственно к информационным системам.
Возникает также вопрос хранения данных: спецификой данной проблемы будет являться то, что нужно хранить не только значения результата, и но метод его 
получения [14, 15]. 