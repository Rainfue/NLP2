React Native — это JS-фреймворк для создания нативно отображаемых
iOS- и Android-приложений. В его основе лежит разработанная в Facebook JSбиблиотека React, предназначенная для создания пользовательских
интерфейсов. Но вместо браузеров она ориентирована на мобильные
платформы. Иными словами, если вы веб-разработчик, то можете использовать
React Native для написания чистых, быстрых мобильных приложений, не
покидая комфорта привычного фреймворка и единой кодовой базы JavaScript.
Конечно, мы и раньше слышали обещания об универсальной разработке
приложений, с помощью фреймворков наподобие Cordova или Titanium.
А что насчёт React Native? Мы рассмотрим данный фреймворк и
особенности его работы и поговорим о том, насколько удобно использовать
React Native для написания iOS- и Android-приложений. Прежде чем
углубляться в подробности разработки, давайте посмотрим, что собой
представляет React Native, и немного разберёмся с его работой. React — это JSбиблиотека для создания пользовательских интерфейсов, обычно для вебприложений. Она разработана в Facebook и распространяется под лицензией
open source с 2013 года. React широко распространена, и в отличие от более
крупных MVC-фреймворков решает относительно узкую задачу: рендеринг
интерфейса. Популярность React имеет ряд причин. Она компактна и имеет
высокую производительность, особенно при работе с быстроменяющимися
данными. Благодаря компонентной структуре, React поощряет к написанию
модульного, переиспользуемого кода. React Native — это та же React, но для
мобильных платформ. Процесс разработки остался тем же.
Разработчику может пригодиться знание Objective-C или Java. Кроме
того, в мобильной разработке есть свои подвохи (протестировано ли
приложение на разных устройствах? Достаточно ли крупные объекты, чтобы на
них комфортно нажимать?). Тем не менее, если вы работали с React, то React
Native покажется вам практически такой же, столь же комфортной.
Первое, что удивляет людей в React Native — он «действительно»
нативный. Другие решения JavaScript-для-мобильных-платформ просто
оборачивают ваш JS-код в хвалёное веб-представление. Они могут
перереализовать какое-нибудь нативное поведение интерфейса, например,
анимацию, но всё же это остаётся веб-приложение. В React компонент
описывает собственное отображение, а затем библиотека обрабатывает для вас
рендеринг. Эти две функции разделены ясным уровнем абстракции. Если
нужно отрисовать компоненты для веба, то React использует стандартные
HTML-тэги. Благодаря тому же уровню абстракции — «мосту» — для
рендеринга в iOS и Android React Native вызывает соответствующие API. В iOS
компоненты отрисовываются в настоящие UI-виды, а в Android — в нативные
виды.
166
Рисунок 1. Сравнительная характеристика React Native и React JS.
Вы будете писать ужасно выглядящий код, очень похожий на
стандартный JavaScript, CSS и HTML. Вместо компилирования в нативный код,
React Native берёт ваше приложение и запускает его с помощью JS-движка
хост-платформы, без блокирования основного UI-потока. Вы получаете
преимущества нативной производительности, анимации и поведения без
необходимости писать на Objective-C или Java. Другие методы разработки
кроссплатформенных приложений, вроде Cordova или Titanium, никогда не
достигнут такого уровня нативной производительности или отображения. По
сравнению со стандартной разработкой под iOS и Android, React Native имеет
гораздо больше преимуществ. Поскольку ваше приложение по большей части
состоит из JavaScript, вы можете пользоваться многочисленными
достоинствами веб-разработки.
Например, чтобы увидеть внесённые в код изменения, можно мгновенно
«обновить» приложение вместо длительного ожидания завершения
традиционного ребилда. Кроме того, React Native предоставляет «умную»
систему сообщений об ошибках и стандартные инструменты отладки JavaScript,
что сильно облегчает процесс мобильной разработки. React Native изящно
обрабатывает разные платформы. Подавляющее большинство API во
фреймворке — кроссплатформенные, так что достаточно просто написать
компонент React Native, и он будет без проблем работать в iOS и Android. В
Facebook заявляют, что в их приложении Ad Manager 87% кода
переиспользуется на обеих платформах.
Ниже представлен анализ быстродействия кроссплатформенного
приложения на React Native и разница в нагрузке процессора, графического
процессора и памяти. Данный анализ предназначен для освещения как
теоретических, так и практических аспектов использования React Native
в сравнении со Swift. Для теста, мы взяли два почти идентичных приложения
в обеих структурах: React Native App, Swift App, включающих в себя вход
в систему Facebook, получение его профиля, а также Tab Bar контроллер.
1.1. Таблица нагрузки центрального процессора CPU:
167
1.2. Таблица нагрузки графичекого процессора.
GPU:
Memory Usage: 1.3. Таблица нагрузки оперативной памяти
Тестируемые приложения на React Native и Swift очень схожи между
собой. Из этого эксперимента мы можем заключить, что хотя React Native
показал себя лучше в категории памяти, Swift эффективно использует
процессор и графический процессор. В заключение можно сказать, что React
Native довольно близок к Swift. Однако со счетом 2-1 наряду с высоким
потенциалом по памяти Swift по праву становится победителем. Если вам
нужно писать зависящий от платформы код — в связи с разными правилами
взаимодействия в iOS и Android, либо из-за преимуществ платформозависимого
API — то с этим не будет трудностей. React Native позволяет назначать
платформозависимые версии каждого компонента, которые вы можете потом
интегрировать в своё приложение. У React Native есть свои недостатки. Это
относительно новый проект, и ему свойственны проблемы всех молодых
библиотек: отсутствуют некоторые функции, ещё не выработаны оптимальные
методики использования. От релиза к релизу внедряются серьёзные изменения,
хотя их немного и они носят ограниченный характер. Тем не менее, React
Native уже достаточно зрелый проект, чьи достоинства весомее недостатков. С
помощью этого фреймворка можно использовать единую кодовую базу для
создания приложений под iOS и Android, не жертвуя ни качеством, ни
производительностью. Даже если вы не имеете опыта в JavaScript, вряд ли
будете оспаривать преимущества более быстрого цикла разработки и почти
стопроцентного переиспользования кода. А поскольку React Native позволяет
при необходимости переходить на «нормальную» разработку, то вам не
мешают свойственные фреймворку ограничения. В общем, React Native
обеспечивает высококачественную кроссплатформенную мобильную
разработку, и к этому инструменту стоит серьёзно присмотреться.
168
В заключении требуется отметить, что приведенный автором обзор React
Native для создания нативно отображаемых iOS- и Android-приложений иммет
ряд преимуществ. Исследования российских ученых Khitskov E.A., Veretekhina
S.V., Medvedeva A.V., Mnatsakanyan O.L., Shmakova E.G., Kotenev A. В
исследованиях на тему «DIgital transformation of society: problems entering in the
digital economy» предусматривают необходимость применения мобильных
приложений, в том числе кроссплатформенных для обеспечения качественного
вхождения населения в Цифровую экономику [4]. В дополнение в
исследованиях Резниченко С.А. и коллектива соавторов требуется учитывать
факторы работы устройств и поведение персонала в условиях отсутствия
электропитания приборов и устройств [6]. Из исследований Симонов В.Л.
дополнительно можно задействовать системы визуального программирования
для повышения качества работы системы [5]. Исследования российских ученых
направлены на использование современных ИТ-технологий во всех сферах
деятельности человека