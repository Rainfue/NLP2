JavaScript — это легковесный интерпретируемый (JIT — just-in-time
скомпилированный) язык программирования с функциями первого класса. Функции первого
класса трактуются как объекты, то есть могут быть переданы другим функциям и их можно
вернуть из функций, а также присваивать переменным [1]. JavaScript позволяет создавать
мощные функциональные возможности для фронтенда (клиентская сторона
пользовательского интерфейса к программно-аппаратной части сервиса) или бэкенда
(программно-аппаратная часть сервиса, отвечающая за функционирование его внутренней
части) веб-приложения.
JavaScript разработчики используют различные инструменты для облегчения и
ускорения разработки веб-приложений. Для анализа выбрано 4 популярных (по версии
опроса StackOverflow 2021 [2]) фронтенд решения, к которым разработчики могут
прибегнуть: Vue.js, Angular, React.js, Svelte.
Vue.js
Создан программистом Эваном Ю в 2014 году и лучше всего подходит для
одностраничных приложений, асинхронных компонентов, прототипов и рендеринга на
стороне сервера [3]. Некоторыми известными компаниями, которые используют Vue,
являются: Facebook для маркетинга новостной ленты, Adobe для Adobe Portfolio и Grammarly
для интерфейса пользователя.
Плюсы использования фреймворка Vue:
 лѐгкий в освоении — имеет простой подход, поэтому начинающие
разработчики могут изучить Vue достаточно быстро;
 высокая производительность — может повысить производительность
приложения, так как является очень быстрым и легковесным;
 хорошее сообщество — документация полная и продуманная, а сообщество
всегда готово помочь;
 гибкость — при желании писать шаблон на чистом HTML или с JavaScript,
можно адаптировать фреймворк под свои нужды.
Минусы использования фреймворка Vue:
 ограниченные плагины — нельзя использовать с некоторыми
распространѐнными плагинами, облегчающими веб разработку;
 языковой барьер — несмотря на большое сообщество и наличие
документации на английском языке, Vue написан китайцами, из-за чего
часто у библиотек фреймворка можно встретить китайский язык, что может
быть затруднительно для прочтения;
 риск чрезмерной гибкости — с точки зрения большого проекта, гибкость
является спорным качеством, так как предоставление команде
разработчиков слишком большого количества вариантов может привести к
ситуациям, когда команда использует философски разные подходы к
программированию.
Angular
Фреймворк создан Миско Хейвери в 2009 году в качестве стороннего проекта [4], и в
настоящее время поддерживается Google. Фреймворк оснащѐн дифференциальной загрузкой,
лениво загружающимся синтаксисом, а также API для сборщика приложения и рабочего
пространства.
В Angular можно использовать HTML для создания шаблонов и затем связывать эти
шаблоны с HTML страницами, чтобы ясно выражать реализуемые компоненты. Также
можно уменьшить количество кода с помощью привязки данных и инъекции зависимостей
прямо в браузере [5]. Известные компании, использующие Angular: Google, Udemy и
Amazon.
Стоит заметить, что существует разница между AngularJS и Angular. Angular — это
переписанная версия AngularJS, которая имеет много улучшений и основана на TypeScript.
AngularJS — это фреймворк на основе JavaScript с открытым исходным кодом для
разработки динамических приложений. Его язык шаблонов — HTML.
Плюсы использования фреймворка Angular:
 связывание данных — ускоряет создание приложений и шаблонов. Все
изменения происходят в реальном времени, каждое изменение слоя
автоматически отображается на модели;
 производительность сервера — улучшает производительность приложения,
так как он обслуживает статические файлы и отвечает на вызовы API
непосредственно;
 чистый код — написан на TypeScript, из-за чего он имеет более чистый код и
расширяемость. Он компилируется в JavaScript, но укажет на ошибки, если
типы не соблюдены.
Минусы использования фреймворка Angular:
 миграция — при работе с устаревшим кодом переход с более старых версий
(AngularJS) на Angular 8 займѐт много времени, что может замедлить работу
разработчиков;
 кривая обучения — достаточно крутая, если разработчик не знаком с MVC
(схема разделения данных приложения и управляющей логики на
компоненты Модель-Вид-Контроллер);
 переусложнѐнность — иногда является сложным и содержит неоправданно
много логов. Для одного компонента может потребоваться несколько
файлов и зависимостей.
React.js
React — это не фронтенд фреймворк, а широко распространѐнная библиотека,
созданная инженером по программному обеспечению Facebook Джорданом Уолке в 2011
году. Отличие библиотеки от фреймворка в том, что для библиотеки нужно выбирать пакеты
и инструменты самостоятельно в зависимости от поставленных задач. React — самое
популярное фронтенд решение в опросе StackOverflow за 2021 год [2]. На этой библиотеке
основано большое количество фреймворков.
React используется для создания динамических пользовательских интерфейсов. Он
отрисовывает веб-страницы таким образом, чтобы они были динамичными и отзывчивыми к
действиям пользователя. React имеет постоянно растущее онлайн сообщество, отличную
документацию и курсы на официальном веб-сайте [6]. Через некоторое время после выхода
React команда создала React Native — фреймворк для гибридной мобильной разработки.
Некоторые известные приложения, построенные с помощью React: Facebook (домашняя
страница), Instagram (геолокации и теги) и New York Times (интерфейс проекта Oscar Red
Carpet).
Плюсы использования библиотеки React:
 переиспользование HTML кода — позволяет повторно использовать части
HTML кода в любой части приложения в различных компонентах сборки;
 легко учить — кривая обучения не очень крутая. Прочитав официальные
документацию и обучающие статьи, можно быстро начать создавать
небольшие приложения;
 улучшенный DOM — виртуальный DOM позволяет удалить всю
неэффективность, связанную с использованием стандартного DOM, что
улучшает производительность веб-приложений;
 миграция — легко переходить со старой версии React на более новую. Также
можно легко интегрировать React с другими фреймворками, например, с
Angular;
 SEO — React является одной из лучших библиотек для создания
оптимизированных для поисковиков сайтов.
Минусы использования библиотеки React:
 быстрое развитие — React разрабатывается в очень быстром темпе, из-за
чего новым разработчикам может быть сложно поспевать за ним;
 плохая документация новых возможностей — библиотека развивается так
быстро, что у разработчиков может не хватать времени на качественную
документацию всех новых функции.
Svelte
Svelte — компилятор, созданный Ричем Харрисом в 2016 году [7]. Svelte похож на
такие инструменты для JavaScript, как React и Vue, но есть одно сильное отличие: Svelte
преобразует приложение в чистый JavaScript во время сборки у разработчика, а не
интерпретирует код на стороне пользователя во время выполнения в браузере. Это означает,
что абстракции фреймворка не будут ухудшать производительность, а приложение в первый
раз загружается также быстро, как и в последующие [7].
Svelte можно как постепенно добавлять в существующую кодовую базу, так и
использовать для создания нового приложения. Также возможна поставка компонентов в
качестве автономных пакетов, которые работают в любом месте, без накладных расходов изза зависимости от фреймворка [8].
Плюсы использования компилятора Svelte:
 производительность у пользователя — вместо того, чтобы выполнять
большую часть работы в браузере, Svelte работает на этапе сборки
приложения, преобразуя свой код в эффективный стандартный JavaScript
код;
 уменьшает накладные расходы — компиляция Svelte в стандартный
JavaScript улучшает читабельность кода, позволяет повторно использовать
этот код и создаѐт гораздо более производительное веб-приложение;
 нет необходимости использовать виртуальный DOM — Svelte не требует
декларативного, управляемого состоянием кода, который браузер должен
впоследствии преобразовать в операции DOM.
Минусы использования компилятора Svelte:
 компилятор берѐт на себя всю сложность — за простым API стоит большой
компилятор. Инструменты для разработки фронтенда стали очень тяжѐлыми
в эпоху веб-приложений, поэтому на практике повышенная сложность при
сборке добавляет накладные расходы на разработчика, которые и так уже
высокие;
 слабая поддержка IDE — поддержка IDE не сопоставима с широко
используемыми решениями;
 малое количество инструментов — экосистема Svelte имеет мало
инструментов для помощи разработчикам в веб-разработке.
Анализ четырѐх наиболее популярных фронтенд решений показал, что нельзя точно
определить, какой из них наилучший. У каждого есть как достоинства, так и недостатки. Для
выбора необходимо проанализировать разрабатываемый проект и использовать то решение,
которое подходит для него лучше всего.