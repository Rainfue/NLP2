HTML5 – открытая платформа, предназначенная для создания веб-приложений, использующих аудио, видео, графику, анимацию и многое другое. Одним
из преимуществ HTML5 является отказ от необходимости использования программного обеспечения сторонних производителей (например, Adobe Flash),
что повышает быстродействие, особенно на мобильных устройствах, и снижает
вероятность переноса на устройство вредоносного программного кода. Еще одним преимуществом такого подхода является уменьшение количества программного кода, который встраивается в каждую веб-страницу. Всё это делает
веб-приложение более быстрым и надёжным.
Научный альманах · 2016 · N 5-3(19) | Технические науки 72
· http:/ucom.ru/na · ISSN 2411-7609 ·
Платформа HTML5 имеет элементы <video> и <canvas>, позволяющие выполнять матричные преобразования над видео, используя только базовые инструменты языка JavaScript.
Элемент <video> платформы HTML5 является одним из новейших способов размещения мультимедийных файлов в сети. Данный элемент предоставляет свой программный интерфейс (API), возможность добавлять мультимедийное содержимое на веб-страницы и в веб-приложения без привлечения стороннего программного обеспечения.
Элемент <canvas> также является нововведением в HTML5. Он представляет собой “полотно” для создания растрового изображения и позволяет рисовать разные объекты, выводить изображения, трансформировать их, менять
свойства, создавать анимацию и даже игры [1]. Все это возможно делать “на
лету”. Однако <canvas> представляет собой только контейнер для графики; для
её же создания необходимо использовать различные скрипты.
JavaScript – язык программирования, с помощью которого веб-приложениям придается интерактивность. Он используется для написания различных
скриптов и сценариев. Стандартная библиотека включает в себя различные инструменты для работы с текстовыми данными, массивами, датами и регулярными выражениями, но не имеет программных возможностей для оперирования своими графическими объектами [2]. Для этого используются объекты
платформы, в которую встраивается JavaScript. Таким образом, благодаря базовым возможностям JavaScript, его можно рассматривать как инструмент для
преобразования видео. При этом используется элемент <canvas> платформы
HTML5 в качестве графического объекта для отрисовки преобразованных кадров.
Матричное преобразование видео [3] представляет собой покадровую обработку отдельных изображений и применение к ним различных фильтров.
Данный процесс использует два элемента <canvas > и состоит из следующих этапов:
– декодирование и воспроизведение видео видеопроигрывателем HTML5;
– копирование кадра в элемент <canvas>, который используется в качестве
буфера изображений;
– обрабатывание кадра в буфере;
– копирование обработанного кадра во второй элемент <canvas> для отображения.
Преобразование кадра происходит путем обрабатывания каждого пикселя. Каждый пиксель имеет четыре значения: три значения для цветов R, G, B
(красный, зеленый, синий – соответственно) и альфа-значение, отвечающее за
непрозрачность пикселя. Со значениями цветов пикселя производят различные
преобразования в зависимости от эффекта, который необходимо получить.
Листинг 1. Пример реализации черно-белого фильтра на языке JavaScript
[3]
for(var i = 0, n = data.length; i < n; i += 4) {
var r = frame.data[i + 0];
var g = frame.data[i + 1];
Научный альманах · 2016 · N 5-3(19) | Технические науки 73
· http:/ucom.ru/na · ISSN 2411-7609 ·
var b = frame.data[i + 2];
var brightness = (3*r + 4*g + b) >>> 3;
if (brightness < 0) brightness = 0;
data[i + 0] = brightness;
data[i + 1] = brightness;
data[i + 2] = brightness;
}
Особую роль при обработке кадров играет так называемый альфа-компонент пикселя, отвечающий за прозрачность всего пикселя. Альфа-компонент
(или альфа-канал), как правило, используется в качестве канала непрозрачности. Если значение альфа-канала пикселя имеет значение 0%, он полностью
прозрачен (и, таким образом, невидимый), в то время как значение 100% альфаканала дает полностью непрозрачный пиксель (традиционные цифровые изображения).
Элемент <canvas> платформы HTML5 позволяет получить из изображения
массив пикселей сразу в формате RGBA, то есть получить для каждого конкретного пикселя значения не только его основных цветов (RGB), но и значение
альфа-компонента. Эта особенность расширяет список эффектов, создаваемых
при преобразовании видео, и позволяет создать так называемый хромакей эффект.
Хромакей предполагает совмещение двух или более изображений в одной
композиции. Он достигается помещением объекта или объектов на однотонный
цветной фон (чаще всего синий или зеленый), на место которого впоследствии
можно поместить какое-либо другое изображение. Этот эффект используется в
современной киноиндустрии с целью исключения дорогостоящих декораций
или создания качественных фантастических спецэффектов.
Хромакей эффект можно применить, если заранее известно, что фон на видео статичен. Для этого необходимо обнулить значения альфа-компонент пикселей определенного цвета. В качестве базового пикселя с обнуляемой альфакомпонентой чаще всего можно выбрать самый первый пиксель, который находится в левом верхнем углу изображения (кадра). Далее в качестве фона можно
использовать какое-либо другое изображение или даже видео.
Листинг 2. Пример реализации применения хромакея на языке JavaScript
var tolerance = 150;
for(var i = 0, n = data.length; i < n; i += 4) {
var diff = Math.abs(data[i] – data[0]) + Math.abs(data[i+1] –
data[1]) + Math.abs(data[i+2] – data[2]);
if(diff < tolerance) {
data[i + 3] = 0;
 }
}
Данный код обнуляет альфа-значения пикселей, если разница значений
цветных компонент RGB этих пикселей и значений цветных компонент RGB базового пикселя меньше определенного порога. Но этот алгоритм можно усовершенствовать, установив зависимость между уровнем прозрачности и уровнем
Научный альманах · 2016 · N 5-3(19) | Технические науки 74
· http:/ucom.ru/na · ISSN 2411-7609 · разницы значений цветных компонент RGB двух пикселей. Это позволит создать более гладкий край объектов, что приведет к более качественному результату.
Таким образом, стандартные инструменты платформы HTML5 и JavaScript
позволяют выполнять существенные преобразования видео, создавать достаточно сложные эффекты без подключения посторонних модулей и библиотек.