Сегодня язык программирования PHP остается одним из самых популярных языков программирования для
разработки веб-приложений, что является следствием гибкости и наличия мощных бэкенд-фреймворков. Прошлые
исследования автора настоящей статьи указывают на существование обширного числа бэкенд-фреймворков для
актуального языка PHP, каждый из которых универсален для собственных задач и функций, обладает характерными
достоинствами и недостатками [4]. Тем не менее актуальным вопросом, несмотря на широту применения PHP,
остается вопрос производительности и эффективности, который приобретает сравнительный характер при
рассмотрении других языков программирования или фреймворков в рамках данного языка. В случае, если
сравнительный анализ производительности языков программирования имеет неоднозначный характер, т.к. каждый
язык, бесспорно, обладает собственными достоинствами и недостатками, ориентирован на конкретные задачи, а
оценка приобретает больше субъективных сторон, то сравнение бекенд-фреймворков на базе конкретного языка
программирования приобретает более объективную характеристику, поскольку позволяет выбрать исполнение для
целей разработки, а также учесть более стандартизированные метрики [9]. На примере разработки веб-приложений,
выбор бэкенд-фреймворка оказывает определенное влияние на множество факторов, включая производительность,
стабильность, безопасность, и возможности масштабирования приложения. Учитывая существование огромного
разнообразия фреймворков, доступных для PHP, из числа которых наиболее популярными становятся Laravel,
Symfony, CodeIgniter, Zend, Yii и др., необходимость приобретает проведение сравнительного анализа для целей
выбора того фреймворка, который положительно сказывается на производительности языка PHP.
Цель исследования – провести сравнительный анализ PHP-фреймворков в контексте оптимизации
производительности языка PHP.
Задачи исследования:
1) охарактеризовать теоретические основы повышения производительности языков программирования;
2) провести тестирование языка PHP на базе различных фреймворков с учетом выделенных метрик;
3) сгруппировать полученные данные и сделать выводы о сильных и слабых сторонах каждого фреймворкаТеоретическим базисом настоящего исследования послужили работы отечественных авторов, посвященные
процессам оптимизации языков программирования для решения конкретных типов задач. В работе мы используем
методы как теоретического исследования: анализ, синтез, сравнение и др., так и реализуем специальные методы
компьютерного тестирования. Так, нами были использованы три различных системы для тестирования:
низконагруженная система (Intel i5, 8GB RAM), средненагруженная система (Intel i7, 16GB RAM), и
высоконагруженная система (2x Intel Xeon, 64GB RAM). База данных на каждой системе была стандартной MySQL
версии 8.0, и были включены веб-серверы Apache и Nginx. Для целей измерения производительности были выбраны
следующие метрики: время ответа на запрос страницы, время записи в базу данных (БД), время чтения из БД, и
производительность при параллельных запросах. Кроме этого, мы исследовали использование памяти, проводили
нагрузочное тестирование, и описывали другие релевантные метрики, чтобы получить полное представление о
сильных и слабых сторонах каждого фреймворка.Тема выбора языка программирования и сравнения различных конфигураций для языков остается актуальной
ввиду формирования обширной системы доступных языков, каждый из которых обладает характерными
достоинствами или недостатками, рекомендуется для конкретных ситуаций применения. Молодой разработчик
нередко сталкивается с ситуацией, когда встает на перепутье выбора конкретного языка из множества существующих.
Более того, даже в случае выбора языка, данная проблема сохраняет свое значение, поскольку встает задача выбора
наиболее эффективного фреймворка. Как показывает широкая практика автора настоящего исследования в области
программирования, выбор конкретных решений носит субъективный характер и часто строится на ощущениях
конкретного специалиста. Как итог, отсутствуют достоверные данные, опираясь на которые можно было бы выбирать
различные конфигурации фреймворков для решения тех или иных задач в области программирования [10].
Сравнение языков программирования детально представлено в трудах многих авторов. В каждом из случаев
авторы исследования фокусируются на конкретной задаче, функциях и требуемых к исполнению операциях, что
позволяет создать объективные условия для сравнительного анализа.
Например, в исследовании М.Ю. Егорова, С.М. Егорова, Д.М. Егорова раскрываются условия, при которых
изменяется не только язык программирования, но и конфигурация самой системы. Авторы, исследуя решение задачи
численного моделирования переходных внутрикамерных процессов на ракетном двигателе, фокусируются на
сравнении вычислительной производительности с учетом изменения конфигурации системы. Результаты проведенного
исследования авторов демонстрируют, что использование программного комплекса, который основан на другом языке
программирования, способно значительно повлиять на производительность вычислений, а именно увеличить её более
чем в десять раз [3]. Столь значительные результаты, зачастую, могут определенно положительно сказаться на работе
программы, что требует сравнения вариантов исполнения программного кода.
Решение схожей прикладной задачи раскрыто в исследовании Е.К. Гребенниковой и П.И. Кандалова, которые
фокусируются на ситуации оптимизации времени работы программного алгоритма за счет выбора одного из языков
программирования. Авторы осуществляют разработку двух вариаций программного обеспечения на базе разных
языков, определяя, что функциональная сторона программного кода позволяет увеличить скорость работы системы в
шесть раз. Таким образом, в единой задаче при общих мощностях один язык программирования может показывать
большую скорость, нежели другой [1].
Однако важно понимать, что это не отражает преимущество одного языка над другим, поскольку
производительность зависит от целой системы факторов. На данный факт также указывают в своем исследовании В.В.
Рокотянская и В.С. Абрамов, которые проводят схожие сравнения языков программирования и их конфигураций в
рамках различных задач. Авторы приходят к выводу о том, что на основе подобных сравнений нельзя делать вывод о
превосходстве одного языка над другим, поскольку необходимо сравнивать не общий итог, а каждый отдельный случай
в работе языка. И хотя определенный язык может демонстрировать лучшее решение задач в большей части случаев, вряде других ситуаций он также может демонстрировать гораздо меньшую эффективность. Подобные противоречия не
позволяют дать полностью объективную оценку производительности языков, а учет всех влияющих факторов остается
попросту невозможным, ввиду их широты [6]. Например, проведенное сравнение языков программирования в работе
А.В. Давыдова, А.К. Жусуповой и О.С. Салыковой опирается сугубо на качественные характеристики, что не
позволяет раскрыть использование языков для решения прикладных задач и охарактеризовать их реальную
производительность [2].
Тем не менее единственным способом сравнения языков программирования или их конфигураций остается
создание единых условий и их типовое описание, как определенных задач, с которыми сталкивается программист при
задачах разработки. Как итог, сравнение приобретает более объективный характер и позволяет говорить не о
преимуществе языка и конкретной конфигурации в целом, а их вероятной большей эффективности в рамках
описанного спектра задач.
Работа И.В. Родыгиной и А.В. Наливайко наглядным образом подтверждает вышеизложенное, показывая, что в
задачах разработки серверной части программного приложения отдельные языки могут демонстрировать
неоднозначное превосходство в одних задачах, и уступать другим языкам в других. Авторы выделяют такие критерии
сравнения языков, как: скорость выдачи чистого текста, сериализация, множественные запросы к базе данных,
простота использования, конфигурация, типизация и многие другие [5].
Фокусируясь на исследовании вопросов применения фреймворков для целей оптимизации производительности,
заметим, что фреймворк становится одним из объективных способов компенсации недостатков конкретного языка.
Исследование А.И. Федотова и Р.Г. Гильванова наглядно показывает, как фреймворк способен повлиять на итоговую
производительность кода и программируемого приложения. Фреймворк предоставляет дополнительные возможности
в раскрытии потенциала конкретного языка, а также компенсирует некоторые ошибки [7].
Одним из немногих исследований, посвященных сравнительному анализу различных конфигураций PHPфреймворков, является исследование Е.С. Шевченко. Автор исследования выделяет несколько метрик для оценки
фреймворков на базе языка PHP: количество обрабатываемых запросов в секунду, используемая память, время
получения ответа от сервера и время на первый запуск приложения. В работе автор фокусируется на сравнении как
отдельных фреймворков, так и версий языка PHP. Итоги исследования показывают, что версия PHP 7.1 демонстрирует
значительный прирост производительности относительно PHP 5.6, а лучшим фреймворком по количеству
обрабатываемых запросов в секунду становится Phalcon 3.1.2. Качественно автор выделяет следующий недостаток
фреймворка Phalcon 3.1.2 – сложность применения среди начинающих разработчиков [8]. И хотя исследование Е.С.
Шевченко вносит весомый вклад в решение задачи сравнения фреймворков для PHP, мы видим недостаток выбранных
метрик и ситуаций использования PHP, что демонстрирует некоторые ограничения полученных выводов.
Важно также отметить, что сравнительный анализ фреймворков еще не раскрывался авторами в контексте
оптимизации PHP. Это определяет научную новизну настоящего исследования и необходимость проведения
сравнительного анализа PHP-фреймворков в контексте оптимизации производительности языка PHP