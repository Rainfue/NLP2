В жизни программист сталкивается с множеством различных трудных и легких задач, для решения 
которых затрачивается огромное количество физической и умственной силы.
Шаблоны проектирования (паттерны) значительно упрощают конструкцию и сам процесс кодирования и алгоритмизации.
На языке программирования PHP, как и на других языках программирования, встречаются проблемы 
с созданием алгоритмов, а затем и написанием кода.
Для решения таких часто встречаемых проблем и существуют шаблоны проектирования. Разбор 
стоит начать, прежде всего, с того, что же такое шаблоны. Под обычным словом «шаблон» мы можем 
понять, что это образец для создания нового, но с теми же характеристиками. В программировании суть 
«шаблона» оказалась точно такой же, но с некоторыми нововведениями, предназначенными для программирования. Теперь нужно разобраться, что такое «шаблон проектирования».
• Шаблоны паттерн проектирования — это часто встречающееся решение определенной проблемы 
при проектировании архитектуры программ [4].
• Шаблоны проектирования ускоряют разработку программного обеспечения, так как они уже проверены временем, надежны и со стороны программиста требуется всего лишь запомнить и выполнить их. 
Они ускоряют и упрощают процесс разработки программного обеспечения и делают сложные понятия 
более простыми.
Первым видом шаблонов мы бы хотели выделить порождающие шаблоны, т. е. шаблоны содержащие объекты, у которых есть возможность отделяться от их алгоритма реализации [1].
Данные шаблоны имеют такие разновидности, как:
1. Абстрактная фабрика (Abstract Factory) — создает семейство связанных и не связанных между собой 
объектов, без спецификации их классов.
2. Строитель (Builder) — создает объекты поэтапно.
3. Фабричный метод (Factory Method) — благодаря этому методу можно одним интерфейсом создавать разные объекты.
4. Пул одиночек (Multiton) — в нем находиться список именованных созданных экземпляров классов.
Второй вид шаблонов — это структурные шаблоны: формируют большие объектные структуры 
между большим количеством разных объектов [2].
1. Адаптер (Adapter/Wrapper) — используется для того, чтобы объекты с одним интерфейсом могли 
работать там, где расположены объекты с другими интерфейсами.
2. Мост (Bridge) — разделяет абстракцию и реализацию так, чтобы они могли изменяться независимо.
3. Компоновщик (Composite) — помогает взаимодействовать с иерархической группой объектов 
так же, как и с отдельно взятым экземпляром.
Третий вид шаблонов — это поведенческие шаблоны: управляют алгоритмами, отношениями и обязанностями между объектами.
1. Посредник (Mediator) — снижает связанность множества компонентов, работающих совместно.
2. Хранитель (Memento) — не нарушает инкапсуляцию, фиксирует и сохраняет внутреннее состояние объекта для того, чтобы позднее восстановить его в прежнем состоянии.
3. Объект Null (Null Object) — уменьшает шанс исключений из-за нулевых указателей (и ошибок 
PHP различного уровня).
Стоит заострить внимание на шаблоне «строитель». Это один из самых часто используемых шаблонов.
Строитель — это порождающий паттерн (шаблон) проектирования, который создает объекты поэтапно. «Строитель» позволяет создавать различные продукты, используясь одним и тем же процессом 
строительства [3].
Паттерн можно часто встретить в PHP-коде, особенно там, где требуется пошаговое создание продуктов 
или конфигурация сложных объектов.
Для лучшего и более быстрого результата программирования разработчику будет полезно выучить 
несколько часто используемых шаблонов и использовать их ежедневно для экономии своего времени.