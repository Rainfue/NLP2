С начала развития Интернета и до сегодняшнего времени почти все серверы были
многопоточными, потому что у них не было какого-либо известного и хорошо построенного
альтернативного пути. Однако, после презентации Node.Js разработчики начали обсуждать
недостатки многопоточных серверов и преимущества реализации сервера Node.Js.
Это действительно так, Node.Js — хороший способ реализации веб-сервера, но, не все
так однозначно и все зависит от него.
Node.js (или просто Node) — это серверная платформа для работы с JavaScript через
движок V8. JavaScript выполняет действие на стороне клиента, а Node — на сервере. С
помощью Node можно писать полноценные приложения. Node умеет работать с внешними
библиотеками, вызывать команды из кода на JavaScript и выполнять роль веб-сервера.
Введение
Иногда веб-сайт может не обрабатывать ваш запрос в виду заполненности серверов, на
которых он находится. Причин для этого может быть несколько: нехватка оперативной
памяти на сервере, большой поток одновременных пользователей.
В современное время большинство веб-сайтов использует многопоточные сервера, и в
таком случае при обращении к веб-сайту сервер первым делом проверяет количество
доступных потоков. В случае их отсутствия запрос становится в очередь ожидания любого
доступного потока на сервере(рис.2).
Проблема с запросом ―10к‖
Сервер всегда проверяет количество доступных потоков перед добавлением нового
запроса в поток, чтобы убедиться, что есть хотя бы один доступный поток.
Количество потоков на сервере зависит от количества его оперативной памяти- чем
больше памяти, тем больше потоков. Именно здесь и возникает «Проблема с запросом 10k».
Проблема 10k (
) — это проблема, которая говорит нам о линейной зависимости
между запросом к серверу (возможными потоками) и оперативной памятью. Эта проблема
появилась в 2000-х годах, когда сервер хотел обработать параллельных запросов.
Эта проблема возникает из-за того, что нативный сервер выделяет в памяти 1 Мб на каждый
поток и поэтому на
запросов (возможных потоков) нужно как минимум 9,77 Гб
памяти, что было практически не реализуемо для 2000-х годов, потому что цена такого
объема памяти была слишком высокой.
На сегодняшний день сервера могут иметь даже больший объем оперативной памяти,
но эта проблема всѐ ещѐ существует, хотя и в видоизмененном формате. С развитием
технологией «Проблема 10k» была преобразована в «Проблему 10М» (
). Проблема
осталась такой же- сервера с объемом GB оперативной памяти в настоящее время
очень дорогие и сложно реализуемые с технической точки зрения. Вот почему эта задача
показывает нам не только число, которое увеличивается по мере развития технологий, но и
соотношение между оперативной памятью и количеством допустимых пользователей
сервера.
Проблемы с основной структурой.
Механизм многопоточного сервера имеет две ошибочные проблемы:
1. Количество оперативной памяти на сервере напрямую связано с количеством
текущих пользователей на сервере- чем больше доступной памяти, тем больше
пользователей сможет обслужить веб-сервер.
2. Вторая проблема связана с блокировкой ввода-вывода для пользователей. Если вебсерверу будет не хватать оперативной памяти, текущие пользователи веб-сайта не смогут
полноценно с ним взаимодействовать, из-за чего возможны издержки у бизнеса.
Блокировка ввода/вывода.
После того, как сервер проверяет количество доступных потоков и подключает ответ
пользователя к свободному, он начинает запускать каждый процесс по очереди. В один
момент пользователь может получить блокирующий процесс ввода-вывода, из-за того, что
сервер ожидает завершения другого процесса.
Чтобы пользователь смог продолжить выполнять свои действия на сайте,
блокирующий процесс ввода-вывода должен быть завершен.
Например, чтение диска блокирует операцию ввода-вывода пользователя на веб-сайте.
Чтение диска требует примерно
тактов процессора, и пока эта трудоемкая и
времязатратная операция не завершится, веб-сайт будет недоступен для пользователя. Из-за
этого теряются мощности сервера, ведь он мог выполнять какие-то другие действия
параллельно вместо ожидания завершения блокирующего процесса ввода-вывода.
Из-за этих проблем может существенно снижаться скорость отклика веб-сервера для
пользователя.Решение этих проблем может быть затруднительно, поскольку проблему блокировки
процесса ввода-вывода нельзя решить без внесения изменений во всю систему. Также
невозможно и бесконечно добавлять оперативную память на сервер.
Доступное решение- новые разработки в области масштабирования сервисов могут
помочь разделить(масштабировать) сервис на отдельные сервера с более низкой ценой и
меньшим электропотреблением.
При проектировании сервиса необходимо учесть ожидаемое количество пользователей
веб-сайта. К примеру, ожидается сто тысяч одновременных пользователей. Для
обслуживания такого количества пользователей понадобится примерно 100 GB оперативной
памяти + 10% запаса. Следовательно, сервис необходимо оснастить как минимум 128GB
оперативной памяти.
При покупке 128 GB оперативной памяти компания потратит большое количество
средств, выгоднее арендовать много серверов с 8GB оперативной памяти. Аренда всех
серверов выйдет дешевле покупки большого объема оперативной памяти для сервера, также
это экономия на электроэнергии, так как в простое сервера с малым объемом оперативной
памяти будут потреблять меньшее количество электричества.
Это хороший способ уменьшить затраты на серверы, но также есть альтернативный
вариант с меньшими денежными затратами- использование Node.Js
Node.Js построен на однопоточном сервере с неблокирующим вводом-выводом, это
значит, что он потребляет гораздо меньше энергии и не требует столько оперативной памяти,
потому что использует более эффективное распределение ресурсов на главном сервере. Но
Node.Js не предназначен для работы с математическими вычислениями, поэтому для работы
с математикой лучше будет использовать многопоточный сервер с блокирующим процессом
ввода-вывода, даже не смотря на все его минусы. Однако это справедливо только для
расчетов. Для работы с дисками, данными, базами данных и т.д. Node.Js подходит куда
лучше.
