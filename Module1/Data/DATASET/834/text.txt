React – это JavaScript библиотека с открытым исходным кодом для разработки пользовательских интерфейсов.» [0] В настоящее время данная библиотека очень интенсивно набирает свою популярность, она имеет очень много
полезных особенностей, ею часто пользуются крупные компании, такие как
Facebook, Instagram и многие другие корпорации, и сообщества разработчиков.
Особенности React:
1. Декларативность.
2. Компонентный подход.
3. Возможность постепенного внедрения в проект.
4. JSX.
5. Virtual DOM.
6. Универсальность.
7. React Hooks.
Разберем каждую особенность по отдельности.
Декларативность дает возможность пользователю управлять потоками и
состоянием в разрабатываемом приложении. Код становится более предсказуемым, отладка становится значительно легче.
Компонентный подход дает разработчику возможность разделить всю логику приложения на отдельные независимые друг от друга компоненты, что
значительно улучшает читабельность кода и уменьшает вероятность ошибок в
коде. Можно создавать компоненты постепенно, отслеживая их состояние.
А также, используя данный подход, можно объединять отдельные компоненты
в сложные пользовательские интерфейсы.
Отличительной особенностью React является возможность его постепенного внедрения в проект. Разработчику не обязательно знать всю документа-
245
цию наизусть для работы с данным фреймворком, достаточно просто постепенно внедрять его в проект, не меняя существующий код, а лишь разрабатывая новую функциональность по мере необходимости.
«JSX – расширение языка JavaScript, одна из его особенностей. Рекомендуется использовать его, когда требуется объяснить React, как должен выглядеть
UI.» [0]
JSX является элементов React, внешне напоминает совмещение языка шаблонов и JavaScript. Данное расширение использовать не обязательно, но многие разработчики ценят его за хорошую наглядность при разработке UI. Но это
еще не все, JSX помогает фреймворку разрабатывать более понятные сообщения об ошибках для разработчиков.
Рисунок 1 – JSX
Чтобы рассказать о Virual DOM – одной из особенностей React, сначала
необходимо познакомиться с самим понятием DOM.
«DOM дерево – это представление HTML-документа в виде дерева тегов.
каждый HTML-тег является объектом. Вложенные теги являются «детьми» родительского элемента. Текст, который находится внутри тега, также является
объектом. Все эти объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы.» [0]
Virtual DOM – это легковесная копия DOM, многие разработчики ценят React именно из-за этой технологии. Она сравнивает элемент и его дочернее дерево с предыдущей версией и вносит в DOM только минимально необходимые
изменения. Это позволяет быстро отслеживать изменения и не перегружать
систему ненужными обновлениями.
Также стоит отметить, что React довольно универсален. Помимо веб-приложений с его помощью можно создавать мобильные приложения, как на Android, так и на iOS. Для этого на помощь разработчику приходит библиотека
под названием React Native, которая также является JavaScript фреймворком,
имеет такие же возможности, как и React, а также много различных собственных компонентов. Также React Native очень прост в изучении, если разработчик уже сталкивался с обычным React, потому что данная библиотека имеет
практически полностью идентичный синтаксис.
Чтобы рассказать про последнюю особенность, сначала необходимо рассказать про возможность написания кода в React. Дело в том, что данная библиотека дает разработчику на выбор сразу два варианта для написания кода:
функциональные и классовые компоненты.
По своей сути они идентичны, разница лишь во внешнем виде и в функциях, которые они используют. Некоторым разработчикам удобнее и нагляднее работать на классовых компонентах, но основная масса предпочитает
функциональные компоненты.
246
Рисунок 2 – Классовый компонент
Рисунок 3 – Функциональный компонент
С функциональными компонентами намного проще работать, код выглядит
более читабельным, простым и понятным. Также стоит отметить, что кода становится значительно меньше, ведь с функциональными компонентами при
написании основной логики используется такое понятие, как React Hooks.
React Hooks – это нововведение в React, по своей сути это функции, которые решают множество различных проблем разработчиков, значительно упрощают работу как с логикой приложения, так и с UI. В качестве примера рассмотрим более подробно два основных и самых часто используемых хука.
«useState – это хук состояния. Мы вызываем его, чтобы наделить наш функциональный компонент внутренним состоянием. React будет хранить это состояние между рендерами. Вызов useState возвращает массив с двумя элементами, который содержит: текущее значение состояния и функцию для его обновления.» [0]
Рисунок 4 – Хук состояния
247
«С помощью хука эффекта useEffect вы можете выполнять побочные эффекты из функционального компонента. Он выполняет туже роль, что и
componentDidMount, componentDidUpdate и componentWillUnmount в Reactклассах, объединив их в единый API.» [0]
Рисунок 4 – Хук эффекта
Помимо всех особенностей стоит отметить основной стек технологий, на
котором чаще всего разработчики предпочитают взаимодействовать с React:
MERN – Mongo DB, Express, React, Node JS. Данный стек позволяет работать
как с UI, так и с API, он достаточно прост как в использовании, так и в понимании. С его помощью можно создать полноценный интерактивный пользовательский интерфейс с использованием базы данных и API запросов.
Для более полноценного представления данной технологии, необходимо
привести в пример аналоги, а также сопоставить их между собой. Из самых
популярных технологий для разработки интерактивных интерфейсов были выбраны следующие аналоги: Vue.js и Angular.
Сразу стоит отметить, что 78% разработчиков предпочитают в работе
именно React, Angular – 21%, Vue.js – 0,8%.
Angular хорош за счет своей структуры и архитектуры. Он позволяет внедрять зависимости от компонентов, связанных с модулями. Также данный
фреймворк имеет хорошую и подробную документацию, также как и React. Но
имеет слишком много разных структур и низкую производительность.
Vue.js хорошо справляется с адаптивностью, имеет потрясающую интеграцию и масштабирование. Но имеет такие минусы, как недостаток ресурсов и
риск чрезмерной гибкости при интеграции в огромные проекты.
248
React также имеет свои недостатки. Например, из-за JSX могут возникнуть
сложности в смешении шаблонов и логики. А написание стилей в React очень
разнообразно: CSS Modules, CSS-in-JS и SASS.
Подводя итог, хочется отметить, что React в любом случае является лидером по популярности среди фронтенд-фреймворков и библиотек. У него есть
свои особенности и технологии, которые позволяет создавать быстрые, декларативные и универсальные интерактивные пользовательские интерфейсы. React дает возможность своевременно обновлять только необходимые компоненты и сразу же отображать их текущее состояние.
