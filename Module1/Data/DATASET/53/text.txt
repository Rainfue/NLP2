Обработка событий – основа работы с Node.js. События генерируют практически все объекты. В явном и неявном виде
мы уже использовали их (например, событие exit для объекта process), теперь пришло время разобраться с этим механизмом более подробно.
За события в Node.js отвечает специальный модуль
events.
Назначать объекту обработчик события следует методом addListener (event, listener), аналогичным имеющемуся
в обычном «браузерном» JavaScript. Аргументами для него
служат имя события (строка, обычно в camelCase-стиле:
«connect», «messages», «messageBegin») и функция обратного вызова – обработчик события. Модуль, который мы установили, прямо скажем, не балует
богатством функционала, впрочем, со своими задачами,
при всей простоте, он вполне справляется. Справляется
именно из-за простоты – модуль не использует никаких
ресурсов и, самое главное, не отягощен связями с другими внешними модулями. На самом деле это достаточно
уникальная ситуация. Любое более или менее сложное
расширение, как правило, тянет за собой пучок зависимостей. (А что вы хотели? Где модульная архитектура, там
и «Dependencies»!). Устанавливать все необходимое вручную – дело очень муторное и неблагодарное. Естественно,
в подобного рода работе давно уже нет необходимости.
Средство для поиска, установки и обновления модулей
Node.js теперь входит в стандартную поставку платформы. 
Чтобы понять, как устроены дополнения в Node.js, лучше всего не мелочиться и написать собственный модуль. Давайте
так и поступим, тем более что модули в Node.js – это не только способ добавления нового функционала. Их нельзя сравнивать, например, с расширениями PHP или с модулями
Apache.
Модули – это нормальный способ организации приложения Node.js. То есть, создавая свои объекты с каким-либо
значимым функционалом, крайне желательно оформлять
их в виде модулей, что, помимо прочего, решает проблемы повторного использования кода, структурированности
предложения, проблему подпространств имен, наконец.