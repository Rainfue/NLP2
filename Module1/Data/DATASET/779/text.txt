Одним из ярких примеров прогрессивной разработки является библиотека React. Это
библиотека уровня представления, а не фреймворк, подобно Angular, Backbone. Это
означает, что у него нет маршрутизации, нет контроллеров и бизнес логики (моделей
данных), только представление. Но React предоставляет множество преимуществ, несмотря
на то, что на нем нельзя создать полноценное MVC приложение [1].
React – это декларативная, эффективная, основанная на компонентах и гибкая
библиотека JavaScript (JS). Все компоненты создаются с помощью React с использованием
JS, а не специального языка шаблонов. Каждый элемент создан только с использованием
чистого JS. Любой компонент можно разделить на более мелкие, тем самым добиваясь
производительности, быстроты и отзывчивости приложения. Так же он использует свою,
более быструю модель представления, похожую на DOM (Document Object Model), которая
обновляется только при необходимых изменениях компонента. Это лишь основная часть из
многих преимуществ данной библиотеки, но именно такой подход сделал React
знаменитым, и, после первого своего появления в 2014 году, он только набирает
популярность среди разработчиков программного обеспечения [2].
Что же такое Next.js? Next.js – это минималистичная JavaScript библиотека,
постренная поверх библиотеки React. Он был вдохновлен подходом языка PHP и его
экосистемы к серверной отрисовке приложения (Server-Side Render, SSR), и впервые был
упомянут в 2016 году компанией-создателем данной библиотеки – ZEIT.
Так же стоит отметить, что React вдохновил еще одну библиотеку – ReactNative. Это
библиотека для разработки родных (native), мобильных приложений, которая так же
является очень популярной и наращивает аудиторию с каждым днем.
Прежде чем приступать к основным отличиям React и Next.js, опишем принципы
отрисовки SSR и Client-Side Render (CSR). Client-Side Render – отрисовка на стороне
клиента означает, что браузер изначально загружает минимальную часть HTML разметки,
а само содержимое заполняется непосредственно самим языком JavaScript. При подходе
Server-Side Render содержимое страницы генерируется на стороне сервера и браузер грузит
полноценную версию HTML документа, но дальнейшие обновления документа попрежнему происходят на стороне клиента.
Первое и, наверное, основное отличие Next.js от React, как говорилось выше, это
конечно же, гибридный подход к отображению страницы. Первый запрос в приложении
всегда обрабатывается на стороне сервера, все последующие же изменяют отображения
привычным для React способом – на стороне клиента. Такие приложения принято называть
изоморфными, универсальными приложениями.
Зачем нужно это серверное отображение и тем более изоморфные приложения: дело
в том, что хоть Single Page Application (SPA) это и передовой подход к построению
одностраничных приложений, но он ограничен в плане индексации поисковыми роботами.
Заполнение контента только после асинхронного выполнения JavaScript кода затрудняет
работы роботов при сканировании страниц, что ожидаемо приводит к снижению SEOэффективности. В то же самое время реализация изоморфоности не лишает разработчиков
привычной отзывчивости и скорости работы одностраничных приложений.
Также к основным отличиям стоит отнести:
1. Динамическая маршрутизация на основе файловой системы. Это означает, что
приложение может иметь отдельные URL-адреса на основе файлов, хранящихся в каталоге
/pages. Next самостоятельно разбирает страницы на маршруты на основе path-to-regexp.
2. Автоматическая статическая типизация. Позволяет генерировать статические
страницы, которые не требуют повторной серверной генерации, что очевидно
положительно сказывается на производительности приложения. В нововведениях Next 9
данная возможность работает в автоматическом режиме благодаря алгоритмам проверки
наличия блокирующих требований к данным, таких как getInitialProps. Благодаря данной
эвристике Next, и без того гибридное, стало еще универсальнее, позволяя сочетать как
динамические страницы, так и статически сгенерированные. Так же прикладной
программный интерфейс API app.getRequestHandler уберегут разработчика от повторной
сборки приложения.
3. Больше оптимизации производительности «из коробки», такая как
предварительная обработка компонентов <Link> (маршруты), позволяет быстрее
перемещаться между страницами. Также по умолчанию включено Accelerated Mobile Pages
(AMP) - технология ускоренных мобильных страниц.
4. Автоматическое устранение «мертвого» программного кода путем проверки
typeof на undefined или object во время сборки приложения.
Жизненные циклы React и Next в основном идентичны на уровне компонентов, но у
последнего есть отличительная особенность – это статический метод getInitialProps,
работающий только на компонентах типа «страница» или зарезервированных компонентах
_app.js и _docuement.js. В последнем самими разработчиками Next не рекомендуется
использовать любые методы жизненного цикла приложения.
Данный метод вызывается автоматически при существовании как на стороне сервера,
так и на стороне клиента, так же может быть асинхронным и возвращать объект обещания
(Promise). Единственное отличие от вызова на сервере и на стороне клиента – это различные
аргументы функции, например, на стороне сервера (NodeJS) в аргументах есть свойство req
и res, request и response соответственно. На клиентской же стороне в аргументах появляются
нормализованные свойства pathname и query.