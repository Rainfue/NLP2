В настоящее время по причине повышенной автоматизации и информатизации
деятельности человека требуется использование широкого спектра инструментов в различных
технологических процессах, в том числе при разработке интерфейсов корпоративных
приложений. Однако большое разнообразие современных инструментов веб-индустрии
зачастую мешает построить простую в поддержке систему и накладывает ограничения в
зависимости от выбранных средств.
Платформа Node.js является одним из популярных инструментов для создания серверной
стороны веб-приложения и широко используется различными крупными компаниями [1].
Несмотря на это не существует концепции при разработке приложений и выборе фреймворков
на данной платформе, как это происходит при выборе других платформ и языков.
Вышесказанное определяет проблему верного выбора каркаса веб-приложения на платформе
Node.js [2].
Основными задачами работы являются анализ классификаций фреймворков и
результатов сравнительного анализа, представленных в научных исследованиях,
аналитических обзорах и публикациях разработчиков, а также определение параметров и
характеристик каркасов для веб-приложений, которыми оперируют авторы в исследованиях
для проведения сравнительного анализа с целью выявления преимуществ и недостатков
фреймворков.
Первоначально требуется составить классификацию каркасов, которыми пользуются
разработчики, так как особенности структуры фреймворка влияют на многие параметры
будущего приложения, в том числе на возможные размеры, сложность и масштабируемость.В сообществе выделяют следующую классификацию фреймворков:
1. библиотека HTTP-сервера – набор функций и классов, позволяющих на их основе строить
веб-приложения [3], именно поэтому такие библиотеки разработчики относят к
фреймворкам, хотя технически каркасами они не являются;
2. API-фреймворк – набор функций для построения системы, основанного на доступе по
интерфейсу, а также архитектурный фреймворк, который облегчает создание структуры
приложения [4];
3. фреймворк HTTP-сервера – включает в себя такие же функции по работе с командами и
маршрутами HTTP, как и библиотека HTTP, однако предоставляет каркас небольшого
сервера, построенного на таких функция; на основе сервера разработчик может развивать
систему, при этом исключая из кода обработку HTTP-команд [4];
4. веб-фреймворк MVC – фреймворк, использующийся для разработки систем на базе
паттерна MVC (Модель-Представление-Контроллер), данная архитектура диктует способ
построения приложения именно в такой модели [4];
5. полностековый фреймворк – данный вид фреймворков задает каркас не только для создания
системы на стороне сервера, но также определяет тип работы с данными и пользователями
на клиентской стороне [4].
Требуется отметить, что при первоначальном развитии Node на рынке не было
компаний-монополистов, создавших фреймворк, подходящий под любые веб-приложения.
Это привело к тому, что независимые разработчики начали создавать собственные библиотеки
и фреймворки для создания веб-серверов и систем. Такой ход породил большое количество
различных модулей, каркасов и библиотек, доступных широкому кругу программистов. В
связи с этим на текущий момент существует большое количество фремворков на платформе
Node, пересекающихся по функционалу, либо имеющих специфические отличия, что
негативно влияет на процесс создания конечных продуктов, так как разработчикам требуется
выбирать из слишком большого разнообразия.
В табл. 1 представлены известные фреймворки для Node с оценками GitHub на момент
написания работы, так как это показывает, насколько известным в сообществе разработчиков
является каждый из них [2]. Также указаны тип фреймворков и их возможное применение.Из результатов проведенного анализа следует, что разработчикам приложений требуется
первоначально определить необходимые возможности и размер проекта, задачи
масштабируемости и безопасности, прежде чем выбирать какой-либо фреймворк. Неверное
решение может привести к последствиям, ликвидировать которые будет сложно или
невозможно. С другой стороны, верно выбранный каркас позволит максимально эффективно
и быстро построить веб-приложение.
В ходе работы выявлены и проанализированы фреймворки, которые были разработаны
для создания приложений на платформе Node.js. Также были определены причины большого количества каркасов. Из всех фреймворков были определены наиболее популярные согласно
рейтингу сообщества программистов и результатов сравнительного анализа, представленного
в научных исследованиях. Для общепризнанных каркасов приведены сравнительные
характеристики, исходя из научных исследований.
Согласно собранным данным может быть определен фреймворк для приложения по
качественным характеристикам. Однако для более детального сравнения каркасов требуется
выбор количественных параметров, что является следующим этапом исследования.
