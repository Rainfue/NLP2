Область веб-разработки стремительно развивается уже на протяжении
нескольких десятилетий. В момент зарождения данной области программирования
разработчики применяли только язык гипертекстовой разметки (HTML) для создания
простых веб-сайтов.
Однако с появлением CSS – каскадных таблиц стилей, разработчикам стало
намного проще создавать эффектные и красочные веб-ресурсы, за счет
применения дополнительных стилей к основным элементам страниц. Со временем
появилась потребность в создании инструмента, способного оптимизировать
процесс реализации стилей внешнего интерфейса веб-сайта путем
преобразования кода, который синтаксически отличается, в стандартный и
привычный код на CSS. Решить данную задачу позволило внедрение инструмента вебразработки, получившего название препроцессор.
CSS-препроцессор представляет собой надстройку, добавляющую функции
для отображения стилистики элементов, которые ранее были недоступны.
Реализуется данная надстройка за счёт применения синтаксических конструкций.
Целью использования препроцессора является предоставление разработчику
конструкций для упрощения и ускорения работы со стилями создаваемого вебсайта.
При помощи препроцессоров можно писать код, который нацелен на:
читабельность, структурированность и логичность, производительность. К наиболее
популярным разновидностям данного инструмента относятся: LESS, SASS, SCSS.
LESS (Leaner Style Sheets – компактные таблицы стилей) представляет собой
динамический язык стилей, вложенный метаязык, который способен преобразовать
LESS-программу в валидный CSS-код. За счет переменных, функций, циклов и иных
технологий он расширяет и упрощает работу со стилями. LESS – это свободное ПО с
открытым исходным кодом, распространяемое по лицензии Apache License 2.
Первая версия LESS была реализована на языке Ruby, последующие – на JavaScript.
За счет синтаксиса, основанного на CSS, этот язык отличается низким порогом
вхождения.
Применение препроцессора LESS позволило решить ряд задач:
– повышение структурированности и логичности кода, что не только ускоряет
его написание, но и упрощает поиск ошибок и тестирование;
– улучшение производительности за счет того, что нужные переменные
задействуются по мере необходимости и позволяют браузеру не тратить ресурсы
платформы на их обработку.
Пример кода, написанного на препроцессоре LESS, представлен ниже на
рисунке 1.
~ 24 ~
Рисунок 1 - Синтаксис препроцессора LESS
Sass (Syntactically Awesome Stylesheets) – представляет собой скриптовый
метаязык, который был разработан для того, чтобы упростить код, написанный на CSS.
У препроцессора SASS синтаксис короче CSS, в нем отсутствуют скобки и точки с
запятой, поэтому набирать его проще.
Отступы, которые используются в нём, содержат логическое значение, поэтому
необходимо отслеживать их написание, так как применение неправильного отступа
способно сломать таблицу стилей. Отступ у блока селектора определяет вложенный
селектор. Если сместить элемент вправо, он внезапно может оказаться дочерним
элементом другого элемента, что сильно изменит результат. Пример кода,
написанного на препроцессоре SASS, представлен ниже на рисунке 2.
Рисунок 2 - Синтаксис препроцессора SASS
SCSS расшифровывается как Sassy Cascading Style Sheets. Это надмножество
языка CSS, которое добавляет дополнительную функциональность CSS и дает вебразработчикам больше гибкости и возможностей при создании веб-дизайна. Он
использует тот же синтаксис, что и CSS, требующий скобок и точек с запятой для
обозначения блоков и окончаний строк.
К преимуществам применения SCSS можно отнести использование миксинов.
Миксин – класс, в котором некоторые или все его методы и свойства не реализованы,
требуя, чтобы другой класс или интерфейс обеспечивал недостающие реализации.
К примеру, создав один раз миксин с характеристиками шрифта для
определенного заголовка блока, можно применять его многократно по всей вебстранице.
Таким образом, применение препроцессоров в веб-разработки позволило
расширить возможности разработчиков при реализации визуальной части вебсайтов, за счет более широкого функционала по сравнение со стандартным CSS.
Также с помощью использования препроцессоров в работе над проектом
повышается эффективность написания кода.