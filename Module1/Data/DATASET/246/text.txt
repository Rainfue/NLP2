Фреймворк (framework) переводится с английского языка как
«каркас, структура». Под этим термином понимается комплекс ITинструментов, которые позволяют сделать разработку и поддержку
сложных веб-проектов с высокой нагрузкой более простыми. За счет
того, что фреймворк включает в себя базовые программные модули,
его можно охарактеризовать как промежуточный вариант по гибкости
и уровню сложности между созданием кода от самого начала и
применением CMS. Если в работе необходимо использовать
специфичные компоненты, они создаются программистами.
Если говорить простыми словами, то фреймворк – это каркас
из программ. Определенная часть фреймворка неизменна, она
сохраняет свое постоянство независимо от конфигурации. Другая
часть является переменной. Последняя включает в себя модули и
компоненты, необходимые для кастомизации окончательной системы
[2].
Бэкенд-фреймворки
К этим фреймворкам относятся такие, функции которых
осуществляются на сервере. Как правило, в зоне их ответственности
лежат отдельные части ресурса, от которых зависит
работоспособность всего сайта или приложения. Ниже приведем
примеры и перечислим, какие языки программирования используют
эти платформы:
 фреймворк Django - Python; 
 фреймворки Symfony и Laravel - PHP;
 фреймворк.NET - C#;
 фреймворк Ruby on Rails - Ruby.
Некоторые фреймворки ограничивают создание ресурса с
насыщенным интерфейсом. Кроме того, их функциональность
недостаточно разнообразна [2].
Фронтенд-фреймворки
Функционал этого вида фреймворков завязан на браузере. В их
зоне ответственности лежит визуальная составляющая ресурса. Они
не принимают участия в организации внутренней логики работы
приложения или сайта. С помощью таких платформ осуществляется
отображение интерфейса пользователя, создаются анимации и
лендинги. Эту группу составляют:
 фреймворк React (эта платформа по своей сути
приравнивается к библиотеке, но функционал настолько широк, что ее
часто сравнивают с иными веб-фреймворками);
 фреймворк Angular;
 фреймворк Vue;
 фреймворк Svelte.
Все эти фреймворки базируются на JavaScript. На сегодняшний
день JavaScript - один из наиболее популярных языков
программирования во всем мире, именно поэтому умение владеть
различными JS фреймворками будет очень полезным для
современного разработчика желающего разрабатывать приложения
для широкого спектра платформ [3].
JS-фреймворки – это инструменты для построения
динамических веб/мобильных/настольных приложений на языке
JavaScript. С их помощью можно разрабатывать не только
полноценные сайты, но и функциональные модули [4].
Фреймворк имеет архитектуру, которая диктует поток
управления в приложении. Фреймворк описывает скелет и
рассказывает о том, как все должно быть организовано. Кроме того
фреймворком предоставляются основные функции, необходимые для
запуска приложения. Так же, разработчик обязан следовать
принципам и шаблонам фреймворка. Разница между фреймворком и
библиотекой заключается в том, что вы вызываете библиотеку, тогда
как фреймворк вызывает вас. 
К преимуществам построения приложений на JS-фреймворках
можно отнести:
 возможность написания Single Page Application;
 структурированность кода, благодаря тому, что каждый
фреймворк несет в себе какой-либо паттерн программирования;
 модульность приложения, за счет чего можно легко
добавить новый функционал;
 быстрая разработка, в связи с тем, что всё структурировано,
повышается скорость разработки.
Среди существенных недостатков можно отметить –
необходимость изучения фреймворка, так как в некоторых
фреймворках имеется свой синтаксис, в частности, к таким
фреймворкам можно отнести Angular, React и т.д.
Рассмотрим некоторые наиболее используемые JS-фреймворки
и библиотеки [5]:
1. React – это библиотека JavaScript для построения
пользовательских интерфейсов, разработанная и поддерживаемая
Facebook. React позволяет разработчикам создавать масштабируемые,
быстрые и интерактивные веб-приложения с использованием
концепции компонентов.
Основные характеристики React:
Компонентный подход: React приложения строятся из
модульных, переиспользуемых компонентов, которые могут
управлять своим состоянием и рендерингом.
Виртуальный DOM: React использует виртуальное
представление DOM, что позволяет оптимизировать и ускорить
обновления интерфейса, изменяя только те части реального DOM,
которые действительно изменились.
Односторонний поток данных: React следует принципу
"однонаправленного потока данных", что обеспечивает
предсказуемость и упрощает отладку приложений.
JSX: React вводит синтаксис JSX, который позволяет
разработчикам описывать интерфейс непосредственно в JavaScript,
совмещая элементы разметки и логику.
Жизненный цикл компонентов: React предоставляет методы
жизненного цикла, которые позволяют разработчикам контролировать
поведение компонентов на различных этапах их “жизни”. 
Поддержка хуков: Введенные в более поздних версиях, хуки
позволяют использовать состояние и другие возможности React без
написания классовых компонентов.
Интеграция с различными платформами: С помощью таких
проектов как React Native, React может быть использован не только
для веб-разработки, но и для создания мобильных приложений.
React активно развивается и имеет большое и активное
сообщество разработчиков, что делает его одним из наиболее
популярных инструментов для создания современных вебприложений.
2. Angular - это платформа и фреймворк для построения
клиентских приложений с использованием HTML и TypeScript.
Angular написан на TypeScript. Он реализует основные принципы
разработки веб-приложений, позволяя разработчикам создавать
модульные, масштабируемые и эффективные приложения.
Основные характеристики Angular:
Компонентный подход: Приложения на Angular строятся из
компонентов, которые представляют собой логические и
функциональные единицы интерфейса.
Двусторонняя связь данных: Этот механизм позволяет
автоматически обновлять пользовательский интерфейс в ответ на
изменения состояния приложения и наоборот.
Декларативные шаблоны: Angular использует свою
собственную HTML-разметку для объявления динамических частей
интерфейса.
Dependency Injection: Это система, которая позволяет
упростить разработку и повысить масштабируемость путем
устранения зависимостей между компонентами.
Модульность: Приложения в Angular организованы в модули,
что обеспечивает высокую степень переиспользуемости кода и
упорядоченность структуры проекта.
Интеграция с RxJS: Angular тесно интегрирован с библиотекой
RxJS, что позволяет работать с асинхронными операциями и
обрабатывать потоки данных эффективно.
Инструментарий разработки: Angular предоставляет мощный
инструмент CLI (интерфейс командной строки) для автоматизации задач, таких как создание проекта, добавление компонентов и
развертывание приложения.
Маршрутизация: Встроенный маршрутизатор позволяет
разработчикам создавать сложные навигационные структуры внутри
приложения.
Angular активно поддерживается и развивается командой
Google, что делает его одним из самых популярных и доверенных
фреймворков для разработки веб-приложений.
3. Vue – это прогрессивный фреймворк для создания
пользовательских интерфейсов. В отличие от монолитных
фреймворков, Vue разработан таким образом, чтобы быть
инкрементно принимаемым. Ядро фреймворка сосредоточено только
на представлении, что делает его легко интегрируемым с другими
проектами и библиотеками, но при этом его возможности могут
расширяться с помощью официально поддерживаемых библиотек.
Основные характеристики Vue:
Реактивная система: Vue обеспечивает реактивность данных с
минимумом усилий, позволяя создавать динамичные интерфейсы,
которые автоматически обновляются при изменении данных.
Компонентный подход: Vue позволяет строить
масштабируемые приложения из мелких, переиспользуемых
компонентов, делая код более управляемым и организованным.
Декларативные шаблоны: С использованием простого и
четкого синтаксиса шаблонов Vue может обновлять интерфейс в
соответствии с состоянием приложения.
Легкий и гибкий API: Vue предлагает мощный набор API,
который позволяет разработчикам легко создавать интерактивные и
динамичные приложения.
Модульность: С помощью системы плагинов и библиотек,
таких как Vuex (для управления состоянием) и Vue Router (для
маршрутизации), можно легко расширять функциональность
приложения.
Легковесность: Один из основных преимуществ Vue - его
небольшой размер, что делает его быстрым для загрузки и
эффективным по скорости работы. 
Поддержка однофайловых компонентов: Это позволяет
объединять HTML, JavaScript и CSS в одном файле с
расширением.vue, делая структуру проекта четкой и удобной.
Vue имеет активное сообщество и широкую базу
пользователей, что делает его одним из наиболее популярных
фреймворков для разработки современных веб-приложений.
4. Svelte – это инновационный фреймворк для создания
пользовательских интерфейсов. В отличие от традиционных
фреймворков, которые выполняют большую часть своей работы в
браузере, Svelte переносит эту работу на этап компиляции:
компоненты Svelte компилируются в нативный JavaScript на этапе
сборки, что делает их исключительно быстрыми и легкими.
Основные характеристики Svelte:
Отсутствие виртуального DOM: Вместо использования
виртуального DOM, как в React, Svelte генерирует минимально
необходимый код для обновления DOM, что делает обновления
быстрыми и эффективными.
Компиляция, а не интерпретация: Svelte компилирует
компоненты в оптимизированный JavaScript во время сборки, что
уменьшает размер исходного кода и улучшает производительность.
Встроенная реактивность: В Svelte реактивность встроена на
уровне языка. Это делает код более чистым и понятным, без
необходимости использовать дополнительные библиотеки или
паттерны.
Синтаксис: Svelte использует упрощенный синтаксис для
объявления реактивных переменных и слушателей событий, делая код
легко читаемым.
Жизненный цикл компонентов: Svelte предоставляет простые
и понятные методы жизненного цикла для управления поведением
компонентов.
Нет внешних зависимостей: Svelte-приложения не требуют
подключения внешних библиотек или фреймворков в рантайме, что
делает их легковесными и быстрыми.
Интеграция с Sapper и SvelteKit: Эти фреймворки
предоставляют инструменты для создания полноценных вебприложений на Svelte, включая серверный рендеринг и
маршрутизацию. 
Svelte быстро набирает популярность благодаря своему
новаторскому подходу к разработке, позволяя создавать
высокопроизводительные приложения с меньшим объемом кода и
усилий со стороны разработчика.
На сегодняшний день выпущено достаточно большое
количество приложений, написанных на JS-фреймворках, и этот
сегмент стремительно развивается. Следует отметить также, что JSбиблиотеки, также значительно упрощают процесс написания
отдельных функциональных модулей.
Библиотека является многоразовой частью кода, которая
предлагает определенные функции. Это набор функций, объектов и
классов, которые вы можете использовать в своем приложении.
Библиотека абстрагирует различные слои, так что вам не нужно
беспокоиться об их деталях реализации.
Заключение
Веб-разработка в современном мире стала чуть ли не главной
средой для развития программного обеспечения. Она активно
развивается, в неё входит всё больше средств и технологий. В этой
работе были проанализированы технологии, которые используются
для построения клиентских и серверных частей веб-приложений.
В рамках работы решены следующие задачи:
1. Раскрыто понятие “веб-разработка”.
2. Проведён анализ фреймворков и языков программирования
используемых на стороне клиента и на стороне сервера.
3. Изучены виды задач, наиболее часто решаемые при
использовании каждого из фреймворков.
4. Выведены критерии выбора средств разработки вебприложений.
В эпоху быстро меняющихся технологий выбор подходящего
фреймворка для разработки веб-приложений становится одним из
ключевых решений, влияющих на успех проекта. Мы рассмотрели ряд
современных фреймворков, каждый из которых предлагает свой
уникальный подход и инструментарий.
Однако важно понимать, что нет "единственно правильного"
фреймворка для всех ситуаций. Выбор должен базироваться на
конкретных требованиях проекта, опыте команды и долгосрочной
стратегии развития. В то время как одни фреймворки могут предлагать высокую производительность и оптимизацию, другие
выделяются гибкостью и легкостью использования.
Также необходимо учитывать активность сообщества,
качество документации и будущее развитие выбранного фреймворка.
В заключение хотелось бы сказать, что разработка вебприложений продолжает эволюционировать, и с каждым годом
появляются новые инструменты и подходы. В этом контексте важно
оставаться в курсе актуальных тенденций, экспериментировать и
адаптироваться к изменяющимся условиям. В конечном итоге,
правильный выбор инструментов и технологий ляжет в основу
успешного и современного веб-приложения [6]. 
