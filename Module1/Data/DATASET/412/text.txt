За последние несколько лет произошло увеличение сложности веб-сайтов и веб-приложений, что
привело к огромному развитию всевозможных интерфейсных инструментов. Между тем, мы попрежнему ограничены HTML-кодом, CSS и JS , которые могут быть интерпретированы веб-браузером.
В настоящее время загрузить один или два плагина и добавить их в код недостаточно, чтобы быть уверенным, что все будет работать гладко. Чем больше проект, тем быстрее мы теряемся во всех этих
строках кода, которые разрабатываем.
В то же время мы хотим, чтобы наш код был простым, модульным, простым в реализации и безболезненным для дальнейшей разработки в будущем. Вот почему мы решили использовать определенный набор инструментов, которые призваны упростить и ускорить работу. Этот набор включает
Gulp.
Основанная на платформе Node.js , Gulp.js представляет собой систему, предназначенную для
автоматизации работы.
Его основная задача — автоматизировать многие действия, которые в противном случае программисту приходится выполнять вручную. Gulp оборачивает и интегрирует проект на основе ранее
определенных задач и файлов кода, разделенных даже на очень маленькие части.
Несколько задач, за которые отвечает Gulp в наших проектах:
 запускает сервер разработчиков для предварительного просмотра проекта;
 обновляет окно нашего веб-браузера каждый раз, когда мы вносим изменения в редактор (на
каждом устройстве, на котором в данный момент отображается страница);
 упрощает использование таких инструментов, как Sass, Swig или Browserify;
 минимизирует и объединяет в один стиль файлы и скрипты.
Еще одним преимуществом является тот факт, что все задачи мы пишем на JavaScript. Вместе с
Node.js мы получаем npm — менеджер пакетов узлов, который установит все нужные нам пакеты. У
нас есть доступ к Gulp через консоль и для его установки набираем команду: npm install gulp -g.
Gulp.js очень прост и основан на четырех функциях. Наши данные считываются им, а затем передаются через установленные плагины и сохраняются в выбранном нами месте.
Основные функции:
 gulp.task — используется для определения наших задач и для параметров, которые он принимает: имя задачи, массив с именами задач, которые будут выполняться, и функция, которая имеет код;
массив необязателен, но если он используется в качестве аргумента, его реализация предшествует
выполнению функции;
 gulp.src — показывает, с какими файлами мы будем работать, и позволяет изменять их с помощью плагинов и использования функции .pipe ();
 gulp.dest — указывает на место, где мы хотим сохранить наши измененные файлы;
 gulp.watch — работает как прослушиватель изменений в наших файлах и автоматически запускает определенные задачи; в качестве параметров принимает: наблюдаемый путь к файлам, массив задач и, опционально, функцию, которая будет выполняться после внесения изменений.
Чтобы подытожить и представить возможности Gulp, напишем простую задачу, которая добавит к
нашим правилам CSS подходящие префиксы. Мы будем использовать gulp-autoprefixer, который мы
устанавливаем через уже известную нам команду: npm install gulp-autoprefixer --save-dev.
После выполнения команды gulp наши выходные файлы будут сохранены в папке сборки. Кроме
того, Gulp будет отслеживать изменения в файле main.css, и каждое обнаруженное изменение будет
выполняться.
Конечно, вы можете найти и другие таскраннеры, например, webpack, brunch, broccoli и самый
большой — Grunt . В чем разница между Gulp и Grunt?
Во-первых, большая разница заключается в способе определения задач. Задачи для Grunt задаются конфигурацией объекта, который передается в функцию grunt.initConfig . В отличие от написания функций, аналогичных Node.js, это может быть немного сложнее (но это также во многом вопрос личных предпочтений). Gruntfile (эквивалент файла gulp) может стать очень длинным и трудным для чтения.
Еще одно отличие, о котором стоит упомянуть, это скорость выполнения задач. Gulp в этом случае работает лучше, потому что все операции выполняются в памяти, а окончательные файлы сохраняются только один раз. Однако Grunt использует временные файлы, что увеличивает количество сохраняемых и читаемых файлов с диска. Это не имеет большого значения, когда речь идет о небольших
проектах — разница во времени колеблется в несколько сотен миллисекунд.
При выборе инструмента очень важна среда разработки и разработка плагинов. У Grunt гораздо
больше плагинов, потому что он старше Gulp (5236 плагинов на официальном сайте Grunt и 1879 плагинов на сайте Gulp). Если количество плагинов для вас является важным фактором, следует иметь в
виду, что в Gulp есть плагин, который позволяет использовать их из Grunt, и наоборот. Google Trends
показывает статистику интереса к конкретным инструментам. На момент написания статьи Gulp немного превосходил Grunt.
Подводя итог, выбор между этими инструментами зависит от ваших собственных предпочтений.
Если вы уже использовали некоторые из них, и это работает для вас, я думаю, нет большей причины
убедить вас изменить это. Однако, если такой выбор у вас еще впереди, я рекомендую Gulp — главным образом потому, что это простой и быстрый инструмент для настройки задач и экономит время,
которое вы можете потратить на написание правильного кода. 