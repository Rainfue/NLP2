Целью исследовательской работы явилась реализация программного 
продукта, демонстрирующего технологии блокчейна в качестве хранилища 
данных для некоторой компании. В данной работе описана и реализована 
технология защиты данных – blockchain. На основе этой технологии 
спроектирована, разработана и реализована система по взаимодействию 
нескольких пользователей. Реализовано программное приложение с помощью 
пакета прикладных программ и языка программирования C# и СУБД MS SQL 
Server.
Объект исследования – методы кодирования и защиты информации. 
Предметом исследования является применение технологии блокчейн с 
авторизацией на основе ассиметричного шифра. 
Метод исследования - самостоятельная реализации обозначенной 
технологии на языке C#. 
Приложение построено таким образом, что для его масштабирования построены все соответствующие условия в плане архитектуры и достаточно 
популярного языка разработки.
Самой распространенной СУБД на сегодняшний день является MySQL 
[1]. Однако в качестве СУБД решено использовать аналогичную MS SQL 
Server. В сравнении с MySQL система лучше оптимизирована и показывает 
большую производительность, используя меньше ресурсов. Кроме 
производительности MS SQL Server отличается поддержкой еще большего 
количества механизмов хранения данных. Не содержит закрытых модулей или 
компонентов, наподобие тех, что содержатся в MySQL Enterprise Edition. 
Однако, это не влияет на доступный функционал. Все технологии, 
существующие в закрытой версии MySQL 5.5 Enterprise Edition, в полном 
объеме представлены в MS SQL Server.
В качестве основного языка программирования для обучающего 
комплекса выбран C#, поскольку он удобен и прост в разработке, имеет 
возможность подключения библиотек для расширения функционала и 
взаимодействия со всем остальными технологиями, использованными при 
разработке программы. Язык программирования C# является флагманом 
разработки от Microsoft, кроме того доступность, безопасность, 
универсальность, эргономичность, инновационность этого языка отличают от 
конкурентов.
Созданное программное приложение состоит из трех отдельных 
проектов, представленных на рис. 1: проект для связи с базой данных; проект 
для реализации программной логики; проект для визуального интерфейса.
Такая структура удобна тем, что каждый проект ответственен за свое 
функциональное назначение. База данных MS SQL Server и интерфейс 
Windows Forms могут быть легко заменены на другие технологии. К примеру, 
база данных может быть использована MySQL, а приложение может быть 
консольным – все проекты остаются на своем месте, и их связанность, 
функциональность и удобство в использовании никоим образом не 
пострадает.
В проекте для связи с базой данных необходимо использовать следующие 
объекты: интерфейс поставщика драйвера выбранной глобальной базы 
данных; класс-агрегат для связи с глобальной базой данных; класс 
пользователя базы данных (проекция соответствующей таблицы); класс блока 
базы данных (проекция соответствующей таблицы); вспомогательный класс 
для отображения и использования загруженных поставщиков; класс текущей 
сессии – используется, когда пользователь успешно авторизован в базе 
данных.
В представленной работе вся смысловая нагрузка нацелена на 
использование блокчейна – необходимо не только реализовать базовую 
логику, но и заложить фундамент для дальнейшего продвижения и 
оптимизации, а именно: предоставить классам-объектам интерфейсы, с 
помощью которых они смогут «мягко» интегрироваться в систему. В данном 
решении передаваемыми данными являются сообщения, однако возможно 
реализовать другой класс, для передачи, к примеру, документов – и все, что 
необходимо будет сделать, так это заменить класс данных в блоке. 
Функциональность, простота и масштабируемость – превалирующие черты в 
решении, и они особенно ярко видны в данном проекте.
Блокчейн представляет собой последовательность непрерывно связанных 
блоков, при этом каждый блок представляет собой транзакцию: направлен от 
одного пользователя к другому с внутренними данными. Исходя из данной 
информации – следует организовать и предоставить доступ к данным 
описанным сущностям.
В разработанном приложении программной логики необходимо 
использовать следующие объекты: класс для агрегирования передаваемой 
хранимой информации; класс для блока, содержащего агрегированную 
информацию; класс общей цепочки блоков; интерфейс для объектов, от который возможно взять хеш; интерфейс для объектов, которые являются 
алгоритмами хеширования; класс-поставщик текущего алгоритма 
хеширования; класс, реализующий алгоритм хеширования.
Визуальный интерфейс представляет собой совокупность форм, 
призванных обеспечить и облегчить коммуникацию пользователя и 
приложения. Формы должны обладать минимализмом, но вместе с тем и 
необходимым функционалом. Таким образом, приложение использует 
блокчейн для хранения передаваемых данных, а также подключение к базе 
данных. Логичным будет установить формы, которые бы сообщались и
использовали данные технологии: форма авторизации; форма регистрации; 
главная форма.
Данное приложение использует минимум объектов, так как нацелено на 
демонстрацию используемых технологий. Безусловно, приведенные формы 
являются базовыми, и, также, как и другие приложения может быть 
масштабировано. К примеру, в дальнейшем возможно предоставить форму 
личного кабинета пользователя, что положительно скажется на 
функциональности и эргономичности всего приложения, не нагружая 
трудоемкостью составные компоненты решения.
Для имплементации программного кода в базу данных использована 
модель Entity Framework с подходом Code First. Суть данного подхода состоит 
в том, чтобы составить классы-таблицы, которые в дальнейшем будут являться 
проекцией настоящих таблиц баз данных. Соответственно, поля класса станут 
колонками таблицы. При этом для каждой такой колонки возможно будет 
задать сообщающийся (между программой и БД) тип данных, а также 
установить специальные атрибуты.
Блок данных должен предоставлять собой всю информацию, которая в 
дальнейшем будет использована в блокчейне. В программном приложении 
имеется класс пользователей, каждый из которых имеют логин и пароль, а 
также сведения средств на счете и открытый ключ, получаемый в процессе 
регистрации (ключ хранится в хешированном виде). Наряду с классом 
пользователей создан класс сессии.
Совокупность таблиц-классов агрегируется в классе, который 
устанавливает подключение к базе данных, и представляет собой 
посредничество между программной логикой и уровнем базы данных. 
В данном приложении создан интерфейс, который обозначает конкретные действия: регистрация пользователя; список всех пользователей; 
поиск пользователя; список всех блоков; поиск всех хеш-блоков; поиск блока
по его хешу; добавление блока; зачислить на счет пользователя средства.
Класс блока – является базовым и фундаментальным для всего 
приложения. Наряду с ним требуется создать класс вариативных данных. Эти 
два класса – блока и данных – должны иметь возможность хеширования. 
Соответственно, необходимо определение интерфейса хеширования, а также 
указать интерфейс использования алгоритма для хеширования.
Интерфейс хеширования реализует метод взятия хеша, а также объект 
содержит внутреннее поле хеша. Интерфейс хеширования рассчитывает 
строку хеша – как от произвольной строки, так и от объекта, который 
реализует интерфейс дешифруемого объекта. В приложении реализован класс, 
который высчитывает хеш.
В блоке блокчейна хранятся универсальные данные - все транзакции по 
блокчейну совершаются с передачей финансовых средств. Таким образом, 
блок данных позволяет считывать данные из строки, и преобразовать свои 
хранимые данные в строку. В базе данных – при добавлении блока в блок 
данных информация поступает как есть, при сохранении БД. Такая 
информация конвертируется в соответствующую строку. При прочтении 
блоков из базы данных строки данных из блоков конвертируются в 
соответствующее поля блока данных. И тогда реализуется класс, который 
содержит в себе внутренние передаваемые по транзакции данные (они 
неотъемлемо интегрированы в блок).
Транзакция, совершаемая в блокчейне достаточно проста, и содержит в 
себе следующие данные: отправитель; получатель; количество передаваемых 
средств; передаваемые данные (текст/файл/т.п.).
В приложении реализован основной класс проекта – цепочку данных, 
которая содержит в себе все методы, применяемые к блокчейну. 
В приложении присутствуют формы аутентификации, главная форма 
отображения и добавления блоков.
При запуске приложение выполняет следующие действия:
 создание SQL-базы данных (или ее чтение, если 
таковая уже существует);
 компиляция проекта с инструментами для работы с 
SQL-данными;
 компиляция проекта с программной логикой 
блокчейна;
 компиляция проекта с визуальным интерфейсом 
приложения.
При завершении данных действий приложение предлагает пользователю 
аутентифицироваться в системе (рис. 2).
В случае если пользователь отсутствует в системе, то ему следует 
зарегистрироваться для дальнейшего использования приложения (рис. 3).
При успешной авторизации пользователь видит главное окно программы 
(рис. 4).
Приложение поделено на три области:
1) общая цепочка блоков, которая показывает неразрывность всех 
созданных блоков и их неразрываемую связность (рис. 5);
2) мои отправления, в которой можно видеть все отправления, 
зарегистрированные от имени текущего авторизованного пользователя (рис. 4);
3) мои поступления, в которой можно видеть все отправления, 
полученные на идентификатор текущего авторизованного пользователя (рис. 6).
На данный момент полностью реализована отправка тестовых 
сообщений, которые в дальнейшем могут содержать в себе транзакции – при 
незначительной модификации компонента данных блока. Сообщения, в 
качестве хранимых данных, были выбраны, чтобы показать наглядно принцип 
использования технологии и ее алгоритм в максимально наглядной и 
визуализированной демонстрации.
В программном приложении разработана отправка только текстовых 
сообщений, однако таковые данные могут быть заменены на другой формат, в 
зависимости от спецификации системы: на финансовые операции (банковские 
системы); на байт-код (аппаратные устройства); документы, изображения, 
ссылки (веб-сервис).

