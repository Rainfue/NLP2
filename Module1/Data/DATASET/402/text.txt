Весь доступ к нашей базе данных происходит при помощи PDO (PHP Data Objects). PHP
Data Objects — это расширение PHP, предоставляющее разработчику универсальный интерфейс для
доступа к различным базам данных. PDO не использует абстрактные слои для подключения к базе
данных, а использует собственные «родные» драйверы для разных баз данных, что обеспечивает
высокую производительность. В настоящее время существуют драйвера для PDO практически для
всех известных СУБД и интерфейсов. С PDO вы также можете работать с несколькими базами данных одновременно. Чтобы работать с PDO в PHP, нам сначала нужно подключить его к нашей базе
данных:
Далее объект будет переведен в $db, благодаря чему мы сможем работать с нашей базой
данных.
PDO позволяет нам работать с данными: просматривать таблицы, изменять их значения,
удалять, вставлять данные. Для этого мы будем использовать HTML, CSS и различные фреймворки, такие как Jquery и Ajax. jQuery — это библиотека JavaScript, содержащая готовые функции
языка JavaScript, все операции jQuery выполняются кодом JavaScript.
Чтобы сделать добавление в базу данных, нужно воспользоваться командой insert. Данная
команда работает следующим образом: скрипт принимает введённые данные с формы, после чего
с помощью функции идет передача данных в саму БД. Пример добавления данных, а именно добавление новой должности листинги 2, 3.
Для запросов к базе данных использовались функции языка JavaScript и AJAX-запросы.
Демонстрация работы отображена в листингах 5, 6. Функция принимает должность, по которой
нужно вывести информацию, после происходит AJAX-запрос требуемому PHP-скрипту, который
уже выводит информацию.
Листинг 5. AJAX-запрос на поиск данных.
$(function () {
 $(«form»).submit(function (event) {
 event.preventDefault();
 let data = new FormData();
 data.append('search', $(«input[type='text']»).val());
 $.ajax({
 data: data,
 type: 'POST',
 url: 'Search.php',
 contentType: false,
 processData: false,
 beforeSend: function () {
 $(«#btn»).prop(«disabled», true);
 },
 success: function (data) {
 if (!data) {
 $(«.show»).html('Данной вакансии нет');
 }
 else {
 $(«.show»).html(data);
 }
 },
 complete: function () {
 $(«#btn»).prop(«disabled», false);
 },
 });
 });
});
Конец листинга 5.
Листинг 6. PHP-скрипт для вывода информации.
$db = mysqli_connect('localhost', 'root', '', 'exchange');
Таким образом, в данной статье рассмотрено построение физической модели базы данных,
спроектирована структура сайта, реализовано и протестировано web-приложение.