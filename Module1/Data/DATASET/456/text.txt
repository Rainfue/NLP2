В настоящее время общество ощущает высокую потребность в изучении истории России. Важнейшие события, такие как формирование государства, престолонаследие, переломные битвы и т.д.,
являются одними из ключевых аспектов понимания отечественной истории и состояния нашей страны.
Поэтому было решено изучить web-сайты и платформы для публикации исторического материала. При
оценке web-сайтов учитывались следующие критерии: наличие интуитивно понятного интерфейса,
наличие инструментов для форматирования текстовых статей с помощью встроенного редактора или
других средств, а также возможность экспорта созданных статей в документы различных форматов,
таких как PDF или DOC. Изучив все доступные сайты и не найдя ничего подходящего, было принято
решение о разработке собственной платформы для распространения исторических материалов. На
ней пользователи могли бы создавать свои собственные исторические статьи, форматировать их с ис-
20 СОВРЕМЕННЫЕ ДОСТИЖЕНИЯ МОЛОДЫХ ИССЛЕДОВАТЕЛЕЙ
II международный научно-исследовательский конкурс | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
пользованием HTML-разметки, а также структурировать события в виде цепочек. Основная цель разработки - создать систему, которая поможет в изучении отечественной истории и будет не только интересна для пользователей, но и удобна в использовании.
Для разработки интерфейса использовался React – это декларативная, эффективная и гибкая
JavaScript библиотека для создания пользовательских интерфейсов. Она позволяет собирать сложный
пользовательский интерфейс из маленьких компонентов [1, с. 50]. Компонент – это фрагмент интерфейса, который содержит разметку и при необходимости, связанную с ней логику. Также была использована библиотека Redux, которая представляет источник состояния, изначально настроенный в определенной форме, на основе которого создается пользовательский интерфейс приложения [2, с. 24].
При возникновении изменений, действия направляются в источник состояния, где редукторы обновляют его, изменяя данные. Этот процесс приводит к изменениям в интерфейсе, так как он зависит от обновленного источника, и компоненты, настроенные на получение этих данных, перерисовываются в
соответствии с новым состоянием. Таким образом, связь между интерфейсом и источником данных
реализована через Redux, что делает приложение реактивным и способным мгновенно реагировать на
изменения [3]. Web-приложение было разбито на отдельные компоненты. На рисунке 1, представлен
код компонента CardPreview – маленькая превьюшка поста. Аналогично были сделаны другие компоненты: Header (верхняя панель), Modal (модальное окно), SignIn (форма входа), SignUp (форма регистрации). Приложение было разработано с учетом ключевой особенности — возможности проектирования веток событий, где пользователь может включать ссылки на другие статьи или факты в основной
текст. Это дает читателю возможность переходить на страницы с дополнительной информацией, создавая более увлекательный контекст чтения. Важным аспектом является возможность связывания
различных событий между собой из разных лекций. Они могут быть настолько зависимыми, и независимыми друг от друга, что обращаются за привязкой к первому ключу. Для решения таких связей было
принято решение использовать нереляционную базу данных. Внутри текста пользователи могут добавлять ссылки на другие статьи, указывая их уникальные идентификаторы (ID), которые доступны в
настройках при создании статьи. Это позволяет сохранить связь между статьями во время создания
контента. Если пользователь удалит статью, это приведет к каскадному удалению связанных статей,
обеспечивая целостность данных. После была реализована функция загрузки добавленных статей из
базы данных на сайт и их отображение и возможность форматирования статей с использованием
HTML-тегов. Чтобы создать пост авторизованный пользователь вводит название поста, ссылку на
изображение и текст статьи (рис.2). На рисунке 3 показан пример отображения отдельной статьи. 
ных задач. В слое сервисов хранится вся бизнес-логика приложения, все бизнес-правила.
Для взаимодействия с базой данных была использован модель TypeORM, который предоставляет удобный API для работы с базами данных: чтение данных, добавление, редактирование, удаление;
редактирование схемы базы данных (создание новых таблиц, изменение существующих) и многое другое. Основная концепция TypeORM – это Entity. Entity – это сущность из предметной области (рис. 4).
Рис. 4. Пример сущности статьи
Для документирования API был использован Swagger – это набор инструментов, который помогает описывать API. Благодаря ему, пользователи и машины лучше понимают возможности REST API
без доступа к коду. Для развертывания web-приложения были использованы бесплатные сервисы.
Серверная часть была загружена на хостинг Heroku, клиентская часть – на хостинг Vercel.
В будущем будет реализовано мобильное приложение, которое будет использовать все возможности платформы для обеспечения удобства чтения и написания постов. Из перспектив приложения
можно назвать добавление возможности редактирования постов, добавление счетчика реакций пользователя на посты.
С