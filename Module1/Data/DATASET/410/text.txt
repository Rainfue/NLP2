Для успешного управления сервисом, написанным на платформе Node.js,
зачастую важно понимать и быстро находить «узкие», с точки производительности, места в исходном коде продукта, а также, следить за стабильностью приложения и вовремя реагировать на внештатные ситуации.
Как многим известно, Node.js это платформа асинхронного выполнения
кода [1]. Практически ни одно действие не обходится без взаимодействия с
Event Loop. Event Loop (Цикл событий) – это то, что позволяет Node.js выполнять неблокирующие операции ввода / вывода (несмотря на то, что JavaScript является однопоточным языком программирования) путем выгрузки
операций в ядро системы, когда это возможно. На рис. 1 представлена схема
взаимодействия внутренних компонент платформы Node.js. Чем меньше
время задержки Event Loop тем фактически быстрее работает программа.
Исходя из вышесказанного, одной из наиболее важных метрик для мониторинга будет Event Loop Lag (время задержки Event Loop).
Разумеется, существуют и другие (более общие) метрики процессов,
выполняющихся под контролем операционной системы. В данной статье мы
рассмотрим процесс сбора и мониторинга следующих метрик:
1. Uptime – время жизни Node.js процесса;
2. CPU Usage, user – время, в течение которого процессор занят выполнением кода в пользовательском пространстве;
3. CPU Usage, system – время, затрачиваемое процессором на функции операционной системы, связанные с Node.js процессом;
4. Memory Usage, rss – часть занимаемой процессом памяти, которая
хранится в основной памяти (ОЗУ);
5. Memory Usage, heap total – общий размер сегмента памяти, предназначенного для хранения ссылочных типов, таких как объекты, строки и замыкания;
6. Memory Usage, heap used – размер занятой памяти. Более подробно,
области памяти процесса показаны на рис. 2;
7. Memory Usage, external – использование памяти объектов C++, привязанных к объектам JavaScript, управляемым V8.Для анализа собираемых данных чаще всего используются специальные
системы мониторинга. Одной из таких систем является Zabbix. [3] Он предназначен для мониторинга и отслеживания состояния различных сетевых
сервисов, серверов и другого сетевого оборудования. Данные будут отправляться при помощи специальной утилиты – nodejs-zabbix-sender. Рассмотрим процесс отправки данных (рис. 4). Мы будем отправлять актуальные
данные процесса каждую минуту.
Для того чтобы Zabbix сервер начал принимать данные от нашего приложения, в интерфейсе мы должны создать хост, и заполнить свойства для
хранения наших метрик. Для каждой из метрик мы можем сконфигурировать время хранения значения, тренда и единицы измерения метрики.
В случае если данные метрик памяти приходят в Байтах, а мы хотим
отображать их на графиках в Мегабайтах, можно выполнять обработку входящих данных согласно правилам.
Такая информация, как время жизни процесса, позволит Zabbix серверу
понять когда процесс был перезапущен (например в случае критического
сбоя) и сообщить об этом администратору системы.
На обнаружение проблем, характерных для системы, могут быть настроены разные обработчики (триггеры). При срабатывании триггера создается «проблема» и информация о ней незамедлительно становится доступной в Zabbix. Для каждого триггера, возможно указать специальное условие, при котором проблема считается более не актуальной. Именно это позволяет с высокой точностью детектировать момент решения проблемы, и
избегать ложных срабатываний.метрик об операционной системе в целом. Включая использование памяти,
процессора, и время задержки операций ввода-вывода.
Для удобства просмотра общего состояния существуют специальные
отчеты, в которых указываются время и длительность проблемы, см. рис. 5.
А так же, список ресурсов которые затронуты и находятся в режиме ограниченного функционирования.
В системах и проектах, где количество Node.js приложений может достигать нескольких десятков, а то и сотен штук, просто необходима централизованная система сбора метрик и мониторинга в целом. Она позволяет
незамедлительно обнаруживать проблемы в программном обеспечение, и
решать вопросы масштабирования и доступности сервисов.
