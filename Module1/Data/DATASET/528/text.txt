Постановка проблемы. На сегодняшний день при разработке любого
веб-приложения возникает вопрос о хранении определенных данных. С помощью программной платформы Node.js можно решить эту проблему, используя различные базы данных [1]. Они позволяют сохранять данные даже
после перезагрузки сервера, а также удалять, обновлять и добавлять их.
Именно поэтому использование баз данных является актуальным решением при разработке веб-приложений.
Анализ последних исследований и публикаций. Так как сейчас разработать веб-приложение нельзя без использования базы данных, то данной
проблеме посвящается огромное количество публикаций и исследований.
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ № 1 (39) 2023
15
В исследованиях А.А. Еремеевского [2] рассматриваются проблемы хранения и обработки структур данных, а также проводится описание особенностей и недостатков средств разработки приложений.
Цель статьи – изучить возможности интеграции фреймворка Express
js с базой данных MySQL и рассмотреть запросы на добавление, удаление,
обновление и получение данных.
Изложение основного материала. Для успешной работы с проектом
необходимо сначала создать папку и зайти в нее с помощью команды: mkdir
pos_db && cd pos_db. Затем нужно инициализировать новый проект
Node.js: npm init -y [3].
База данных – это упорядоченный набор структурированной информации или данных, которые обычно хранятся в электронном виде в компьютерной системе. Базы данных бывают реляционными и не реляционными.
Node.js позволяет работать с обоими видами баз данных.
Для начала нужно установить модуль для работы с базой данных с
помощью команды [4], [5]: npm install --save mysql2 express cors.
Далее необходимо создать файл с соединением с базой данных
MySQL (листинг 1):
Листинг 1.
Создание файл и соединение с базой данных
import mysql from "mysql2";
const db = mysql.createConnection({
 host: '127.0.0.1',
 port: '3306',
 user: 'root',
 password: '',
 database: 'pos_bd'
});
db.connect( function (err) {
 if (err) {
 console.log("!!! Cannot connect !!! Error:"); throw err;
 } else {
 console.log("Connection established.");
 }
});
export default db;
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
№ 1 (39) 2023 В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ
16
Приведенный выше код подключится к нашей базе данных MySQL с
помощью метода MySQL createConnection. Метод createConnection принимает host, port, user, password и имя базы данных в качестве обязательных
параметров.
Для работы с установленными библиотеками нужно заставить работать зависимости. Чтобы это сделать, нужно в главном файле проекта app.js
импортируем следующее и настроить приложение для прослушивания
порта 3000 (листинг 2):
Листинг 2.
Настройка приложения для прослушивания порта
import mysql from "mysql2";
import express from "express";
import cors from "cors";
const app = express();
app.use(express.json());
app.use(cors());
app.listen(3000, () => console.log('Server running at http://localhost:3000'));
Чтобы работать в Express js с MySQL предварительно необходимо создать базу данных с помощью команд в MySQL Server (листинг 3):
Листинг 3.
Создание базы данных
CREATE DATABASE pos_db;
CREATE TABLE product(
product_id INT(11) PRIMARY KEY AUTO_INCREMENT,
product_name VARCHAR(200),
product_price DOUBLE
)ENGINE=INNODB;
В MySQL Server можно войти, введя имя пользователя и пароль (если
необходимо) (рис. 1).
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ № 1 (39) 2023
17
Рис.1. Открытие оболочки
С помощью данной базы данных у пользователя появится возможность удалить данные с сайта, обновить их или добавить [6]. Реализовано
это с помощью функции query, внутри которой написан SQL запрос (листинг 4).
Листинг 4.
Удаление данных с сайта, обновление и добавление
export const getProducts = (result) => {
 db.query("SELECT * FROM product", (err, results) => {
 if(err) {
 console.log(err);
 result(err, null);
 } else {
 result(null, results);
 }
 });
}
export const getProductById = (id, result) => {
 db.query("SELECT * FROM product WHERE product_id = ?", [id], (err, results) => {
 if(err) {
 console.log(err);
 result(err, null);
 } else {
 result(null, results[0]);
 }
 });
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
№ 1 (39) 2023 В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ
18
}
export const insertProduct = (data, result) => {
 db.query("INSERT INTO product SET ?", [data], (err, results) => {
 if(err) {
 console.log(err);
 result(err, null);
 } else {
 result(null, results);
 }
 });
}
export const updateProductById = (data, id, result) => {
 db.query("UPDATE product SET product_name = ?, product_price = ?
WHERE product_id = ?", [data.product_name, data.product_price, id], (err, results) => {
 if(err) {
 console.log(err);
 result(err, null);
 } else {
 result(null, results);
 }
 });
}
export const deleteProductById = (id, result) => {
 db.query("DELETE FROM product WHERE product_id = ?", [id], (err, results) => {
 if(err) {
 console.log(err);
 result(err, null);
 } else {
 result(null, results);
 }
 });
}
В результате на сайте будет список товаров, который создал пользователь, и который он может в любой момент времени поменять. Все изменения сразу будут сохраняться в базе данных и их можно будет посмотреть
в MySQL Server. Выглядеть это будет следующим образом (рис. 2, 3):
ИНФОРМАЦИОННО-КОМПЬЮТЕРНЫЕ ТЕХНОЛОГИИ
В ЭКОНОМИКЕ, ОБРАЗОВАНИИ И СОЦИАЛЬНОЙ СФЕРЕ № 1 (39) 2023
19
Рис.2. Отображение данных на сайте
Рис.3. Просмотр данных в MySQL Server
Выводы. Таким образом, можно сказать, что в результате проведенной работы понятно, что при проектировании полноценных веб-приложений нельзя обойтись без базы данных. С их помощью можно хранить все
данные долго и без их потерь после перезагрузки сервера. Платформа
Node.js и фреймворк Express позволяют взаимодействовать с большинством существующих баз данных. 