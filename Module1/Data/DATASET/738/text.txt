В этой статье мы рассмотрим, что представляют собой эти два популярных фреймворка,
некоторые варианты использования, и посмотрим, насколько они похожи и чем они
отличаются.
Я считаю, что многие разработчики веб-интерфейсов слышали о фреймворке JavaScript с
открытым исходным кодом, разработанном для Facebook под названием React. Он имеет
интеграцию с Instagram (деятельность организации Meta Platforms Inc, ее продуктов Instagram и
Facebook запрещена в Российской Федерации), Facebook (деятельность организации Meta
Platforms Inc, ее продуктов Instagram и Facebook запрещена в Российской Федерации), а также
поддерживает большинство веб-сайтов. Это также JS-фреймворк, используемый новым
редактором Gutenberg-WordPress.
React немного изменился в мире JavaScript, когда он появился, потому что он сильно
отличался от других фреймворков того времени, таких как jQuery, Backbone.js и других. Самая
большая разница в том, что React популяризировал виртуальный DOM (мы обсудим это позже)
и создал новый синтаксис под названием JSX, который позволяет разработчикам писать HTML
на JavaScript.
Vue.js - это аналогичный инструмент для веб-разработки: это фреймворк JavaScript,
предназначенный для решения тех же проблем, что и React, но по-другому. Vue.js использует
-64- Тенденции развития науки и образования
систему шаблонов вместо JSX, что, вероятно, упрощает интеграцию с существующими вебприложениями. Потому что шаблоны используют обычный HTML. Vue.js можно довольно
легко интегрировать в существующий код без необходимости установки и использования
какого-либо дополнительного ПО.
Про Vue.js также говорят, что у него более удобная система обучения и наличие
огромной базы различных курсов и практических разработок, которые могут быть очень
полезны новичкам. Еще одна важная вещь касательно Vue.js, о которой следует упомянуть, —
заключается в том, что ее развитие и реализации не поддерживаются крупной корпорацией,
такой как например Facebook, что делает React для многих более предпочтительным (так как
многие веб-сервисы часто используют интеграцию соц/сетей на своих площадках).
React и Vue.JS имеют много общего, поскольку оба являются фреймворками интерфейса
JavaScript, которые сосредоточены исключительно на создании богатого пользовательского
интерфейса. В отличие от предыдущих фреймворков JavaScript, которые включали гораздо
меньший функционал, как React, так и Vue.JS обладают и такими функциями, как
маршрутизация и государственное администрирование, которые поддерживаются отдельными
модулями. Это также важное дополнение для различных государственных корпораций.
Одно из самых больших сходств между Vue.JS и React — это использование так
называемого "виртуального дома". Виртуальный DOM представляет собой шаблон
пользовательского интерфейса. Он основан на концепции того, что частое обновление
интерфейса веб-сервиса является вычислительно сложным, поэтому создается виртуальная
альтернативная версия, позволяющая более грамотно распределять ресурсы и выгружать
необходимые графические элементы динамически – при обращении к ним пользователя.
Подобная практика в JavaScript и его фреймворках реализована относительно просто.
Для виртуального DOM создается объект JavaScript, который представляет фактическое
дерево DOM. Обновление любого элемента происходит в виртуальном DOM, а не в реальном
DOM. Когда что-то меняется пользователем, создается новый виртуальный объект DOM и
определяются изменения между старым и новым. Эти изменения затем применяются к
реальному дому.
Для примера создадим лист ul:
<ul class="list">
 <li>item 1</li>
 <li>item 2</li>
</ul>.
В JavaScript он будет распознан следующим образом:
{
 type: 'ul',
 props: {'class': 'list'},
 children: [
 { type: 'li', props: {}, children: ['item 1'] },
 { type: 'li', props: {}, children: ['item 2'] }
 ]
}
Фактические реализации виртуального DOM более сложны, но по сути они являются
вложенными объектами JavaScript, с вложенными, в свою очередь, массивами.
Когда вы добавляете новый элемент в этот объект JavaScript, функция "удаляет"
изменения и использует новый тег в реальном DOM. Этот "алгоритм дифференциации"
является секретным соусом, но React, как и Vue.JS реализует это немного по-другому.
В React все дочерние элементы обновляются при изменении статуса программы. Это
может быть реализовано командой: shouldComponentUpdate lifecycle. Что касается Vue.JS, то
фреймворк поддерживает этот тип оптимизации по умолчанию.
И React, и Vue.JS поощряет чистую архитектуру компонентов. На самом деле это
означает разделение программы на отдельные части связанных действий определенным
Тенденции развития науки и образования -65-
образом, чтобы каждая часть "общалась" друг с другом. При использовании Vue.JS, вы также
можете получить доступ к частям одного файла, которые соответствуют этому подходу.
Подводя итоги, хочется отметить, что каждый из фреймворков имеет свои плюсы и
минусы. Vue.JS имеет более богатый набор инструментов и возможностей, но слабую
интеграцию с крупными сервисами. React интуитивно сложнее и требует больше практических
навыков, но популярнее и востребованнее в сфере интеграций и взаимодействия с другими
игроками рынка. Далее, все зависит от предпочтения разработчиков и их индивидуальной
траектории разработки.