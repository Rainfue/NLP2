JS-framework’и — это инструменты для
построения динамических веб/мобильных/настольных приложений на языке
Javascript. Как и к любым другим инструментам, разработчики прибегают к
использованию js-фреймворков там, где невозможно/очень сложно/очень долго
выполнять задачу обычными средствами. В подавляющем большинстве случаев
фреймворки используются для написания так называемых Single Page
Applications.
С их помощью можно разрабатывать как полноценные сайты, так и
функциональные модули (различные онлайн-инструменты). Конечно,
полноценные фреймворки лучше подходят для первой задачи, а для второй
рекомендуется использовать более легковесные фреймворки или библиотеки.
Фреймворки предоставляют четкую структуру приложения и
реализуются с использованием так называемых «паттернов проектирования».
Наиболее широко рапространены следующие паттерны: MVC (Model-ViewController), MVP (Model-View-Presenter) и MVVM (Model-View-ViewModel).
Преимущества построения приложения на JS-фреймворке:
- можно легко реализовать SPA (Single Page Application);
- использование js-фреймворка обязывает иметь структуру
приложения («скажем решительное «нет» спагетти-коду!»);
- кода становится заметно меньше и он чище, что позитивно
отражается на скорости разработки, поддержке и устранении ошибок в коде
приложения;
- наличие структуры подразумевает модульность приложения, а это
дает возможность проще работать над приложением нескольким разработчикам
одновременно;
- и последнее преимущество больше вытекает из использования
самого javascript, но при использовании фреймворка значительно усиливается:
возможность быстро создать мобильное и/или настольное кроссплатформенное
приложение из веб-версии с помощиюсистем типа PhoneGap или Apache Cordova.
жение из веб-версии с помощиюсистем типа PhoneGap или Apache Cordova.
Цель статьи – демонстрация эффективности использования
современных технологий создания web-сайтов.
Изложение материалов исследования. Для достижения поставленной
цели было решено выбрать и проверить стек технологий на примере реального
сайта-портфолио с таким функционалом: просмотр видео, обратная связь,
возможность оставлять комментарии и смотреть примеры уже созданных сайтов.
В мире разработки одной из главных проблем является сложность
поддержки продукта. Кодовая база в проектах постоянно растёт. Иногда для того,
чтобы изменить функционал кода, его нужно поменять в нескольких местах, так
как в современных web-приложениях необходимо делать сложные интерфейсы,
где на экране одновременно присутствуют более одного потока действий. Подход
ООП, или более общий «разделяй на компоненты и властвуй», в жизни работает только на банальных сайтах. Компоненты, попав в сложный контекст, начинают
зависеть не только от своего состояния, но и от других, выходящих за границы
локальной модели, факторов: истории взаимодействия, окружающей обстановки,
контекстной рекламы, настроения пользователя и т.п.
При разработке сайта-портфолио задачей было избегать или решать
данные проблемы, чтобы постараться по максимуму показать преимущества и
обойти возможные недостатки выбранных фреймворков.
Для первоначальной постановки цели исследования было необходимо
определить используемый стек технологий. Проведён отбор среди набирающих
популярность библиотек фреймворков:
- AngularJS;
- Ember.js;
- Backbone;
- Spine.js;
- KnockoutJS;
- Batman.js;
- Babylon.JS;
- Three.js;
- PlayCanvas.js;
- Relay + GraphQL.
Изучив описания каждого из них, было принято решение использовать
Relay + GraphQL (спецификация вышла 11 августа 2015 года [1]), React (Facebook
представил его как открытое ПО в марте 2015 года), Babylon.js (размещён на
GitHub 23 июня 2013, набрал популярность в октябре 2015 года [6]) потому, что
данный подход является новым в мире Web-разработки, а также в силу
нарастающей популярности данных технологий как в клиентско-серверной части,
так и в 3d моделировании (Babylon.js).
Остальные фреймворки также подходят для эффективной разработки, но
данным технологиям уже более 3х лет, их уже нельзя считать современными,
поэтому такое изучение не соответствует цели исследования.
Поэтому в браузерной части были использованы библиотека для
построения пользовательских интерфейсов React[2] и JS-фреймворк Relay [3]),
для управления передачей данных в React приложения. Для демонстрации 3D
возможностей использован фреймворк Babylon.js[5].
На сервере установлены NodeJS, NoSQL, GraphQL. Relay работает только
в связке с GraphQL[4], клиент под который есть только на NodeJS (разработал
Райан Дал (англ. Ryan Dahl) в 2009 году после двух лет экспериментирования над
созданием серверных веб-компонентов). В качестве базы данных выбран NoSQL.
Несмотря на отсутствие собственного опыта работы с ней, судя по отзывам
других разработчиков, она хорошо подходит для наших целей.
Секция № 7
Медиаиндустрия и дизайн
482
В проекте применён такой подход, как изоморфный JS, что позволяет
использовать один и тот же код и на стороне клиента, и на стороне сервера, что
существенно сокращает время его написания.
Выводы. В процессе создания Web-сайта были решены проблемы
необходимости одновременного изменения кода в нескольких местах, но
обнаружен ряд других проблем, таких как высокий порог вхождения в данные
технологии, отсутствие полноценной оригинальной документации и какого-либо
перевода на русский язык, что в принципе, вполне ожидаемо для технологий,
выведенных на рынок менее 3х лет назад.
В дальнейших планах развития сайта-портфолио – собрать полноценный
проект для мобильных телефонов, используя PhoneGap или его аналоги.
