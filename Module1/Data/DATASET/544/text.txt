Инструмент для создания веб-сайтов React можно рассматривать как библиотеку для создания
пользовательских интерфейсов, созданную компанией Facebook. Помимо разработки сайтов, он также
используется для создания: приложений для работы под управлением iOS и Android, canvasприложений, TV-приложений и обычных приложений для настольных машин [1, с. 16]. Программы,
написанные с помощью React, состоят из отдельных компонентов. Идея React-компонента заключается
в следующем: есть объект, описывающий состояние компонента и, если он меняется, React перерисовывает только ту область, где меняется состояние. Получается, что компоненты в React должны быть
такими, чтобы их можно было легко понять и интегрировать с другими компонентами [2, с. 24]. Библиотека React постоянно развивается, так что в версии 16.8 возникло такое нововведение как hooks.
Появление React hooks обусловлено переходом от парадигмы классов к функциональным элементам, так как с функциями проще взаимодействовать, чем с классами, и функции потребляют меньше ресурсов за счёт отсутствия наследования. Для миграции на функции было необходимо соблюсти
динамику, то есть взаимодействовать c состоянием. State или состояние – это объект, который позволяет отслеживать данные компонента. Дело в том, что состояние любого компонента может постоянно
меняться. Например, это происходит при получении новых сообщений с сервера, ответа от пользователя или данных от сети. В state хранится текущее состояние компонента в виде объекта с ключами и
значениями. Под текущим состоянием могут подразумеваться или какие-либо данные (например, массив значений, который отображается в компоненте), или само состояние (если блок находится в свёрнутом состоянии, то может храниться состояние false или true, где false-это свёрнутый блок, а trueразвёрнутый блок). Именно для взаимодействия с состоянием и были созданы hooks. Получается, что
hooks – это функции, с помощью которых можно работать с состоянием и методами жизненного цикла
React из функциональных компонентов. Помимо всего вышеперечисленного, в качестве их преимуществ можно также выделить то, что они позволяют:
Аннотация: В данной статье приводится обзор возможностей такого нововведения в библиотеке React
как hooks. Здесь описаны основополагающие понятия React-разработки и преимущества написания
приложений с использованием hooks. Также рассмотрены такие hooks как useEffect, useState, useContext, пользовательские хуки и так далее.
Ключевые слова: React, hooks, программирование, веб-разработка, useState, useEffect.
OVERVIEW OF REACT HOOKS FEATURES
Maksimova Tatyana Andreevna,
Solovyova Ekaterina Vasilyevna
Abstract: This article provides an overview of the features of such an innovation in the React library as hooks.
This section describes the basic concepts of React development and the benefits of writing applications using
hooks. Hooks such as useEffect, useState, useContext, custom hooks, and so on are also considered.
Key words: React, hooks, programming, web development, useState, useEffect.
10 ЦИФРОВЫЕ ТЕХНОЛОГИИ В НАУКЕ, БИЗНЕСЕ, ОБРАЗОВАНИИ
II международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
1. Написать более маленькое количество кодов
2. Создать более гибкий и масштабируемый код
3. Поместить логику компонента в повторно используемые функции [3]. Следовательно, это
облегчает переиспользование компонентов.
4. Добавить логику эффектов (useEffect).
React содержит такие встроенные hooks как: useState, useEffect, useContext, useDebugValue, useCallback, useLayoutEffect, useRef, useImperativeHandle, useMemo, useReducer и пользовательские хуки.
Рассмотрим некоторые из них.
Если говорить о hook состояния, то он задаётся следующим образом:
const [state, setState] = useState(initialState),
где state – переменная, хранящая возвращаемое состояние,
setState – функция,
useState – hooks,
initialState – аргумент функции setState, начальное состояние.
Следует отметить, что в этом примере используется синтаксис деструктуризации массивов.
Рис. 1. Hook useEffect
Hook useEffect (рис. 1) вызывается каждый раз, когда происходит рендер компонента. Также
можно запустить эффект только после изменения определённых значений. UseEffect Hook позволяет
выполнять side эффекты в функциональных компонентах [4]. UseContext позволяет писать в них чистые функции с контекстом. Контекст в React - это способ для дочернего компонента получить доступ к
значению в родительском компоненте. С useContext Hook использование context стало проще, чем когда-либо. Функция useContext() принимает объект сontext, который изначально возвращается из
React.createContext(), а затем возвращает текущее значение контекста. UseReducer дает ссылку на
Redux-подобный редьюсер. UseReducer обычно предпочтительнее useState, когда есть сложная логика
состояний, включающая несколько подзначений, или когда следующее состояние зависит от предыдущего. UseRef позволяет писать чистые функции, которые возвращают изменяемый объект ref. Refs
предоставляет способ доступа к React элементам , созданным в методе render(). UseMemo
используется для возврата сохраненного значения. UseMemo пересчитает запомнившееся значение
только тогда, когда одна из зависимостей изменилась. Эта оптимизация помогает избежать дорогостоящих вычислений на каждом рендере. UseCallback Hook используется для возврата мемоизованного
коллбека. UseCallback может предотвратить ненужную визуализацию между родительским и дочерним
компонентами. UseImperativeMethods кастомизирует значение экземпляра, которое передается родительским компонентам при использовании ref. UseMutationEffects аналогичен useEffect Hook в том
смысле, что он позволяет выполнять DOM-мутации. UseLayoutEffect используется для чтения макета
из DOM и синхронного ре-рендеринга. Пользовательские hooks позволяют писать компонентную логику
в функции многократного использования.
Таким образом, библиотека React помогает создавать интерфейсы, компоненты которых могут
постоянно меняться, а hooks – очень полезный инструмент, позволяющий упростить и оптимизировать
разработку приложений. 