Выбирая фреймворк для создания пользовательских интерфейсов, стоит рассмотреть
основные их виды, оценить все возможные положение и отрицательные стороны. Изначально
можно оценить уровень интереса других разработчиков к фреймворкам. Согласно опросам на
«The State of JavaScript», результаты представлены на рисунке 1, лидирующие позиции
занимает «Svelte», «Vue.js» и «React» [1, c. 70]. Большинство специалистов считает, что
освоить «Vue» намного легче чем другие популярные JS-фреймворки. Документация – еще
одна сильная сторона «Vue» – так считают более 60% опрошенных разработчиков [2, c. 132].
Аналогичное число респондентов (56%) отмечает производительность данного решения как
одну из его самых сильных сторон. Разберемся подробнее, что же такое Vue.js?
Касаемо популярности данных фреймворков в России складывается ситуация
представленная на рисунке 2, согласно статистике из «Google Trends» (код доступа:
https://clck.ru/YF8BE). Следовательно, основными конкурентами при выборе фреймворка для
разработки остаются «React» и «Vue.js».
Основываясь на статистике выше, можно отметить, что большинство разработчиков
отдают предпочтение «React.js», однако это не фреймворк, а библиотека с широким
функционалом, где инструмент можно использовать без дополнительной интеграции.
В свою очередь «Vue.js» – это именно JS-фреймворк. Если сравнивать «React» и «Vue.js»
по производительности, то «Vue.js» отличается более высокой производительностью и
стабильностью, в силу использования виртуальной DOM.
Одним из основных критериев сравнения выступает размерность. Относительно этого
показателя «React» (около 100КБ) уступает «Vue.js» (около 80КБ). Хотя следует отметить, что
для «React» необходимо использование сторонних библиотек, а «Vue.js» же – проект с
обширным набором стандартных возможностей.
Говоря о гибкости, можно отметить, что ядро «React» дает только основной функционал,
что позволяет разработчику выбрать дополнительный инструмент самостоятельно, «Vue.js»
же дает большой набор стандартных инструментов, которые позволяют решать задачи, где при
использовании «React» необходимо было бы подключение дополнительных библиотек.
«Vue.js» является исключительным инструментом для любого разработчика, так как все
его функции находятся в свободном доступе. Для удобства использования разработчики могут
просто назвать функцию так, как они хотят. Каждая деталь может иметь дискретную функцию,
что значительно упрощает модификацию веб-приложения в соответствии с конкретными
требованиями [3, c. 210].
«Vue.js» – гибкая технология, которую можно использовать при разработке приложений
без использования многочисленных ресурсов. «Vue.js» имеет гибкий дизайн, который
подчеркивает состав компонентов и декларативный рендеринг.
Архитектурный стиль фреймворка определяется моделью MVVM (МодельПредставление-Модель представления). Прогрессивные характеристики, необходимые в
многогранных приложениях: управление состоянием, маршрутизация - представлены через
пакеты и библиотеки, где «Nuxt.js» стал наиболее популярным решением.
Основными концепциями «Vue.js» являются, компоненты, конструкторы, директивы и
переходы. Изначально необходимо создать новый экземпляр «Vue.js», где указываются
элемент для рендеринга, данные, вычисляемые свойства и методы [4, c. 49].
При разработке следует придерживаться идеи разбиения сложных вещей на части
(компоненты) и связывать их наиболее удобным образом. Таким образом, компоненты
помогают расширить основные html элементы и повторно использовать часть UI. Во время
СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
IV Международная научно-практическая конференция
72
проектирования, приложение разбивается на независимые части, которые в дальнейшем
формируют древовидную структуру компонентов.
Применение директив даёт возможность дополнительных функциональности htmlэлементам. С помощью префиксов «v-» можно добавлять обработчики событий, управлять
отображением элементов и передавать данные. Так, появляется возможность использовать
условия и циклы следующих видов, представленных на рисунке 3.
Так же при обновлении объектов DOM и их добавлении или удалении «Vue.js» даёт
возможность сопровождать этот процесс анимацией.
В связи со стремительным ростом популярности «Vue.js», появляются эффективные для
создания интерфейсов библиотеки, как, например, «BootstrapVue», «Vuetify», «Vue Material»
и «Vux», статистика Google Trends» по запросам которых представлена на рисунке 3. Самой
популярной является «Vuetify», так как она нацелена на создание чистых, семантических
компонентов с использованием принципов «Google Material Design». В состав входит более 80
компонентов, которые построены на простых и чётких именах свойств для более простого
запоминания.
Вторым по популярности стал «Bootstrap Vue», так как «Bootstrap» стал популярным
фреймворком HTML / CSS для создания мобильных адаптивных сайтов. Однако для своих
основных функций он, как правило, использует «jQuery», а также обширный список
компонентов, таких как оповещения и модальные элементы. Поэтому использование
«Bootstrap» с «Vue.js», даёт возможность удалить необходимость в «jQuery» (код доступа:
https://2019.stateofjs.com/front-end-frameworks). Обладая более чем 85 компонентами, более
чем 45 доступными плагинами, несколькими директивами и более 1200 значками,
«BootstrapVue» предоставляет одну из наиболее полных реализаций компонентов «Bootstrap
v4» и системы сетки.
ля сравнения их преимуществ рассмотрим создание одинаковых компонентов «Card» с
применением «Bootstrap Vue» и «Vuetify» соответственно. Использование «Bootstrap Vue»
представлено на рисунке 5. Пример использования «Vuetify» представлен на рисунке 6.
