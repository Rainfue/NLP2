Облачные информационные системы (ИС) являются передовой технологией в 
современном мире. Основное их предназначение заключается в создании виртуальной 
облачной инфраструктуры, состоящей из распределенных ресурсов, обеспечивающих 
удаленное предоставление услуги доступа к системе с требуемым уровнем обслуживания 
клиентов [1].
При разработке и проектировании облачной ИС разработчики зачастую сталкиваются с 
такими проблемами, как защита информации, зависимость элементов системы друг от друга, 
интеграция системы, неверное проектирование интерфейса и т.д. Для решения данных 
проблем при разработке ИС разработчикам необходимо правильно выбрать язык 
программирования и шаблон проектирования.
PHP – серверный скриптовый язык программирования общего назначения с исходным 
кодом. Его особенностями являются простота и общеизвестность, платформонезависимость, 
свободная типизация, интерпретируемость языка, гибкость и наличие множества 
фреймворков. Код PHP чаще всего интерпретируется, обрабатывается и отображается с 
помощью веб-сервера с установленным модулем PHP, что позволяет встраивать в HTMLразметку код, который находится в файлах с расширением .php.
Для PHP существует множество архитектурных паттернов. Наиболее перспективным 
на сегодняшний день является шаблон проектирования Model-View-Controller (MVC) – набор 
архитектурных идей и принципов для построения сложных систем с пользовательским 
интерфейсом. Основная цель применения данного паттерна заключается в отделении бизнеслогики от пользовательского интерфейса. При использовании шаблона проектирования MVC 
система делится на три части: модель, представление и контроллер [2]. Подробнее 
рассмотрим каждую из них.
Модель (Model) – отвечает за хранение и выдачу данных, описывающих заданную 
предметную область. Также она позволяет модифицировать данные по правилам, 
предусмотренным в заданной предметной области.
Представление (View) – отвечает за визуализацию данных (пользовательский 
интерфейс). Представление содержит все функциональные возможности, с которыми 
взаимодействует пользователь (нажатие кнопки или событие ввода).
Контроллер (Controller) – отвечает за соединение модели и представления. Он получает 
входные данные из представления, использует логику для преобразования входных данных в 
запрос для модели, затем модель захватывает данные и контроллер передает их из модели 
обратно в представление для отображения в пользовательском интерфейсе.
В качестве преимуществ архитектурного паттерна MVC стоит отметить единую 
концепцию системы, позволяющую легко ориентироваться в программных блоках, 
облегченный механизм отладки ИС, концентрирующий визуализацию данных в одном 
программном блоке, а также механизм наследования от родительских классов, позволяющий 
избегать повторного использования кода.
Недостатки архитектурного паттерна MVC: увеличение количества используемых 
ресурсов, разделение программы на части и усложнение процесса добавления функционала.
Любая облачная ИС имеет множество аспектов, например, дизайн или бизнес-логику. 
Все они участвуют в непрерывном процессе улучшения, обновления, исправления ошибок и 
общей оптимизации системы.
В случае, если ИС неструктурирована, при внесении изменений данные аспекты 
начинают нарушать работу отдельных ее частей. Области, которые не предполагалось 
изменять, оказываются модифицированными, в то время как планировалось внести 
изменения лишь в небольшую часть кода.
Таким образом, использование паттерна PHP MVC позволяет решить данную 
проблему. Он определяет строгие контейнеры для всего кода и функций ИС. Вносимые в код 
базы данных изменения в итоге ограничиваются разделом модели, а разделы контроллера и 
представлений остаются защищенными, иными словами, критические изменения в систему 
не могут быть внесены.