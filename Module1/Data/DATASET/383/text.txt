Тестирование кода – неотъемлемый цикл разработки
программного обеспечения. Начинающие разработчики
зачастую недооценивают его роль и при разрастании JavaScriptприложений на тысячи строк сталкиваются с определенного
рода ошибками и дефектами из-за пренебрежения ранним
тестированием кода. На сегодняшний день существует
множество различных решений и фреймворков/инструментов
автоматизированного тестирования JavaScript кода. Наиболее
популярными из них являются: JSUnit, Mocha, Selenium,
Jasmine. Однако, для грамотного использования данных
инструментов разработчику потребуется переосмыслить подход
написания кода приложения [2], научиться писать "тестируемый
код". Тестирование должно быть неотъемлемым процессом
разработки и, в идеале, должно основываться и придерживаться
какой-нибудь методологии. Наиболее популярными и
используемыми методологиями на сегодняшний день являются
TDD и BDD [1].
Разработка через тестирование (или TDD, test-driven
development) – методика разработки и тестирования, при
«Высокие технологии и инновации в науке»
17
которой сначала реализуются тесты, которым должен
удовлетворять код и уже только потом, реализация данного
кода. Данный подход является итеративным [3]. Добавляя в код
что-то новое, разработчик должен сначала написать тест на
новый функционал и только потом реализовывать данный
функционал путем минимального количества кода. Добившись
успешного прохождения теста, далее следует процесс
рефакторинга (процесс изменения внутренней структуры
программы, не затрагивающий ее внешнего поведения и
имеющий цель облегчить понимание ее работы). Следуя данной
методологии, разработчик получает ряд следующих
преимуществ:
? Обеспечивает высокое покрытие кода тестами
? Создание теста до реализации класса заставляет
продумывать его дальнейшее использование, что, в целом,
положительно сказывается на общей архитектуре проекта
? Грамотно написанные тесты могут заменить
документацию по проекту, так как наглядно демонстрируют
использование тестируемого кода.
Несмотря на все достоинства TDD подхода к разработке,
бывают ситуации, в которых TDD может быть не эффективным.
Данный подход л?гок в применении только в тех случаях, когда
разработчик четко представляет, что именно ему нужно
реализовать. А это возможно либо при разработке небольших
классов, либо при достаточном предварительном
проектировании разрабатываемой подсистемы.
Разработка через поведение (или BDD, behavior-driven
development) - является ответвлением или расширением подхода
TDD к тестированию и разработке, при котором особое
внимание уделяется поведению разрабатываемого модуля, с
точки зрения бизнеса [3]. Как правило, такие тесты
иллюстрируют поведение тестируемого модуля/класса и влекут
за собой необходимость использования различных фреймворков
тестирования, обеспечивающих читаемость кода тестов не
только разработчикам, но и тестировщикам. То есть, если
Международная научная конференция
18
методология TDD используется для написания тестов
разработчиками для разработчиков, то тесты, написанные с
использованием методологии BDD, могут быть созданы
тестировщиками или техническими менеджерами. Данный
подход делает их использование возможным не только при
TDD-разработке, но и при написании компонентных тестов, а
также при формализации требований к продукту [2].
Компонентные тесты, использующие синтаксические
преимущества BDD, тестируют внешний интерфейс модуля, при
этом не акцентируя внимание на его внутреннюю реализацию.
Такого рода тесты могут быть написаны непосредственно после
согласования внешнего поведения модуля, тем самым
формализовав процесс финального тестирования. Наличие таких
тестов предоставляет возможность безболезненно менять
внутреннюю реализацию модуля. Что в свою очередь
показывает преимущество компонентных тестов в сравнении с
модульными (unit) тестами, покрывающими код отдельных
составляющих модуля. Изменение внутренней реализации и
архитектуры повлечет за собой изменение и unit-теста,
покрывающего данный модуль. Иначе говоря, компонентные
тесты очень полезны при рефакторингах модуля, когда
требования к его общему функционалу остаются прежними, а
его внутренняя архитектура подвергается переработке.
В заключение следует отметить важность поддержки
решения по выбору фреймворка для описания тестов.
Высокоуровневый язык JavaScript обретает все большую
популярность и значимость в текущую эру информационных
технологий. В данной работе упоминались три наиболее
популярных фреймворков тестирования написанного кода на
языке JavaScript: JSUnit, Mocha, Jasmine. Данные фреймворки
особенно интересны тем, что они играют значимую роль в
составе экосистемы node.js. Для выбора наиболее подходящего
фреймворка, разработчик должен определиться с используемой
методологией тестирования при разработке проекта, на
основании заранее сформированных технических требованиях
«Высокие технологии и инновации в науке»
19
[1]. В то время как на практике выбор фреймворка в
большинстве случаев основывается на его популярности,
обсуждаемости в профессиональном обществе, полноте
документации, частоте выпуска обновлений, архитектурных
предпочтениях и др