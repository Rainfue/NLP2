Задача данной работы состоит в анализе возможных вариантов основы для создания функционального текстового редактора
для React-приложения и разработка готового компонента редактора, к которому выдвигаются следующие требования:
• Рабочий базовый функционал: написание текстов, стандартные элементы оформления и форматирования (списки, фрагменты кода, цитаты).
• Полноценная обработка ссылок во время набора текста.
• Упоминания других пользователей системы.
• Работа с изображениями (вставка в текст).
• Простота использования, интеграции и поддержки.
При выборе основы для будущего компонента редактора были важны такие параметры, как: формат данных, возможности
по добавлению нового функционала и популярность среди разработчиков. В первую очередь именно популярность среди других
разработчиков, так как это показывает насколько редактор удобно
интегрировать, а также упрощает поиск информации по реализации функционала или исправлению каких-либо ошибок. В результате проведённого анализа популярных редакторов, было выделено несколько подходящих: Draft.JS [1], TiniMCE [2], CKEditor [3],
© Сычиков И. С., 2021
17
Slate [4]. Далее был проанализирован формат данных редактора,
так как перед сохранением текст должен обрабатываться для выделения нужных данных. В отобранных редакторах используется
два формата: html и json. Так как, за счёт сложности сериализации, html формат сложно обрабатывать, то он не удовлетворяет
требованиям, соответственно на выбор остались две основы для редакторов: Draft.JS и Slate. Принимая во внимание требование по
простоте интеграции, поддержки и использования, Slate редактор
подходит меньше всего из-за сложной структуры данных, в которой
присутствует многоуровневая вложенность. Соответственно выбор
был остановлен на редакторе Draft.JS, который сочетает в себе все
важные параметры основы для компонента редактора.
Далее были реализованы все предъявленные функции компонента редактора. Базовый функционал текстового редактора был
сделан с помощью функций, предоставляемых Draft.JS. Основная
сложность состояла в реализации таких дополнительных функций,
как обработка ссылок, упоминания пользователей и работа с изображениями.
Для реализации обработки ссылок можно использовать два подхода — обработка ссылок прямо во время ввода и обработка перед отправкой. Однако при обработке во время ввода существуют
некоторые нюансы, например, необходимость поддерживать и обновлять адреса ссылок в отдельной области структуры текста при
наборе и редактировании, а также, вставка пользователем сразу
нескольких ссылок, каждая из которых должна быть корректно
обработана. Поэтому было решено визуально выделять ссылки при
вводе, что было сделано с помощью предоставляемых редактором
средств. А получение адресов ссылок реализовано через дополнительную обработку текста перед сохранением.
Для реализации работы с изображениями потребовалось проработать загрузку изображения на сервер, а также реализовать блок
редактора для последующего вывода загруженного изображения.
Было добавлено несколько возможных способов вставки изображения, чтобы предоставить пользователям дополнительные удобства
в использовании редактора. Соответственно, для каждого такого
способа был добавлен и проработан обработчик.
Для реализации упоминаний пользователей потребовалось использовать целый комплекс различных обработчиков, которые позволили проверять текст по мере ввода, и при нахождении соответ18
ствующего символа (@) вызывать отрисовку окна со списком пользователей, доступных для упоминания. Выбор пользователя из показанного списка был реализован несколькими способами, чтобы
предоставить дополнительные удобства пользователям с разными
подходами к использованию редактора.
В результате проведённого анализа форматов данных была выбрана основа для построения текстового редактора и, с её помощью,
был реализован рабочий вариант компонента системы, который отвечает всем выдвинутым требованиям.