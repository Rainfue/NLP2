Создание и ведение веб-ресурсов до сих пор является занятием трудоемким, затратным и требует, как минимум, навыков веб-разработки. Развитие инструментальных
средств и технологий создания веб-сайтов происходит в следующих главных направлениях: повышение безопасности (в работе не рассматривается), уменьшение степени зависимости создателей Интернет-контента от разработчиков программного обеспечения, повышение эффективности работы программистов.
Создание сайтов на базе систем управления контентом (CMS) в большой степени
упрощает как разработку, так и администрирование ресурсов для компаний-заказчиков, благодаря множеству плагинов, шаблонов и прочих типовых решений. Однако
даже для ведения сайта, созданного на базе CMS, приходится держать в своем штате
специалиста, обладающего необходимыми навыками в веб-разработке или обращаться
к создателям ресурса. Чтобы редактировать не только контент, но и структуру страницы, в каждой развитой CMS существуют собственные или интегрированные визуальные редакторы [1] и конструктивные элементы веб-страниц.
Для CMS Wordpress таким редактором является, в частности, Gutenberg [2], который позволяет формировать страницу из имеющихся элементов (рис.1) и разрабатывать
пользовательские блоки с помощью встроенного Application Programming Interface (API).
Для работы в редакторе контента Gutenberg вводится термин “блок”. Блок – это функционально независимый компонент страницы, который может использоваться неограниченное количество раз. Каждый абзац, изображение, кнопка, заголовок, цитата, видео – все
это является отдельным блоком. Преимуществом визуального редактора контента
97
Gutenberg является чистый и валидный HTML-код встроенных блоков. Разработка собственных конструктивных элементов происходит с помощью JavaScript-библиотеки
ReactJS, особенности работы с которой хорошо знакомы большинству Frontend-разработчиков. Эта библиотека использует JSX – расширение языка JavaScript, которая позволяет
HTML-подобному коду сосуществовать с кодом JavaScript.
Приходится констатировать, что системный набор типовых конструктивов редактора Gutenberg не позволяют получать качественные проектные решения: универсальные блоки не подходят для формирования всего многообразия веб-страниц.
Поэтому актуальной является разработка наборов пользовательских блоков. 
Для страниц и сайтов различных типов [3] при формировании блоков следует
по-разному выполнять декомпозицию элементов страницы, определять их состав и
вложенность.
API визуального редактора контента с открытым исходным кодом Gutenberg [2]
было применено для разработки библиотеки многократно используемых конструктивных элементов одностраничного веб-сайта. В результате декомпозиции элементов
страниц сайтов данного типа были выделены следующие конструктивные элементы:
блоки дизайн-макета, разделенные по назначению и техническим характеристикам, —
главный экран, блок предоставляемых сервисов или уникального торгового предложения, блок отзыва и пр. — всего 26 блоков.
Элементы такой библиотеки должны обладать следующими возможностями:
- трансформироваться,
- изменять свое стилевое оформление,
- редактировать контент каждого блока,
- быть адаптивными,
- отображаться в редакторе внутри панели инструментов администратора. Набор
конструктивных элементов организован в виде отдельного плагина WordPress для использования на любых веб-сайтах под управлением этой CMS и CMS Drupal.
Библиотека представляет совокупность JavaScript и css-файлов. Единственный
PHP-файл проекта описывает логику подключения этих файлов.
Рассмотрим процесс формирования элемента библиотеки на примере блока статистики ProgressSection, дизайн-макет которого представлен на (рис. 2) 
Структура директория, содержащего блок со статистикой, представлена на
рис. 4. Родительский блок описан в файле ProgressSection.js. Код дочернего блока находится в файле ProgressBar.js, в папке childBlocks. Внешний вид блоков ProgressSection
и ProgressBar определен в стилевых SASS-файлах – style.scss и editor.scss. Для родительского блока ProgressSection были заданы
следующие атрибуты:
- id – уникальный идентификатор
блока, который генерируется по умолчанию
и может использоваться как селектор при
необходимости изменения DOM-дерева;
- title – текст заголовка;
- subTitle – текст подзаголовка;
- info – текстовое содержимое блока;
- bgColor – шестнадцатеричный код
цвета заливки блока;
- bgImageURL – ссылка на фоновое изображение блока.
Блок ProgressSection состоит из двух React-компонентов: компонент View, отвечающий за внешний вид блока в редакторе Gutenberg и на странице веб-сайта; компонент Controls, отвечающий за отображение настроек блока в колонке с параметрами в
редакторе Gutenberg. Внутри компонента Controls описана логика изменения фонового
изображения и цвета заливки. Для этого в компоненте Controls используются специРис. 4. Структура директория блока
статистики
99
альные компоненты, входящие в состав API редактора Gutenberg: компонент MediaUpload, отвечающий за загрузку медиа-файлов (в нашем случае изображений); компонент ColorPicker, предоставляющий возможность выбора цвета. Внешний вид
настроек блока ProgressSection отображается в редакторе, что также требует написания
соответствующего кода. Около 200 строк кода, написанных для реализации этого элемента веб-страницы, дают возможность управлять всеми его параметрами, обеспечивают полную управляемость при формировании различных страниц и сайтов.
Реализация собственных конструктивных элементов веб-сайта значительно облегчает администрирование веб-ресурсов, позволяет повысить качество и сократить
сроки разработки, применяя набор созданных компонентов с их структурой и логикой,
изменяя некоторые параметры и стилевое оформление.
Другим важным направлением повышения эффективности создания и ведения
сайтов и веб-приложений, написанных с помощью JavaScript-библиотек, является применение модульной архитектуры и средств разработки, которые позволяют реализовывать подобные системы с минимальными трудозатратами.
Создание второй части веб-приложения «Обучающая система по английскому
языку» и доработка ее первой части подтверждают правильность выбора технологии
MERN. Технология MERN, состоящая из MongoDB, Express, React, Node.js является
одним из самых популярных инструментов для создания веб-приложений. Технология
отражает современный подход к веб-разработке, в котором на каждом уровне приложения, от клиента до сервера, применяется один– JavaScript.
Особого внимания заслуживают СУБД MongoDB и наполняющее ее приложение
Postman. MongoDB – документо-ориентированная система управления базами данных
(рис. 5). Данные в MongoDB записываются не в таблицах и столбцах, как в реляционной базе данных; вместо этого в MongoDB хранятся JSON-подобные документы с динамическими схемами [6]. База данных MongoDB может как не иметь коллекций, так
и содержать множество коллекций. Коллекция очень похожа на традиционную таблицу
и состоит из нуля или более документов. Документ можно рассматривать как строку,
состоящую из одного или более полей, которые подобны колонкам. Индексы в MongoDB практически идентичны таковым в реляционных базах данных. Когда запрашиваются какие-либо данные в MongoDB, то возвращается позиция записи, которую
можно подсчитывать, пропускать определенное число предшествующих записей, не
загружая при этом данные [7].
Веб-приложение должно хранить информацию о зарегистрированных пользователях, а также о добавленных УРОКАХ и ВОПРОСАХ К НИМ. Хранение данных организовано при помощи специального модуля Mongoose, который предоставляет удобный интерфейс для работы с базой данных MongoDB. На схеме (рис. 5) изображена
структура документов веб-приложения:
• Документ, хранящий информацию о пользователе, имеет структуру, представленную в схеме USER. Документ состоит из имени пользователя username, пароля password, электронного адреса почты – email. Почти все поля хранят информацию строкового типа, кроме поля _id. Поле _id создается автоматически при записи объекта в базу
данных и инициализируется уникальным значением.
• Структура для уроков веб-приложения представлена в схеме ТESTS. Структура
состоит из полей: названия УРОКА title, краткого описания урока description, создателя
урока _creator. Поле date хранит дату создания урока. Поле questions инициализируется
идентификатором необходимого вопроса.
100
• Документ, который хранит вопросы веб-ресурса, имеет структуру, представленную в схеме QUESTION. Урок имеет несколько видов вопросов, для каждого из
которых есть свои поля: для текстового вопроса – поле isText, для открытого вопроса
(ответ на который нужно вводить с клавиатуры) – isOpenQuestion. В поле question хранится формулировка вопроса. В поле rightAnswers хранится правильный ответ. Поле
answers, хранит массив объектов, id это уникальное значение, по которому определятся
правильный ответ. Поле Answer хранит вопрос, и в поле mistake текст подсказки к
этому ответу.