React – это JavaScript библиотека для построения пользовательских
интерфейсов. React разрабатывается и поддерживается Facebook, Instagram, а
также сообществом отдельных разработчиков и корпораций. React
используется для разработки одностраничных и мобильных приложений. Его
цель — предоставить высокую скорость, простоту и масштабируемость. В
качестве библиотеки для разработки пользовательских интерфейсов React
часто используется с другими библиотеками, такими как Redux.
React предоставляет пользователю язык шаблонов и некоторые
callback-функции для отрисовки HTML. Весь результат работы React — это
HTML.
Рисунок 1 – HTML код.
____«Актуальные научные исследования в современном мире» ISCIENCE.IN.UA__
Выпуск 10(66) ч. 1 ISSN 2524-0986
130
Связки HTML/JavaScript, называемые компонентами, занимаются тем,
что хранят свое внутреннее состояние в памяти (например: какая закладка
выбрана), но в итоге просто реализуется HTML.
Рисунок 2 – JS код
Преимущества и недостатки библиотеки React
В библиотеке React js имеется преимущества и недостатки, в данной
работе будут рассмотрены несколько из них.
Сейчас начнем описать преимущества этой библиотеки:
 посмотрев на исходный код, будет видно как компонент выстроится.
Это может быть важным преимуществом, хотя оно ничем не отличается от
В сегодняшних реалиях веб-разработка перешла на уровень использования всяческих фреймворков или библиотек таких как Angular или React. Зачастую разрабатываемые сайты предполагают
отображение интерактивной карты с всяческими данными: расположение магазина, путь как добраться,
и всяческая другая информация, которую можно поместить на карту. Для тех, кто выбрал работу с React наиболее удачным решением для отображения карт на веб сайте является использование библиотеки Leaflet.
Основной задачей в совместном использовании двух данных библиотек является подстройка
карт Leaflet в компонентную структуру React. Так в библиотеке React компонентом является класс или
функция, которая возвращает JSXElement, то есть компонент – это блок кода, который имеет визуальное представление, а также определенные функции для работы с данным визуальным представлением [1, c. 22]. Стандартным архитектурным решением будет размещение компонента карты в новом созданным пользователем компоненте, в который необходимо при помощи параметров передавать
настройки карты.
При осуществлении работы с библиотеками может возникнуть ряд проблем:
– модификация состояния карты;
– изменение положения карты без перезагрузки страницы;
– невозможность доступа к функциям изменения состояния карты, а также к иным расширяемым функциям.
Первое с его начинает разработчик при работе с картой это внедрение её на страницу. В React
это делается при помощи компонента <MapContainer /> в свойства которого можно задать значение
центра карты, приближения карты [2]. Далее внутри данного компонента используются другие компоненты такие как <TileLayer /> которые позволяют разместить источник данных для карт прямой ссылкой
204 АКТУАЛЬНЫЕ НАУЧНЫЕ ИССЛЕДОВАНИЯ
VI международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
на них. Данные ссылки можно получить на сайтах провайдеров карт. Настройки карты и использование
компонентов представлено на рисунке 1.
Рис. 1. Базовая настройка карты Leaflet в React
После данных настроек и размещения компонентов на веб странице результатом является карта,
которая работает в интерактивном режиме и поддерживает работу с мышью в том числе приближение
если это было разрешено на стадии настройки.
Описание проблемы изменения состояния карты. Первое, что придет в голову разработчику который работал с React это использование хука useState(), данный хук позволяет менять состояние компонентов на странице [1, c. 48], когда значения в состоянии компонента поменяются вызывается механизм перерисовки данного компонента с новыми значениями, так можно изменить поставщика карт,
положение точек на карте, но к сожалению на этом разработчики библиотеки пока ограничились, изменение приближения карты не доступны данным способом так же как и изменение центральной точки.
Первое решение проблемы невозможности изменения состояния карты. Данное решение построено на полной перезагрузке карты вместе со страницей, для этого используется подход, не связанный с состоянием компонента, а передачи параметров через запрос в строке браузера, в данном запросе можно передать новые данные и при обработке данного запроса перезагрузить сайт и перерисовать карту с данными полученными из данного запроса. Не смотря на то что этот вариант решает задачу по изменению состояния карты это полностью портит концепцию одностраничного приложения,
преимуществом которого является работа без перезагрузок.
Для решения данных проблем издателями библиотеки был внедрен их собственный хук useMap()
который позволяет получить объект карты и использовать все функции которые позволяют изменять
состояние карты в очень гибком формате [2]. Однако его использование нетривиально, данный хук работает только тогда, когда он будет находиться внутри компонента <MapContainer />. Но так как разметка с компонентами это JSXElement то есть всего лишь визуальное представление то полноценную
логику внутри него написать нельзя. Следовательно, необходимо создать компонент, который будет
возвращать пустой блок <div/>, но содержащий логику работы с картой. А сам этот компонент поместить в компонент <MapContainer />. Данный компонент будет принимать изменяющиеся данные, при
такой реализации решение с использованием состояний объектов useState() будет полностью рабочим.
Компонент обработчик изображен на рисунке 2.
Для наиболее наглядного примера обновления состояния карты была использована библиотека
отображения GPX данных на карте для библиотеки Leaflet. Отобразить данные можно несколькими путями:
– отрисовка линии с помощью компонента <Polyline /> в котором необходимо указать массив
точек, то есть предварительно необходимо обработать GPX файл собственноручно и выделить оттуда
массив тех самых точек, а затем при помощи переменной передать их в данный компонент, одним из
минусов является сложность получения правильного уровня приближения карты для того чтобы влезли
все точки в независимости от их расположения, проще сказать при назначении этих точек не происходит корректировка карты для наиболее удобного просмотра трека;
– отрисовка линии при помощи библиотеки leaflet-gpx, в ней автоматически рассчитываются
значения необходимые для подгонки карты по размерам трека. Использование данной библиотеки
АКТУАЛЬНЫЕ НАУЧНЫЕ ИССЛЕДОВАНИЯ 205
VI International scientific conference | www.naukaip.ru
изображено на рисунке 2. Компонент обработчик принимает в себя ссылку на файл с точками, далее
размещает их на слой, который в последствии применяется к карте и присваивается в переменную для
того чтобы можно было удалить этот слой и отобразить новый трек. Результат работы отображен на
рисунке 3.
Рис. 2. Базовая реализация компонента обработчика карты
Рис. 2. Базовая реализация компонента обработчика карты