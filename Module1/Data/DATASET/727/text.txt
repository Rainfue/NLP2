блиотекой для frontend разработки по количеству загрузок из публичного
репозитория. React позволят быстро и эффективно программировать
интерактивные пользовательские интерфейсы. И хоть в React есть свой слой
состояния приложения, все же в больших приложениях его зачастую
используют именно как слой отображения, а для слоя состояния подключают
другую библиотеку – Redux [2, с. 112].
Такая связка React и Redux позволят разрабатывать и поддерживать
действительно большие и сложные интерфейсы. Но у нее есть одна
особенность, разработчику не навязывается какая-то определенная архитектура
и структура файлов приложения, он волен выбирать ее сам. В этом и кроется
проблема: зачастую неопытные разработчики не в состоянии продумать
архитектуру наперед, что ведет к большим временным и финансовым потерям в
ИННОВАЦИОННАЯ ПАРАДИГМА РАЗВИТИЯ
СОВРЕМЕННЫХ ЕСТЕСТВЕННЫХ И ТОЧНЫХ НАУК
36
МЦНП «Новая наука»
будущем, когда приложение начинает разрастаться и его становится тяжело
поддерживать.
Автором предлагается две архитектуры, позволяющие решить
большинство проблем еще на стадии проектирования приложения.
ОРГАНИЗАЦИЯ АРХИТЕКТУРЫ ПО ТЕХНИЧЕСКИМ АСПЕКТАМ
ПРИЛОЖЕНИЯ
Техническое разделение (Рис. 3) используется в маленьких приложениях.
По мнению автора, есть два требования для использования этого подхода:
- Приложение разрабатывается одним человеком или одной командой,
таким образом меньше риск получить конфликты в кодовой базе
- Приложение небольшое с точки зрения количества строчек кода
Рис. 3. Организация файлов и папок для архитектуры разделения по
техническим аспектам
Рассмотрим преимущества и недостатки данного подхода. Основное
преимущество заключается в том, что редукторы и действия находятся порознь
[3, 256 с.]. Этот факт подчеркивает понимание того, что Redux может
захватывать любое действие в любом редукторе. Редукторы и действия не
находятся в отношении 1:1.
Недостаток данного подхода следует из двух требований, представленных
выше. Он состоит в том, что такую архитектуру тяжело масштабировать.
Каждая «техническая» папка потенциально может разрастаться до
бесконечности. Проект может стать беспорядочным, в нем станет тяжело
ИННОВАЦИОННАЯ ПАРАДИГМА РАЗВИТИЯ
СОВРЕМЕННЫХ ЕСТЕСТВЕННЫХ И ТОЧНЫХ НАУК
37
МЦНП «Новая наука»
ориентироваться после добавления нескольких редукторов, действий и
селекторов.
ОРГАНИЗАЦИЯ АРХИТЕКТУРЫ ПО ФУНКЦИОНАЛЬНОСТИ
ПРИЛОЖЕНИЯ
Второй подход – разделение по функциональности приложения (Рис. 4) –
больше подходит для больших приложений. Он обеспечивает гибкость в
группировке кода, так как большие функции всегда можно разбить на
маленькие и тем самым не захламлять папки большим количеством файлов.
Рис. 4. Организация файлов и папок для архитектуры разделения по
функциональности
Вместо того, чтобы оставить действия и редукторы доступными на
верхнем уровне иерархии, они помещаются в папку конкретной функции. В
быстрорастущем приложении с множеством команд разработки, остальные
команды не будут склонны к повторному использованию действий и
редукторов, написанных нашей командой, вместо этого они будут
реализовывать свои.
Еще одним недостатком данной архитектуры является то, что происходит
группировка действий и редукторов в отношении 1:1, что по сути идет вразрез с
философией, заложенной в Redux.
С другой стороны, большим преимуществом этого подхода является то,
что эта архитектура очень хорошо масштабируется. Команды могут спокойно
ИННОВАЦИОННАЯ ПАРАДИГМА РАЗВИТИЯ
СОВРЕМЕННЫХ ЕСТЕСТВЕННЫХ И ТОЧНЫХ НАУК
38
МЦНП «Новая наука»
работать над разными папками с функционалом и не сталкиваться с
конфликтами в кодовой базе.
В заключение, автор хочет отметить, что представленные подходы помогут
как новичкам, так и опытным программистам и даже целым командам. Новичкам
они помогут научиться проектировать хорошее программное обеспечения с
самого начала, что поможет в будущем избежать проблем и потери времени на
перепроектировании неудачного решения. Опытным же специалистам полезно
будет принять во внимание рассмотренные архитектуры, возможно удастся
почерпнуть некоторые идеи и внедрить их в собственный код