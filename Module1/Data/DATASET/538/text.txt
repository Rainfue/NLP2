В мире веб-разработки, HTML, также известный как HyperText Markup
Language, является фундаментальным строительным блоком. Этот важный язык
разметки обеспечивает структурирование и оформление веб-страниц, что позволяет им успешно отображаться на множестве разнообразных устройств и браузерах.
Однако, HTML представляет собой гораздо больше, чем просто набор тегов и атрибутов. Он является мощным инструментом, который дает возможность

© Луцко Д. П., Новикова Т. П., Кравченко А. А., 2023
91
веб-разработчикам создавать разнообразные стили и макеты для своих веб-проектов. Именно здесь на сцену выходит CSS, или Cascading Style Sheets, который
служит для определения визуального вида веб-страницы.
CSS позволяет вам контролировать цвета, шрифты, размеры текста, отступы, рамки и фоны элементов на странице. Это помогает создавать эстетически приятный и профессиональный дизайн, делая веб-сайты более привлекательными и удобными для пользователей. Таким образом, CSS дополняет HTML,
обеспечивая ему способность превращать сырые данные в красочные и функциональные веб-сайты, и является неотъемлемой частью веб-разработки.
Различие HTML и CSS
Для того чтобы выявить различия между CSS и HTML, необходимо разобраться в сущности каждого из них. CSS, или "Каскадные таблицы стилей", является технологией, предназначенной для управления дизайном веб-страниц. Он
предоставляет обширные возможности для настройки внешнего вида страницы
и упрощает процесс форматирования элементов HTML путем выноса стилей в
отдельный CSS-файл. Это позволяет применять одни и те же стили к нескольким
элементам HTML на различных страницах сайта, что становится особенно полезным в случае большого количества страниц.
С другой стороны, HTML, или "Язык разметки гипертекста", является
стандартным языком для создания структуры веб-страниц. Он используется для
определения содержимого страницы, включая создание таблиц, форматирование
текста и создание гипертекстовых документов.
Без применения CSS HTML-страницы становятся громоздкими и запутанными, поскольку каждый элемент требуется форматировать отдельно, что приводит к увеличению объема кода. Например, если на странице есть три фрагмента текста, которые должны иметь одинаковое оформление (например, размер
и цвет), то без CSS необходимо прописывать стили для каждого фрагмента отдельно. С применением CSS можно создать один класс стиля и применить его ко
всем трём фрагментам текста в HTML, что сокращает объем кода и упрощает его
обслуживание. Изменение одного элемента в CSS позволяет изменить стиль на
всех страницах сайта, что становится особенно важным, когда количество страниц значительно.
Преимущества и недостатки HTML и CSS.
Рассмотрим преимущества и недостатки CSS, учитывая, что практически
каждый веб-сайт использует HTML в своей разработке. Этот язык разметки стал
92
фундаментом для многих веб-ресурсов, поэтому давайте подробнее рассмотрим
особенности CSS:
Преимущества:
Относительная простота использования: CSS достаточно легко освоить,
особенно по сравнению с более сложными языками программирования, например, JavaScript. Все стили собраны в одном файле и могут применяться ко всем
страницам веб-сайта или веб-приложения.
Эффективное сокращение размера сайта: CSS находится в отдельном
файле, который подключается к HTML-документу. Это позволяет уменьшить
размер HTML-страницы. Кроме того, CSS-файл кэшируется после первой загрузки сайта, что позволяет повторно использовать стили без дополнительных
запросов к серверу.
Множество возможностей для стилизации: С помощью CSS можно создавать разнообразные стили для текста и другого контента, такие как обтекание
текстом элементов или изменение стиля кнопок.
Избавление от таблицной структуры: Перед появлением CSS, веб-страницы часто создавались с использованием таблиц, что сильно замедляло их загрузку и приводило к громоздкому коду. С появлением CSS появилась возможность более гибкого позиционирования элементов с помощью контейнеров (div).
Постоянное обновление: CSS, как и HTML, постоянно развиваются, добавляя новый и полезный функционал, который упрощает работу и расширяет возможности этих языков.
Недостатки:
Несогласованное отображение в разных браузерах: Один из основных недостатков CSS заключается в том, что разные браузеры могут по-разному интерпретировать стили, что может привести к разночтениям в отображении вебсайта. В устаревших браузерах могут не поддерживаться некоторые современные функции CSS.
Примеры.
Перейдем к примерам. Создадим файл page.html со следующим содержимым:
<h1>Текст заголовка</h1>
<p>Это параграф текста</p>
93
<article>
<p>Первый параграф статьи</p>
<p>Второй параграф статьи</p>
</article>
Вся информация, находившаяся между угловыми скобками < и >, оставалась скрытой. Эти теги, такие как <h1> для заголовка, <p> для параграфа текста
и <article> для статьи, предоставили указания браузеру о том, каким образом следует разбивать текст на блоки. Браузер в свою очередь создал иерархическую
структуру данных, известную как Document Object Model или DOM, которая затем используется для отображения страницы и обеспечивает доступ к содержанию документа через JavaScript.
Браузер начинает с первого элемента в дереве DOM, который в данном
случае - тег h1. Он определяет местоположение этого блока на странице и вставляет в него текст "Текст заголовка". Затем переходит к следующему элементу -
тегу <p> и выполняет аналогичные действия. Процесс продолжается до тех пор,
пока не достигнут тег <article>. Однако с ним ситуация немного сложнее из-за
наличия дочерних элементов. Браузер определяет горизонтальные границы
блока article и затем переходит к отрисовке дочерних элементов, в данном случае
двух тегов <p>, начиная с верхнего и двигаясь вниз по блоку, одновременно вычисляя высоту блока article
Атрибуты тегов
У каждого HTML-тега имеется набор атрибутов, которые воздействуют на
его поведение. Эти атрибуты можно определить непосредственно в разметке
HTML-страницы или задать позднее с помощью JavaScript кода. Например, для ссылок существует атрибут href, который содержит URL-адрес данной ссылки,
как показано в примере:
htmlCopy code
<a href="https://devman.org/challenges/">Задачи</a>
Каждый HTML-тег также имеет свой уникальный набор специфических
атрибутов, которые подробно описаны в документации. В разметке HTML все
эти атрибуты записываются в одном и том же формате, который выглядит так:
htmlCopy code
<tag attr1name="attr1value" attr2name="attr2value" ...>
Помимо специфических атрибутов, таких как href для ссылок или value для
полей ввода, существует набор универсальных атрибутов, которые могут использоваться с любым тегом:
style: Этот атрибут определяет стиль оформления тега, включая отступы,
цвет, размер шрифта и другие характеристики.
id: Этот атрибут назначает уникальный идентификатор тегу. Например:
htmlCopy code
<article id="chapter1"> ... </article>
Идентификатор id не может использоваться повторно в документе, и, таким образом, может быть назначен только один раз. Атрибут id полезен для
быстрой навигации по DOM-дереву из JavaScript кода и может служить в качестве якоря на страницах.
class: Атрибут class присваивает тегу набор неуникальных идентификаторов. Он используется для применения стилей в CSS и обеспечивает удобство
навигации по DOM-дереву в JavaScript коде. Например:
htmlCopy code
<button class="btn btn-lg btn-primary btn-disabled">Сохранить</button>
data-*: Этот атрибут позволяет присваивать тегу данные в формате JSON
для последующей обработки с использованием JavaScript кода.
Что касается минимального шаблона HTML-документа, в HTML-разметке
обязательно должен присутствовать определенный набор служебных тегов. Их
наличие обязательно, так как без них браузер может некорректно отобразить
страницу, и верстку можно будет считать поврежденной. Вот минимальный
набор, который должен присутствовать в HTML-документе:
<!DOCTYPE html>
<html>
<!-- тег самого верхнего уровня, включается в себя весь
HTML документ -->
<head>
<!-- теги ниже не отображаются, но содержат много важных
настроек и мета-информации -->
<meta charset="utf-8"><!-- кодировка нижеследующей разметки -->
<title>Название страницы, отображается на вкладке браузера
и в закладках</title>
</head>
<body>
<!--Основное содержимое страницы-->
<p>здесь живут все видимые теги</p>
</body>
</html>
Стили
Для любого тега можно настроить стиль отображения в браузере: задать
отступы, цвет, размер шрифта и прочее. Сделать это можно с помощью атрибута
style. Все что указано в style переопределяет стандартные настройки браузера. К
слову, эти настройки не такие уж и стандартные, они немного отличаются у разных браузеров.
Рассмотрим пример. Для каждого тега на странице укажем border. На
вкладке «Result» виджета JSFiddle виден результат отрисовки.
<h1 style="border: 1px solid blue;">Текст заголовка</h1>
<p style="border: 1px solid green;">Это параграф текста</p>
<article style="border: 1px solid red;">
<p style="border: 1px solid green;">Первый параграф статьи</p>
<p style="border: 1px solid green;">Второй параграф статьи</p>
</article>
Другой пример. Выделим цитату на фоне остального текста.
<p>Первый параграф текста</p>
<blockquote style="font-style: italic; font-size: 140%;
margin-left: 20px; color: grey;">
Все мы ищем счастье, а приобретаем опыт.
</blockquote>
<p>Следующий параграф текста</p>
Стили позволяют сильно изменить внешний вид тегов. Также можно изменить алгоритм их отрисовки. Размещение блоков на странице сверху вниз в том
порядке, в каком теги встречаются в HTML разметке называется Normal layout
flow. С помощью свойств position, float и display можно переключить движок
браузера в другой режим. Для примера разместим блоки справа налево.
<div style="overflow: hidden; border: 1px solid grey;">
<div style="position: relative; float: right; padding:
50px; background-color: #44A;">А</div>
<div style="position: relative; float: right; padding:
50px; background-color: #4A4;">B</div>
<p>параграф в Normal Layout Flow</p>
</div>
Набор правил по которым браузер вычисляет размер блоков/тегов с учетом
padding, margin, border и прочих свойств называется CSS Box Model. С ним полезно ознакомиться.
Писать стили для HTML разметки не всегда просто. Если задача не имеет
очевидного решения, начать поиски стоит со Stack Overflow. На этом сайте собрано большое количество рецептов по верстке.
Самый полезный инструмент в арсенале верстальщика - это Chrome
DevTools. Он позволяет найти тег на странице, проверить его стили и дописать
новые, узнать размер блока, отредактировать его содержимое и все это в интерактивном режиме. Знакомство стоит начать с inspecting the DOM and styles.
98
Наконец, важно заметить, что атрибут style хорош для чернового прототипирования и экспериментов, удобен когда стилей мало и они не используются
повторно. В остальных случаях рекомендуется использовать механизм CSS. Он
лучше масштабируется, позволяет создавать и повторно использовать библиотеки стилей, упрощает JavaScript код.
CSS
Cascading Style Sheets, они же каскадные таблицы стилей, позволяют привязывать стили к целым группам тегов. Например, можно разом изменить цвет
всех ссылок на черный, использовать bold шрифт. Как это сделать:
<style>
a {
color: black;
font-weight: bold;
}
</style>
<a href="https://stackoverflow.com/">Stack Overflow</a>
....
<a href="#top">Вернуться назад</a>
CSS правила помещаются внутрь тега <style>, стили указываются внутри
фигурных скобок, символ ; служит разделителем. Подробное синтаксис описан здесь.
Браузеру нужно как-то сообщить к какому набору тегов применять стили.
Для этого используют селекторы - часть спецификации CSS, специальный язык
описывающий правила выборки тегов из DOM дерева. В примере выше селектором является название тега a и стили применяются ко всем тегам <a> на странице. В более сложных ситуациях используют классы:
<style>
.btn {
padding: 6px 12px;
font-size: 14px;
}
.btn-blue {
background-color: blue;
}
99
</style>
<button class="btn btn-blue">Синяя кнопка</a>
....
<button class="btn">Серая кнопка</a>
<button>Стандартная кнопка</a>
Как видно из примера выше тег “Синяя кнопка” получил стили сразу двух
селекторов btn и btn-blue. Классы и CSS правила можно смешивать в рамках одного тега, последовательность применения правил и приоритет описаны на странице Cascade and inheritance. Правила эти довольно запутанные, упрощенно их
можно сформулировать так:
Стили, описанные в атрибуте style считаются самыми приоритетными. Их
уже не переопределить.
Чем специфичней селектор - чем больше в нем указано сведений о теге -,
тем он приоритетнее.
В селекторе класс ценится выше названия тега. Селектор btn специфичнее
чем button.
Из двух одинаковых или одинаково специфичных селекторов побеждает
тот который находится ниже в HTML документе.
Самый низкий приоритет у стандартных стилей браузера.
Примеры селекторов с пояснениями есть в том же туториале MDN:
простые селекторы;
составные селекторы;
псевдоклассы.
Сайты, как правило, состоят из большого количества страниц. Чтобы не
дублировать содержимое тега < style > стили выносят в отдельный файл и затем
подключают его внутри <head> документа:
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link rel="stylesheet" href="/style.css">
</head>
<body>
...
100
</body>
</html>
Браузер самостоятельно подгрузит файл style.css с сервера.
Во внешние CSS файлы стараются вынести весь код пригодный для повторного использования. В теге <style> оставляют только стили специфичные
для данной страницы.
С появлением мобильных устройств жизнь верстальщиков стала сложнее.
Адаптация сайта под малый экран — занятие трудное. Места не хватает, кнопки
и ссылки и ссылки приходится делать большими из-за тачскрина. Можно создать
специальную версию сайта для смартфона, но это долго и дорого. В конечном
счете пришли к следующему:
Сайт сначала верстают под экран смартфона, а уже затем адаптируют под
большие экраны: растягивают элементы, добавляют отступы по краям страницы,
размещают баннеры. Этот подход получил название «Mobile First».
В спецификации CSS3 появились media-queries. Часть правил активируется только при заданной ширине экрана браузера.
Например, можно увеличить размер шрифта на больших экранах и сделать
его мельче для малых:
<style>
.article p {
font-size: 12px;
}
@media (min-width: 1200px) {
.article p {
font-size: 14px;
}}
@media (max-width: 768px) {
.article p {
font-size: 10px;}
}</style>
Еще одной давней проблемой является создание анимаций для HTML-разметки. Раньше это часто решалось с помощью JavaScript, но это приводило к низкой производительности, поскольку браузеру приходилось часто перерисовывать страницу. Однако с появлением CSS-анимации эта проблема ушла на второй
101
план. CSS-анимации оптимизированы с точки зрения производительности, почти
не требуют JavaScript и могут быть использованы "из коробки". Вы можете найти
примеры на сайте MDN.
С течением времени веб-разработка становится все более сложной и креативной. Возможности браузеров и компьютеров растут, и дизайнеры стремятся
придать своим работам новый, свежий вид. Даже создание простых одностраничных лендингов требует сейчас множества строк CSS-кода. Однако количество разработчиков, готовых писать такой код с нуля, становится все меньше.
Для упрощения работы были созданы фреймворки - библиотеки, предоставляющие готовые стилизованные элементы, которые хорошо сочетаются друг с другом. Один из таких популярных фреймворков - Bootstrap. С его помощью разработчик получает мощные инструменты для создания адаптивной верстки, богатый набор стандартных элементов и возможность создавать собственные темы.
Когда на одной стороне у вас 10 000 строк громоздкого CSS, а на другой -
Bootstrap с 400 строками кода, многие выбирают второй вариант.
Еще одной распространенной проблемой на сайтах является битая верстка,
которая может возникнуть из-за неправильного закрытия тегов или опечаток в
стилях. Ошибки не всегда сразу бросаются в глаза, и иногда они становятся видными только в других браузерах. Например, вы можете разрабатывать под
Chrome, но обнаружить, что в Firefox что-то идет не так из-за различий в движке.
Для решения этой проблемы были созданы автоматические валидаторы верстки,
такие как W3C HTML Validator. Вам просто нужно указать URL страницы сайта
или загрузить файл с HTML-разметкой, и он поможет выявить и исправить
ошибки.