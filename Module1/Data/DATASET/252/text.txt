На сегодняшний день актуальна тема поддержания здорового образа жизни. Люди стремятся
следить за своим здоровьем, занимаются спортом, а также путешествуют. Они постоянно находятся в поиске различных мест посещения. Красноярский край обладает очень богатой природой. В нашем городе существует проект «Красноярский Хайкинг», который представляет собой
сеть промаркированных троп на территории Торгашинского хребта. Появилось множество граждан, желающих сходить в поход как в окрестностях своего города, так и вне городской местности. Существует множество источников, где можно найти справочную информацию о местах
посещения и общие тропы, однако, до сих пор нет возможности создания своего индивидуального маршрута по пересеченной местности с оптимальным для конкретного человека треком. 
Для разработки такой системы, которая бы позволила в автоматизированном режиме строить
свои собственные маршруты по выбранным местам посещения с использованием данных gpsнавигации, необходимо разработать собственный алгоритм, позволяющий построить кратчайший маршрута от точки А до точки Б. 
Задача построения туристического маршрута сводится к задаче поиска кратчайшего пути от
одной вершины графа до другой [1]. Данная проблема является одной из самых популярных
задач в теории графов. Граф представляет собой абстрактный объект из множества вершин (узлов) и набора ребер, описывающих связи между парами вершин. Маршруты, которые состоят
из связанных между собой перекрестков, являются графом. 
Методы построения маршрутов применяются на практике в различных сферах. В работе [2] 
рассмотрены подходы, связанные с разработкой технологии для комплексной обработки данных дистанционного зондирования и векторных карт с целью мониторинга последствий чрезвычайных ситуаций, выявления критичных территорий и предотвращения негативных последствий. Авторы [3] рассматривают применение дискретного алгоритма решения SOTA (Selforganizing Tree Algorithm) и его параллельной версии с применением CUDA при построении
надежного кратчайшего пути с использованием возможностей видеокарт. В работе [4] авторами
разработана модификация дискретного алгоритма нахождения маршрута движения в зависящей
от времени транспортной сети. Авторы демонстрируют эффективность предлагаемого подхода
на примере крупномасштабной дорожной сети г. Самары и достигают скорости построения эффективного маршрута менее 1 с. Также методы построения маршрутов применяются для передачи данных в спутниковых [5], организационно-экономических системах [6], для мониторинга
состояния лесов при организации спутникового наблюдения [7; 8] и в других областях данных. 
В статье рассмотрены различные методы построения маршрутов и предложена эффективная
реализация модификации метода Дейкстры для построения туристических маршрутов на территории Торгашинского хребта.
Методы построения маршрутов
Классическая проблема поиска кратчайшего пути в открытой местности была направлением
большого числа исследований на протяжении многих лет. В связи с этим существует большое
количество различных алгоритмов нахождения пути, многие из которых показывают хорошие
результаты в своей области. Исследователи в работе [9] выполнили оценку эффективности 
15 алгоритмов поиска кратчайшего пути в реальных дорожных сетях. Авторы рассматривают
алгоритмы Беллмана – Форда – Мура, алгоритм Дейкстры и его модификации, алгоритм 
Пейпа – Левитта и другие. На основе оценки определен набор рекомендуемых алгоритмов для
вычисления кратчайших путей в реальных дорожных сетях. Также широко известен алгоритм
A* [10], который направлен на уменьшение времени поиска оптимального маршрута за счет
исключения менее перспективных направлений поиска на базе алгоритма Дейкстры. Модификации алгоритма Дейкстры применяются во многих практических задачах, например поиск
кратчайшего маршрута для туризма в Бали [11]. Рассмотрим наиболее подробно такие алгоритмы, как алгоритм Дейкстры, алгоритм Левита и алгоритм Флойда – Уоршелла. 
Алгоритм Дейкстры – один из самых известных алгоритмов для поиска кратчайшего пути
[12]. Он позволяет определить кратчайшие пути между вершинами. Реализация заключается
в том, что алгоритм на каждом шаге «посещает» одну вершину и пытается уменьшить метки. 
Работа алгоритма завершается, когда все вершины посещены. У алгоритма Дейкстры имеется
ряд достоинств, таких как высокая скорость работы и точность результата. Однако есть и недостаток – сложность в понимании. Вычислительная сложность алгоритма Дейкстры зависит от
способа нахождения вершины, хранения множества непосещенных вершин и обновления 
меток. Отсюда получаем, что реализация в данном методе потребует O(N) и O(1) единиц соответственно. Учитывая, что первая операция выполняется N раз, а вторая в зависимости от построенного графа, получается сложность O(N×N+M), где N – количество вершин, а M – константа, зависящая от построенного графа. 
Алгоритм Левита – алгоритм на графах, который находит кратчайшее расстояние от одной
из вершин графа до всех остальных [13]. Он также работает для графов с ребрами отрицательного веса. В сравнении с методом Дейкстры метод Левита проигрывает в том, что некоторые
вершины приходится обрабатывать повторно, а выигрывает на более простых алгоритмах
включения и исключения вершин из множества М1 (М1 – вершины, расстояние до которых вычисляется на текущем шаге алгоритма). Установлено, что для графов с «геометрическим» происхождением, построенных на основе транспортных сетей и реальных расстояний, метод Левита оказывается наиболее быстрым. Помимо этого, он выигрывает и по размеру программы. 
Сложность алгоритма Левита в худшем случае составляет 2 ON M ( ).  Чтобы достичь такого
времени работы необходимо, чтобы в графе ребра располагались в лексикографическом порядке. Более реальной оценкой данного метода является среднее время, а именно сложность
O(N×M). Однако на реальных графах алгоритм Левита лишь немногим уступает алгоритму
Дейкстры. 
Алгоритм Флойда – Уоршелла используется для нахождения кратчайших расстояний между
всеми вершинами взвешенного графа без циклов с отрицательными весами с использованием
метода динамического программирования [14]. В алгоритме используются две матрицы смежности: матрица расстояний Dk и матрица предшествования Sk, после чего, 
в течение n итераций, где n – количество узлов в матрице расстояний, а n-я итерация, дается оптимальная / конечная матрица расстояний Dk = n, а также окончательная матрица предшествования Sk = n. 
Недостаток алгоритма Флойда – Уоршелла в том, что алгоритм определяет только кратчайшее расстояние между всеми парами вершин, но не сохраняет информацию о кратчайших путях, что необходимо для задач построения маршрута. 
По итогу рассмотрения наиболее важных алгоритмов для получения кратчайшего пути 
в графе, а также анализу их преимуществ и недостатков, обозначим требования, которые необходимы для реализации поиска кратчайшего пути в трехмерном пространстве на территории
Торгашинского хребта: 
– временная сложность работы алгоритма; 
– высокая простота реализации алгоритма для мобильного приложения; 
– работа для графов с положительными весами; 
– точность результата; 
– сохранение информации о кратчайших путях. 
Проведенный анализ показал, что для поиска кратчайшего пути в трехмерном пространстве
на территории Торгашинского хребта целесообразно использовать алгоритм Дейкстры, так как
он учитывает особенности рассматриваемого процесса. Основными достоинствами алгоритма
Дейкстры является высокая скорость работы и точность результата [15]. 
Алгоритм построения маршрутов на основе GPS-данных
Прежде чем переходить к пошаговому описанию, рассмотрим схему работы алгоритма построения маршрутов по пересеченной местности на территории Торгашинского хребта (рис. 1). 
В программной реализации существует двенадцать gpx-треков (свободный текстовый формат хранения и обмена данными GPS) уже существующих маршрутов на территории Торгашинского хребта. Для того чтобы извлечь всю необходимую информацию из данных треков, 
применяется библиотека minidom, которая позволяет проанализировать xml-разметку и выбрать необходимую информацию [16]. 
Все треки находятся в соответствующей папке tracks. При проходе циклом по этой папке, 
выполняется посещение каждого маршрута и в соответствующие поля записывается следующая информация: название маршрута, цвет прорисовки и координаты каждой точки маршрута 
в формате широта, долгота и высота.
В словаре vocab ключам в виде названия маршрута задаются соответствующие gpx-треки. 
Далее по этому словарю формируется список названий маршрутов и создаются словари: индексы для точек пересечения и графа (distances), список вершин (nodes). Кортежами задаются начальная (st) и конечная (en) точки маршрута для составления нового маршрута – они состоят из
координат по y и x – затем они записываются в словарь point. 
При проходе циклом по vocab, выполняется проверка условия, являются ли точки st и en начальными или конечными точками существующих маршрутов и в таком случае они удаляются
из списка point – этот список позволяет определить требуется ли создавать новые вершины
графа для корректной работы алгоритма Дейкстры.
Следующим этапом является создание графа маршрутов и их пересечений. Для этого необходимо соотнести каждый маршрут со всеми остальными, чтобы определить есть ли пересечения, в случае нахождения пересечений зафиксировать их. Создаются списки по каждому маршруту, содержащие соответственно x1, y1 и z1 координаты для первого маршрута и x2, y2 и z2 координаты второго маршрута. Проходя циклом по точкам списков x1 и x2, определяется расстояние между точкам. Если это расстояние меньше минимального, то перезаписывается минимальное расстояние на новое и сохраняются индексы найденных точек. Если же маршруты пересекаются, определяется среднеарифметическая точка пересечения (x, y, z). Данный метод позволяет найти точку пересечения маршрута, если gpx-треки не пересекаются, а проходят очень
близко друг к другу. 
Для нахождения расстояния между двумя точками необходимо изучить форму Земли. Форма Земли может быть описана как сфера, поэтому уравнения для вычисления расстояний на
большом круге важны для вычисления кратчайшего расстояния между точками на поверхности
Земли и часто используются в навигации [17]. 
Вычисление расстояния этим методом более эффективно и во многих случаях более точно, 
чем вычисление его для спроектированных координат, поскольку, во-первых, для этого не надо
переводить географические координаты в прямоугольную систему координат и, во-вторых, 
многие проекции, если неправильно выбраны, могу привести к значительным искажениям длин
в силу особенностей проекционных искажений. 
Для вычислений используется сфера радиусом 6372795 м, что может привести к меньшей
ошибке, чем если считать в прямоугольных системах координат. 
Для перевода углового расстояния в метрическое, необходимо угловую разницу умножить
на радиус Земли, единицы конечного расстояния будут равны единицам, в которых выражены
метры. 
Описанный метод реализован в функциях: Lenfor и Meters. Функция Lenfor – функция, рассчитывающая длину пути между точками маршрута по x и y без учета высоты, и функция Meters 
– функция, рассчитывающая расстояние между точками gps-координат с учетом перепада высот, после вычисления расстояния функцией Lenfor. 
Алгоритм Дейкстры позволяет определить кратчайшие пути между вершинами. В данной
реализации принцип этого алгоритма используется для определения весов ребер, нахождения
кратчайшего пути и составляет его из частей gpx-треков. Алгоритм Дейкстры поэтапно формулируется следующим образом: 
Шаг 1: задать начальную и конечную точку маршрута. 
Шаг 2: создать словарь непосещенных вершин – unvisited, словарь путей до каждой вершины – way, словарь посещенных вершин – visited. 
Шаг 3: цикл, пока есть непосещенные вершины. Иначе шаг 10. 
Шаг 4: если есть соседи в unvisited, то новый вес пути (newDistance) = текущий вес пути
(currentDistance) + вес между вершинами (distance). Иначе шаг 3. 
Шаг 5: значение unvisited – список? Если да, взять первое значение списка: dist = dist[0]. 
Иначе unvisited[neighbour] = newDistance, newPath (новая часть пути). 
Шаг 6: записать в словарь путей newPath. А в visited для текущей вершины записать
currentDistance. 
Шаг 7: удалить текущую вершину из unvisited. 
Шаг 8: сформировать кандидатов для новой текущей вершины. Отсортировать newDistance 
по возрастанию. Получаем новую текущую вершину (path) = currentDistance[1] и текущий путь
до нее (currentDistance) = currentDistance[0]. 
Шаг 9: newPath = path + current (текущая ячейка). 
Шаг 10: получен заполненный словарь путей из стартовой точки. 
Шаг 11: выбрать искомый маршрут по ключу конечной точки. 
Шаг 11: определить какому маршруту принадлежит очередная пара вершин. 
Шаг 12: если индекс начальной точки (lost) > индекса конечной точки (next), копировать эту
часть трека. Иначе, идти в обратную сторону трека. 
Шаг 13: собрать оптимальный gps-трек, по заданным точкам. 
Экспериментальные исследования
В качестве примера рассмотрим один из вариантов построения маршрута, где начальная
точка – гора Тамара с координатами 55.952562 и 92.857231, находящаяся на маршруте «Здоровье», а конечная точка – 2-я Торгашинская видовка с координатами 55.919239 и 92.889939, находящаяся на маршруте «Болгаш». Рассмотрим визуализацию маршрута на рис. 2 (отображен
розовым цветом).
На рис. 2 С.Ш. – северная широта, а В.Д. – восточная долгота. Наблюдаем 13 маршрутов
разных цветов, расшифруем слева направо: красный – Тропа «Здоровье», фиолетовый – Тропа
«Лыжная», зеленый – тропа «Мокрый лог», розовый – построенный маршрут по указанным
точкам, оранжевый – тропа «Рыжая», зеленый – тропа «Синильга», желтый – тропа «Сквозная», 
синий – тропа «Сивая», фиолетовый – тропа «Топ», оранжевый – тропа «Болгаш», коричневый – 
тропа Спелеологов, фиолетовый – тропа «Кузнецово», синий – тропа «Сказка». 
Помимо визуализации, алгоритм построения туристических маршрутов вычисляет длину
нового маршрута, максимальную и минимальную высоту на протяжении всего трека и время
построения. Таким образом, по построенному маршруту получено: длина маршрута = 10676 м, 
максимальная высота = 584,53 и минимальная высота = 179,76. На текущий момент в программной системе имеется 38 различных объектов Торгашинского хребта, что охватывает более 95 % точек посещения туристами. При этом алгоритм (система) допускает ввод собственных координат, которые учитываются при построении маршрутов. В таблице приведены характеристики некоторых построенных маршрутов. 
В результате работы разработан алгоритм построения кратчайшего маршрута от начальной до
конечной точки, основанный на алгоритме Дейкстры, позволяющий получить оптимальный gpxтрек, а также имеющий базу существующих маршрутов. Алгоритм применяется в программной
системе, реализованной в виде web-сайта и мобильного приложения, который позволяет туристам построить удобные маршруты для посещения Торгашинского хребта. В системе имеется 38 
туристических объектов, и построение любого маршрута занимает в среднем 15 мс. 