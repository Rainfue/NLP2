В современном мире web-приложения пользуются
огромной популярностью. Каждый день мы пользуемся
социальными сетями, новостными сайтами, интернет-банкингом
и другими web-сайтами даже не задумываясь о том, что наши
данные могут находится под угрозой [1-3]. Современные webприложения работают с большими базами данных [4-6]. Самой
популярной СУБД в этой области является MySQL, которую
обычно используют в связке с языком программирования PHP.
Но так ли это безопасно?
Целью работы является исследование методов защиты от
SQL инъекций. SQL инъекция – один из распространённых
способов взлома сайтов и программ, работающих с базами
данных, основанный на внедрении в запрос произвольного SQLкода [7-8].
Для примера рассмотрим работу новостного webприложения. Рассмотрим ситуацию, когда web-приложение для
вывода новости обращается к базе данных используя внешний
GET параметр. В данном примере параметр является
идентификатором (ключевым полем) новости, которую webприложение обрабатывает в данный момент.
В коде приложения это обычно выглядит следующим
образом:
$id = $_GET[‘id’];
$news = $db->query(“SELECT * FROM `news` WHERE id =
$id”);
Основная ошибка в этом примере – отсутствие проверки
корректности переменной $id, переменная сразу подставляется в
SQL запрос. Это дает злоумышленникам возможность
напрямую вмешиваться в SQL запрос. Поскольку переменная
никак не экранируется и не проверяется, вместо GET параметра
id можно передать любую строку символов, в том числе и
вредоносный код. Например, если передать “-1 UNION SELECT
1,username,password from admin”, то приложением будет
выполнен запрос:
SELECT * FROM `news` WHERE id = -1 UNION SELECT
1,username,password from admin
Что при наличии таблицы admin с полями username и
password может привести к выводу конфиденциальной
информации из этой таблицы; т.е. злоумышленнику остается
лишь проанализировать (например, методом перебора)
структуру базы данных для получения конфиденциальной
информации.
Способом защиты является проверка и экранирование
входящих данных. Экранирование – это замена в тексте
управляющих символов на соответствующие текстовые
подстановки. Разработчик web-приложения должен знать об
этом и принимать необходимые меры. Например, для
экранирования, можно воспользоваться средствами библиотеки
mysqli, в частности методом объекта mysqli::real_escape_string.
Проверку можно же реализовать с помощью оператора
ветвления “if”.
$id = (int) $_GET[‘id’];
if ($id < 0) die(“Ошибка!”);
$id = $db->real_escape_string($id);
$news = $db->query(“SELECT * FROM `news` WHERE id =
‘$i’”);
Данный способ обеспечит надежную защиту от
вмешательства в SQL запрос.
Вывод: данная работа может найти применение при
разработке web-приложений использующих СУБД MySQL,
которым необходимо обеспечить высокий уровень
безопасности, конфиденциальности, отказоустойчивости и
целостности данных.