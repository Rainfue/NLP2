С	сентября	1995	года	миру	известен	 язык	программирования	под	названием	JavaScript.	Компания	Netscape Communications на	волне	конкуренции	с	Microsoft решила	разработать	свой	клиентский	язык	программирования,	который	
мог	 бы	 встраиваться	 в	HTML напрямую	 и	 добавлять	 динамические	 элементы	
веб-страницам,	открываемым	в	их	браузере	Netscape Navigator.	В	виду	тесного	
сотрудничества	Netscape Communications	и	Sun Microsystems,	новый	язык	должен	 был	 иметь	 схожий	 с	 Java синтаксис,	 что	 исключало	 адаптацию	 для	 этих	
нужд	других	популярных	на	тот	момент	скриптовых	языков,	таких	как	Python,	
TCL и	Scheme.	Именно	в	таких	условиях	и	появился	JavaScript.	С	тех	пор	мир	не	
стоял	 на	 месте	 и	 JavaScript давно	 уже	 перерос	 рамки	 простого	 скриптового	
языка	 для	 веб-страниц.	При	помощи	 него	можно	создавать	полноценные	 вебприложения.	Таким	 образом,	приложение	может	иметь	 единую	 кодовую	базу,	
подчинённую	общей	парадигме,	использующую	общие	библиотеки	с	практически	отсутствующим	традиционным	делением	на	клиента	и	сервер.	Стоит	также	
отметить,	что	JavaScript популярен	как	среди	программистов,	так	и	среди	работодателей [3].	Далее	мы	рассмотрим	некоторые	технологии,	а	также	обозначим	
основные	плюсы	и	минусы	этого	языка.	
Сам	по	себе,	JavaScript не	содержит	никаких	интерфейсов	работы с	сетями,	
графикой	 или	 I/O	 (ввод-вывод),	 полагаясь	 для	 реализации	 этих	 функций	 на	
среду выполнения,	в	которую	он	встраивается.	С	2009-го	года	существует	серверная	среда	выполнения	под	названием	Node.js.	Построенная	на	базе	движка	 для	JavaScript	V8	компании	Google,	эта	среда	позволяет	создавать	веб-сервера	и	
сетевые	приложения	при	помощи	модулей.	“Из	коробки”	Node.js предоставляет	
модули	не	только	для	работы	с	сетевыми	протоколами,	но	и	с	файловой	системой,	криптографическими	функциями,	потоками	данных	и	так	далее.	Это	легковесное	ядро	в	виде	среды	выполнения,	механизма	подключения	модулей	и	некоторых	готовых	интерфейсов	прикладного	программирования.	Программист	
также	может	легко	воспользоваться	модулями	третьих	сторон	при	помощи	менеджера	пакетов	NPM	(Node Package Manager).	Все	выше	перечисленные	свойства	характерны	и	для	многих	других	высокоуровневых	языков	программирования,	 далее	 мы	 узнаем,	 что	 отличает	 JavaScript на	 базе	 среды	 выполнения	
Node.js от	других	популярных	языков	мира	веб-технологий.	Большинство современных	языков	программирования	используют	блокирующие	функции.	Блокировка	означает,	что	тело	следующей	инструкции	не	может	начать	выполняться	
до	окончания	предыдущей	в	том	же	программном	потоке.	Это	особенно	сильно	
сказывается	 при	 работе	 с	 сетевыми	 подключениями	 и	I/O	 так	 как	 весь	 поток	
блокируется	 на	 время	 выполнения	 передачи	 данных.	 Большинство	 современных	языков	программирования	решают	эту	проблему	при	помощи	многопоточности,	однако	Node.js использует	однопоточный	цикл	событий	и	неблокирующие	 операции	 ввода-вывода.	 Функции	 в	 Node.js могут	 выполняться	 параллельно	даже	находясь	в	одном	потоке,	вызывая	свой	callback	(функцию	обратного	вызова)	при	завершении	работы.	Это	позволяет	Node.js поддерживать	десятки	 тысяч	 одновременных	 подключения	 без	 использования	 дорогостоящей	
операции	переключения	контекста	между	потоками.	Для	осуществления	асинхронности	 Node.js использует	 библиотеку	 libuv,	 которая	 является	 слоем	 абстракции	над	сетевыми	интерфейсами	и	файловой	системой	в	операционной	системе	Windows и	POSIX	системах	таких	как	Linux,	macOS и	так	далее.	До	версии	
13.1.0	у	Node.js	были	проблемы	с	вертикальным	масштабированием	так	как	однопоточный	 поток	 сообщений	 не	 мог	 пользоваться	 преимуществами	 многоядерных	архитектур	процессора.	При	обработке	тяжёлых	процессорозависимых	
задач	приходилось	создавать	дочерние	процессы	дабы	распределить	нагрузку	
между	ядрами,	такие	процессы	не	разделяют	между	собой	оперативную	память	
и	потому	коммуникация	между	ними	затруднена.	Но,	теперь	в	Node.js	появилась	
возможность	создавать	дочерние	потоки,	они	могут	наследовать	между	собой	
оперативную	память	и	имеют	все	преимущества	главного	однопоточного	асинхронного	цикла	событий.
Если	Node.js	это	 технология	и	платформа,	то	для	написания	нашего	серверного	приложения	нам	понадобится	также	и	фреймворк.	Express.js	это	фреймворк	для	написания	веб-приложений,	существующий	с	2010-го	года,	он	по	факту	
считается	 “стандартным”	 в	 мире	 Node.js	 в	 виду	 своего	 минимализма	 и	 отсутствия	уклона	в	ту	или	иную	специфическую	область.	Архитектура	этого	фреймворка	заключается	в	том,	что,	попав	 в	приложение	запрос	обрабатывается	цепочкой	 функций,	 называемых	“middleware”,	 в	 каждую	 из	 которых	 передаётся	
объект	входящего	HTTP запроса,	интерфейс	создания	ответа,	функция,	позволяющая	передать	запрос	дальше	по	цепочке	и	тело	ошибки	если	текущий	элемент	
цепочки	 middleware является	 обработчиком	 ошибок.	 В	 любой	 момент	 своего	 выполнения	 каждый	 элемент	 цепочки	 может	 либо	 передать	 запрос	 дальше,	
либо	вернуть ответ	клиенту.	Как	можно	заметить,	Express	не	предоставляет	“из	
коробки”	 многих	 вещей	 которые	 входят	 в	 более	 тяжеловесные	 фреймворки,	
например,	механизм	аутентификации	или	роутер,	но	они	легко	могут	быть	добавлены	в	виде	новых	элементов	цепочки	middleware.	Таким	образом,	программист	получает	меньше	помощи	от	фреймворка,	но	имеет	значительно	больше	
свободы	 в	 выборе	 библиотек	 и	 организации	 структуры	 проекта. Стоит	 отметить,	что	на	данный	момент	в	экосистеме	Node.js,	Express уже	не	является	самым	
быстрым [2] и	уж	тем	более	самым	высоко-архитектурным	конкурентом,	но	ни	
один	другой	конкурент	не	может	похвастаться	таким	сочетанием	скорости	и	популярности	среди	разработчиков,	что	обеспечивает	активную	поддержку	проекта	и	богатство	модулей	третьей	стороны.	
Все	популярные	СУБД	имеют	драйвера	для	Node.js	(а	зачастую	и	в	нескольких	реализациях).	Из-за	этого	программист	абсолютно	волен	в	выборе	реляционной	 базы	 данных	 для	 своего	 проекта,	 однако,	 в	 Node.js	 программировании	
особенно	популярно	использование	не	реляционных	баз	данных.	Сейчас	мы	более	 детально	 рассмотрим	 этот	 вопрос	 на	 примере	 базы	 данных	 MongoDB.	
MongoDB	 –	 документно-ориентированная	 база	 данных,	 это	 означает,	 что	 данные	в	ней	хранятся	в	виде	независимых	BSON	(Binary	JSON,	двоичный	JSON)	документов	помещённых внутрь	“коллекций”.	По	своей	структуре	JSON	очень	похож,	а	в	случае	с	JavaScript-ом	практически	идентичен,	со	структурой	объектов	в	
языках	программирования.	Это	позволяет	хранить	данные	в	виде	готовом	для	
бизнес-логики,	 а	 не	 в	 представлении	 навязанным	 базой.	 Документы	 в	 одной	
коллекции	 не	 обязаны	 иметь	 единую	 схему,	 конечно,	 совершенно	 различные	
данные	обычно	не	помещаются	в	одно	и	то	же	месте,	но	валидация	создаваемых	
документов	 происходит	 исключительно	 на	 стороне	 программного	 кода.	 Это	
позволяет	эффективно	хранить	данные,	которые	сложно	подогнать	под	единую	
схему,	а	также	с	лёгкостью	менять	эти	схемы	без	нужды	в	миграции	старых	данных.	Также,	базовые	операции,	а	конкретнее	чтение,	изменение	и	удаление,	при	
самых	простых	запросах	выполняются	в	MongoDB	быстрее	чем	в	Microsoft SQL
Server и	многих	NoSQL конкурентах [1].	
Подводя	 итоги,	можно	 сказать	 что	 среди	 плюсов	 разработки	 серверных	
приложений	 на	 языке	JavaScript под	 средой	 выполнения	Node.js можно	 выделить синтактическую	простоту,	мультипарадигменность,	единство	серверного	
и	клиентского	стека,	высокую	производительность	операций	ввода-вывода,	активное	развитие	платформы	и	богатую	экосистему.	К	минусам	же	относятся:	относительная	молодость	платформы	и	посредственная	производительность	при	
работе	с	тяжёлыми	процессорозависимыми	задачами