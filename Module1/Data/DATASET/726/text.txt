React – это JavaScript библиотека для построения пользовательских
интерфейсов. React разрабатывается и поддерживается Facebook, Instagram, а
также сообществом отдельных разработчиков и корпораций. React
используется для разработки одностраничных и мобильных приложений. Его
цель — предоставить высокую скорость, простоту и масштабируемость. В
качестве библиотеки для разработки пользовательских интерфейсов React
часто используется с другими библиотеками, такими как Redux.
React предоставляет пользователю язык шаблонов и некоторые
callback-функции для отрисовки HTML. Весь результат работы React — это
HTML.
Рисунок 1 – HTML код.
____«Актуальные научные исследования в современном мире» ISCIENCE.IN.UA__
Выпуск 10(66) ч. 1 ISSN 2524-0986
130
Связки HTML/JavaScript, называемые компонентами, занимаются тем,
что хранят свое внутреннее состояние в памяти (например: какая закладка
выбрана), но в итоге просто реализуется HTML.
Рисунок 2 – JS код
Преимущества и недостатки библиотеки React
В библиотеке React js имеется преимущества и недостатки, в данной
работе будут рассмотрены несколько из них.
Сейчас начнем описать преимущества этой библиотеки:
 посмотрев на исходный код, будет видно как компонент выстроится.
Это может быть важным преимуществом, хотя оно ничем не отличается от
шаблонов фреймворка Angular. например нужно изменить название сайта на
имя пользователя после входа в систему. Если не используется какой-либо
фреймворк MVC, то можно сделать, как приведено на(Рисунок 1) и (рисунок 2),
а на рисунке 3 представлен повторно предыдущий пример только на React js.
Рисунок 3 – Реакт код
 Связывание JavaScript и HTML в JSX упрощает понимание
компонентов.
 Странное сочетание HTML / JavaScript может сбить вас с толку из-за
неприятной ситуации работы без библиотеки реакта. Обычно вы разделяете
представления (HTML) и функциональность (Javascript). Это приводит к
монолитному файлу JavaScript, содержащему все функциональные
возможности для одной страницы, и вы должны следить за сложным потоком
JS->HTML->JS ->.
 Связывание функциональности непосредственно с разметкой и
упаковка ее в портативный, автономный "компонент" сделает вас счастливее, а
ваш код в целом лучше. Ваш Javascript "знаком" с вашим HTML, поэтому имеет
смысл смешивать их.
Рендеринг на сервере
API-интерфейсы React hook, впервые выпущенные в октябре 2018 года, предоставляют альтернативу написанию компонентов на основе классов и предлагают альтернативный подход к управлению
состоянием и методам жизненного цикла. Хуки доводят до функциональных компонентов вещи, которые мы когда - то могли сделать только с классами, путем использования useState, useEffects useContext.
Дополнительные Хуки включают в себя: useReducer, useCallback, useMemo, useRef, useImperativeHandle, useLayoutEffectи useDebugValue.
Самый простой способ описать хуки - показать бок о бок примеры компонента класса, которому
необходим доступ к методам состояния и жизненного цикла, и еще один пример, в котором мы достигаем того же самого с функциональным компонентом.
Преимущества использования хуков. Хуки очень функциональны и полезны разработчикам, они
Аннотация: В статье рассматривается компонент JS фреймворка - React и его основные ключевые
аспекты. Рассмотрены определение, основные преимущества и недостатки React Hooks. Отдельное
внимание уделено роли этого компонента в разработке больших Веб - приложений.
Ключевые слова: React, Фреймворк JS, Разработка, Хуки, Тестирование кода, Большие проекты, Веб
- приложения, Компьютерные технологии.
HOOKS IN REACT JS
Nasirov Erik Fanilevich,
Kirillov Dmitry Sergeevich,
Mertins George Rudolfovich,
Molostov Danil Dmitrievich
Scientific adviser: Starygina Svetlana Dmitrievna
Abstract: The article discusses the component of the JS framework - React and its main key aspects. The
definition, main advantages and disadvantages of React Hooks are considered. Special attention is paid to the
role of this component in the development of large Web - applications.
Key words: React, JS Framework, Development, Hooks, Code Testing, Large Projects, Web Applications,
Computer Technologies.
56 ЭКОНОМИКА ПРЕДПРИЯТИЙ, РЕГИОНОВ, СТРАН
V международная научно-практическая конференция | МЦНС «НАУКА И ПРОСВЕЩЕНИЕ»
кардинально меняют способ написания компонентов. Они помогают писать более четкий и лаконичный
код.
Хуки убирают все лишнее и не функциональное из кода. Это сокращает и делает наш код более
читаемым, кратким и понятным. Чтобы продемонстрировать, давайте проверим классовую версию
нашего канонического «эффекта заголовка документа» и увидим разницу между тем, как мы раньше
писали что-то подобное, бок о бок с примером с использованием установленного npm хука, который
делает то же самое (рис. 1.).
Рис. 1. Использование React Hooks
Рядом, расположенное ниже, показано, как компонент немного потерял в весе. Мы не только экономим около пяти строк кода, но и улучшаем читаемость и тестируемость с переходом на хуки. Хуки
обратно совместимы с заменяемым им кодом и могут жить бок о бок с ним, поэтому нет необходимости
немедленно переписывать всю кодовую базу.
Пять важных правил для написания правильных React Hooks:
• Никогда не вызывайте хуки из цикла, условия или вложенной функции
• Хуки должны находиться на верхнем уровне вашего компонента.
• Вызов хуков только из функциональных компонентов React
• Никогда не вызывайте ловушку из обычной функции
• Хуки могут вызывать другие хуки
Пример использования React Hook «useContext». Хорошим примером использования Context является компонент профиля. Подумайте об информации, которая может отображаться в профиле. Когда
я вхожу в систему , у меня появляется облако данных, которое должно быть доступно всем или некоторым дочерним элементам компонента профиля. Мы можем предположить, что этому компоненту профиля нужны два дочерних компонента. Один из этих двух компонентов будет отображать мое имя
пользователя и изображение, другой - мою команду.
Порядок вызовов React Hooks тоже очень важен. Допустим у нас есть компонент AudioPlayer (рис. 2.).
Поскольку он вызывает useState 3 раза, React помещает 3 записи в массив хуков при первом
рендеринге.
При следующем рендеринге те же 3 крючка вызываются в том же порядке (потому что код не переписывает себя волшебным образом между вызовами), поэтому React может заглянуть в свой массив
и сказать: «О, у меня уже есть useState крючок в позиции 0, поэтому вместо создания нового состояния
я верну существующее ».
ЭКОНОМИКА ПРЕДПРИЯТИЙ, РЕГИОНОВ, СТРАН 57
V International scientific conference | www.naukaip.ru
Рис. 2. Компонент AudioPlayer
Вот как React может создавать и поддерживать состояние для нескольких вызовов функций, даже когда сами переменные каждый раз выходят за пределы области видимости.