В основе информационной безопасности предприятия лежат три базовых элемента: защита документации; аппаратно-программные средства; 
защита персональных данных сотрудников. 
Для предотвращения утечки персональных данных требуется использовать системный ряд методов по защите данных. При создании такого ряда возникает сложный комплекс решений между затратами на информационную безопасность и уровнем ответственности, которую может нести сотрудник, владеющий этой информацией. Проблема уровня ответственности в первую очередь связана с человеческим фактором. Здесь требуется организация постоянной разъяснительной работы с персоналом предприятия. Мы же остановимся на программном способе защиты. 
В статье рассматриваются теоретические и практические аспекты 
разработки программной подсистемы, которая предотвратит хищение персональных данных сотрудников предприятия. 
Теоретический аспект состоит в исследовании криптографических 
алгоритмов на стойкость к возможным способам атакующих угроз. Данная тема уже обсуждалась на всероссийской научной студенческой конференции [1]. 
Начнем с теоретических аспектов информационной безопасности в 
целом. Далее рассмотрим один из алгоритмов хеширования на примере 
разработки программной подсистемы защиты с использованием криптографического метода. 
Система методов, ориентированная на информационную безопасность, служит для защиты различных данных, в том числе персональных. 
Ряд мер, такие как постоянность данных, их секретность и актуальность, должны обеспечивать надежную и стойкую защиту информации. К 
известным угрозам информационной безопасности относятся угрозы физиологические и умышленные по началу формирования, утечки данных по 
фактору направления, глобальные, местные и индивидуальные угрозы. В 
отдельную группу выделяют угрозы, связанные с программным обеспечением. К этой группе относятся вредоносные программы такие, как дедуктивные временные «бомбы», троянские и вирусные программы, компьютерные черви, считыватели (перехватчики) паролей, клавиатурные шпионы. 
К средствам защиты информации относятся программно-аппаратные 
и регламентирующие средства. Средства защиты должны нейтрализовать 
угрозы, обеспечить целостность и логическую ясность информации, сократить потери конфиденциальных данных. Средства защиты подразделяются 
на организационные и формальные. 
Организационные средства устанавливают правила и режим работы 
сотрудников, разделяют права доступа персонала к информации, регламентируют процесс охраны помещений. Формальные средства осуществляют защитные функции по специально построенной схеме, которая автоматизирована и настроена для постоянной работы, без вмешательства людей. 
Среди формальных средств выделим программные средства защиты 
и остановимся на них подробнее. 
Из наиболее распространенных видов программ можно выделить 
встроенные и специализированные программы; антивирусы; резервное копирование; межсетевые фильтры; прокси-серверы; виртуальные частные 
сети. 
Рассматриваемый в нашей статье криптографический метод относится к формальным средствам. Он применяется как для защиты информации 
в целом, так и для защиты каналов связи. 
Криптография суть наука, описывающая и применяющая математические алгоритмы для шифрования данных. В современном мире она считается самым надежным методом защиты информации, как для хранения, 
так и для передачи особо важных данных. С помощью криптографических 
методов данные полностью изменяются вплоть до их неузнаваемости.
Воздействие криптографического метода на входные данные можно 
классифицировать на следующие виды: шифрование; хеширование; кодирование; стенография; сжатие. 
По сравнению с шифрованием хеширование лучше обеспечивает сохранность данных. Сохраняется не само слово для проверки, а хеш-код. 
Алгоритмы для хеширования различаются математическими функциями, 
уровнем сложности, длиной хеш-кода, но каждый из них подходит для решения конкретной специфики задач. Схема выполнения хеш-функции изображена на рисунке 1. 
Криптографические хэши в основном применяются для защиты паролей, а не для хранения в виде обычного текста. Такой вариант весьма 
подходит для разработки подсистемы с использованием проверки аутентификации и будет выполнено после исследовательской части. 
Главная цель использования такой подсистемы заключается в ограничении алгоритмического метода, когда результат входной информации 
предоставляет на выходе единственное значение, без каких-либо схожих 
результатов с другими. При этом он должен показывать строку хеш-кода с 
одним и тем же количеством чисел, чтобы результат был одинаков во время постоянного использования одной и той же информации. Закономерность такой связи необходима как для хеш-кода, так и для бита. Если поменять даже одно значение у входных данных, то хеш-сумма должна поменяться кардинально. 
У алгоритма хеширования имеется только один изъян, который называется коллизией. Под коллизией понимается такое состояние, когда совсем разные начальные данные, будь это небольшой текст или одно слово, 
может привести к единственному результату хеш-кода. Задача надежного 
хеширования заключается в составлении сложного способа генерации 
функции, который выдаст только одно значение на выходе. Такой метод 
необходим для защиты возможного подбора хотя бы одного входного значения одинаковой хеш-суммы. Он должен быть стабилен, даже если правонарушитель захочет вычислить входное значение обратными шагами 
функции, которая и сформировала хеш-код.
В рамках разработки подсистемы был исследован на стойкость современный улучшенный алгоритм SHA-256 [2,3]. Этот алгоритм относится 
к семейству однонаправленных криптографических алгоритмов. 
В нашем исследовании уровень уменьшения стойкости рассматривался для нескольких угроз. Главным свойством в криптографической 
стойкости хеширования считается постоянность размещения результативных данных, что позволяет хорошо оценивать действия в нужных ситуациях. Подобрав большое количество N элементов для входного набора, нужно ко всем его объектам соотнести выборочным порядком всякие элементы и для выходного. 
Случайность того, что определенное значение выходного множества 
не будет взято, а вероятность, что ни один из N элементов не 
будет использован, равна 1, только из-за свойства хешфункции отображенные N элементы являются событием, обособленным в 
начальном приближении. 
Результат первых шести итераций представлен в таблице 1. Конечно, 
доля активных элементов продолжает с каждой итерацией уменьшаться, но 
не так быстро и катастрофично, как в самом начале. Для того чтобы оценить степень снижения стойкости для большого количества итераций 
удобнее изучать не само число k, а обратное ему в логарифмической шкале 
по основанию 2, чтобы единицами измерения стали биты.
График зависимости r до 50000 итераций представлен на рисунке 2. 
Из рассчитанных результатов заметно, что снижение стойкости с определенного момента нарастает очень медленно. Более того, количество 
итераций в точности следует степеням двойки. 
Описанную схему защиты от атак полного перебора можно свободно 
применять на практике без каких-либо ограничений со стороны криптографической стойкости. Рекомендуемые верхние пределы количества итераций (разрешенное снижение стойкости r выбрано субъективно в размеодин к восьми разрядности хеш-функции) представлены в таблице 2. Данное исследование проводилось для выбора надежного алгоритма хеширования, применив его в написании подсистемы к базе данных сотрудников 
предприятия. 
Общий результат исследования показал, что использование криптографического метода защиты данных увеличивает гарантию безопасности 
для конфиденциальных сведений. 
На основе исследования был разработан продукт в виде подсистемы, 
которая осуществляет надежное хранение персональных данных сотрудников предприятия, а также создана учетная система для кадровой службы. 
Доступ к системе разрешен только зарегистрированным пользователям. 
Благодаря исследованию на стойкость защиты и рассмотрению алгоритмов на возможность коллизии был использован проверенный алгоритм 
хеширования SHA-256. Данный алгоритм применяется для сохранности 
паролей.
Аутентификация пользователей осуществляется только после того, 
как администратор введет хешированное слово. Данное слово необходимо 
для сравнения хеш-суммы файла, в котором хранятся учетные записи 
пользователей. Текст в файле будет нечитабелен для злоумышленника, если он попытается его открыть. 
Разработка программы осуществлялась в интегрируемой среде Visual 
Studio 2019 [4], относящаяся к линейке продуктов компании Microsoft. 
Благодаря простейшему редактору исходного кода и большим набором 
библиотек работа в этой среде была удобна. Также в ней содержатся необходимые криптографические службы хеширования с большим выбором 
алгоритма, что позволило остановиться на данном продукте. А наличие 
поддержки большого количества языка программирования и способности 
работать на многих платформах операционной системы, позволило описать абстрактные элементы на основе предметной области. 
Для написания подсистемы с защитой данных был выбран язык программирования C# [5]. Данный язык является современным и развивающимся в востребованных учреждениях. Также он поддерживает универсальные возможности, тем самым повышая безопасность и производительность системы. 
