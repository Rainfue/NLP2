Существует множество веб-сайтов и вебсервисов на поддержку и редакцию которых тратятся огромное количество ресурсов как временных, так и материальных. Под каркасом таких вебресурсов находятся сотни строк кода, непосредственно расположенных в
интерфейсе продукта, из-за чего появляются трудности в понимании работы веб-ресурса и тем более его изменении и поддержке. Происходит такое из-за отсутствия применения паттернов программирования. MVC
(Model-View-Controller) паттерн, который лежит в основе всех современных веб-фреймворков, позволяет решить вышеизложенную проблему.
MVC – это фундаментальный
паттерн, который отделяет графический интерфейс от логики, а логику от
данных. MVC состоит из трех частей, которые и дали ему название. Рассмотрим их:
 модель (Model). Под моделью обычно подразумевается часть, которая несет в себе функциональную бизнес-логику веб-ресурса. Модель
является полностью независимой от остальных частей продукта;
 представление (View). Представления выполняют отображения
данных, полученных от модели. Однако представление не имеет возможность напрямую влиять на модель, также у представления имеется доступ
«только на чтение» к данным [1];
 контроллер (Controller) – связующее звено, соединяющее модели,
виды и другие компоненты в рабочее приложение. Контроллер занимается
обработкой запросов пользователя.
Для того чтобы применить паттерн MVC в проекте нужно создать
файл «.htaccess» и внести в него инструкции для использования роутинга
на рабочем веб-ресурсе (рисунок 1) [3].
Получив URL, необходимо найти его в массиве routes.php, а после
нахождения, первая часть результата – это название контроллера, а вторая – название метода в этом контроллере. В зависимости от полученного
URL, к примеру ‘news’, будет вызываться не контроллер ‘news’ а
‘NewsController’ и не метод ‘index’ а метод ‘actionIndex’, поэтому структура файлов будет иметь вид как на рисунке 6. Это выполнено для удобства и более чистого отображения информации в файле routes.php.
При подключении контроллера в строке 10 разработчик получает
данные из модели, а в 11 строке отображена полученная информацию на
рабочем веб-ресурсе.
В модели происходит подключение к базе данных, затем отправляется запрос на получение 10 новых новостей, после формируется массив с
результатом и происходит отправление результата обратно контроллеру
для отображения (рисунок 7).Выше было показано создание веб-ресурса с использованием принципов MVC. В статье поэтапно рассмотрены все этапы, от соз-дания начальных директорий до разработки классов и функций, используемых в веб-ресурсе. Посредством использования принципов MVC грамотно проектируется структура, которую легко тестировать, поддерживать и изменять. Далее следует создать контроллеры, модели и шаблоны
для всех целей веб-ресурса. 