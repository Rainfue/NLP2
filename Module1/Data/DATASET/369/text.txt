В профессиональную подготовку бакалавров по направлению 44.03.04
«Профессиональное обучение (по отраслям)», направленности «Компьютерный
дизайн», входит ряд дисциплин, способствующих формированию
профессиональной компетенции ПК-1 «Способен осваивать и использовать
теоретические знания и практические умения и навыки в предметной области по
профилю «Компьютерный дизайн» при решении профессиональных задач», в том
числе дисциплина вариативной части блока Б1 К.М.07.01.10 «Программирование
на JavaScript».
Целью данной дисциплины является формирование индикатора достижения
компетенции ПК-1.3 «Демонстрирует методы использования программных и
аппаратных средств для создания объектов компьютерного дизайна» [3]. Для
успешного формирования этого индикатора преподавателю необходимо
качественно выстраивать учебный процесс, излагать материал достаточно
подробно и в доступной форме.
Рассмотрим методику изучения дисциплины «Программирование на
JavaScript» на примере темы «Одномерные массивы».
Изучение темы начинается с объяснения преподавателем теоретического
материала, необходимого для работы с одномерными массивами.
Вначале приводятся 2 способа формирования одномерного массива.
1. Константой.
const a=new Array (2,3,-5,-8,9,-1,5,-6,10,-2);
В этом случае размерность массива определяется автоматически.
2. Случайным образом.
В этом случае массив описывается в разделе переменных, а его размерность
должна быть задана программистом.
let a;
a=new Array(10);
Затем преподаватель вводит в употребление функцию определения
размерности массива length, обращает внимание студентов на то, что к элементам
массива удобно обращаться с помощью цикла, а также на то, что нумерация
индексов элементов начинается с 0 и показывает, как задать элементы случайным
образом.
for (i=0; i<a.length; i++)
a[i]=Math.random()*50-25;
Выбор способа формирования массива зависит от условия задачи. Если
указано, что все элементы массива должны быть различны или массив должен
быть упорядоченным, то целесообразнее задавать его константой, в остальных
случаях можно задавать случайным образом.
Далее студентам демонстрируется алгоритм вывода массива на экран с
использованием вспомогательной строковой переменной s, при этом желательно
выводить элементы не более, чем с двумя знаками после запятой.
s=””;
for (i=0; i<a.length; i++)
s+=Math.round(a[i]*100)/100+” ”;
alert(s);
Затем начинается разбор типовых задач на одномерные массивы (внимание
уделяется не всему коду программы, а только его фрагменту, непосредственно
содержащему алгоритм решения конкретной задачи).
1. Найти сумму положительных элементов массива.
sum=0;
for (i=0; i<a.length; i++)
if (a[i]>0)
sum+=a[i];
2. Найти максимальный элемент массива.
Для лучшего понимания преподаватель прорабатывает идею алгоритма на
конкретном примере.
max=a[0];
for (i=1; i<a.length; i++)
if (a[i]>max)
max=a[i];
3. Найти индекс максимального элемента массива.
imax=0;
for (i=1; i<a.length; i++)
if (a[i]>a[imax])
imax=i;
Затем подробно разбираются более сложные задачи.
1. Дан одномерный числовой массив, все элементы которого различны.
Вычислить сумму кубов его элементов, кратных 3, расположенных между
максимальным и минимальным.
Код программы на JavaScript можно писать в простом текстовом редакторе,
таком как Блокнот, Notepad++ или в среде Geany и запускать на исполнение в
любом браузере.
Решение
<!DOCTYPE HTML>
<html>
<head>
<title>Проверка кода</title>
</head>
<body>
<script>
const a=new Array (2,3,-5,-8,9,-1,5,-6,10,-2);
let i,n1,n2,maxi,mini,s,t;
//поиск индексов максимального и минимального элементов
maxi=0;
mini=0;
for (i=1; i<a.length; i++){
if (a[i]>a[maxi])
maxi=i;
if (a[i]<a[mini])
mini=i;
}
//упорядочивание индексов максимального и минимального элементов
if (maxi>mini){
t=maxi;
maxi=mini;
mini=t;
}
//подсч?т суммы кубов элементов, кратных 3, расположенных между
максимальным и минимальным
s=0;
for (i=maxi+1; i<mini; i++)
if (a[i]%3==0)
s+=a[i];
alert(s);
</script>
</body>
</html>
2. Дан одномерный числовой массив, все элементы которого различны.
Заменить все отрицательные элементы, расположенные до максимального, их
кубами.
Решение
<!DOCTYPE HTML>
<html>
<head>
<title>Проверка кода</title>
</head>
<body>
<script>
const a=new Array (2,3,-5,-8,9,-1,5,-6,10,-2);
let i,n1,n2,maxi,mini,s,t;
//поиск индекса максимального элемента
maxi=0;
for (i=1; i<a.length; i++)
if (a[i]>a[maxi])
maxi=i;
//замена отрицательных элементов, расположенных до максимального, их
кубами
for (i=0; i<maxi; i++)
if (a[i]<0)
a[i]=a[i]**3;
//вывод на экран преобразованного массива
s=””;
for (i=0; i<a.length; i++)
s+=a[i]+” ”;
alert(s);
</script>
</body>
</html>
3. Дан одномерный числовой массив. Посчитать в н?м количество соседств из
чисел разного знака.
Решение
<!DOCTYPE HTML>
<html>
<head>
<title>Проверка кода</title>
</head>
<body>
<script>
let a,i,k;
//формирование массива случайным образом и вывод его на экран
a=new Array(10);
s=””;
for (i=0; i<a.length; i++) {
a[i]=Math.random()*50-25;
s+=Math.round(a[i]*100)/100+” ”;
}
alert(s);
//подсч?т количества пар рядом стоящих элементов с разными знаками
k=0;
for (i=0; i<a.length-1; i++)
if (a[i]*a[i+1]<0)
k++;
alert(k);
</script>
</body>
</html> [2]
Далее студентам предлагается решить задачи самостоятельно. Привед?м
некоторые из них.
1. Дан одномерный числовой массив, все элементы которого различны.
Определить в н?м количество неч?тных элементов, расположенных до
максимального.
2. Дан одномерный числовой массив, все элементы которого различны.
Заменить все положительные элементы, расположенные между максимальным и
минимальным, их квадратами.
3. Дан одномерный числовой массив. Посчитать в н?м количество соседств из
положительных чисел.
4.* Дан целочисленный массив, среди элементов которого есть одинаковые.
Преобразовать массив таким образом, чтобы все элементы входили в него один раз
[1].
Предложенный фрагмент изучения раздела «Массивы» является базой для
дальнейшего изучения скриптового программирования, от полученных студентами
компетенций зависит не только возможность дальнейшего изучения
программирования, требующего освоить работу с регулярными типами данных, но
и овладение ими методикой обучения студентов СПО созданию объектов
компьютерного дизайна при помощи JavaScript.
Кроме того, данная методика должна повысить интерес студентов к изучению
программирования, способствовать стремлению научиться создавать сложные
проекты, имеющие практическое применение, что, несомненно, будет
способствовать повышению уровня их конкурентоспособности на рынке труда по
окончании ВУЗа.
В настоящее время представленные материалы внедряются в образовательный
процесс на факультете информатики, математики и экономики.
