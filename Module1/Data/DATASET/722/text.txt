React.js - это JаvaScript библиотека для построения пользовательских
интерфейсов. React был представлен Facebook в 2013 году, и очень быстро обрел
популярность. Сегодня его используют многие известные компании, включая
Instagram, Airbnb, Ebay, Netflix, Yahoo и другие. Основным отличием react от других
JavaScript фреймворков является то, как он управляет состоянием приложения.
React - это не MVC фреймворк. К нему можно применить только V из этой
аббревиатуры. Такая узкая сфера применения дает свободу использования React в
различных системах в комбинации с другими библиотеками. Она является
декларативной, эффективной и гибкой библиотекой, которая имеет в своем наборе
множество инкапсулированных компонентов. Эти компоненты содержат состояния
(state) и свойства (props), которые устанавливаются родительским компонентом и
являются неизменными в течении всего жененного цикла компонентов.
Жизненный цикл компонентов состоит из нескольких методов, которые очень
мощные и дают нам контролировать свойства и состояния в процессе жизни
компонента. Методы жизненного цикла компонентов:
1. getDefaultProps вызывается один раз, когда происходит инициализация класса и
отвечает за значения параметров по умолчанию.
250
2. getInitialState создан для определения начального состояния компонента.
3. componentWillMount вызывается один раз перед тем, как состоится первое
представление (render) компонента.
4. componentWillReceiveProps вызывается каждый раз, когда компонент
получает новые параметры, но не вызывается для первого render().
5. shouldComponentUpdate вызывается при изменении параметров или состояния.
Возвращает true (если изменение должно вызвать перерисовку компонента)
или false (если изменение не влияет на отображение компонента).
6. componentWillUpdate вызывается перед вызовом метода render() при изменении
параметров или состояния компонента.
7. componentDidUpdate вызывается сразу после вызова метода render() при
изменении параметров или состояния компонента.
8. componentWillUnmount вызывается перед тем, как компонент будет удален из
DOM.
Весь жизненный цикл компонентов, может быть представлен в виде схемы,
изображенной на рисунке 1.
Рисунок 1 – Схема жизненного цикла в react
Для построения самого простого приложения используется комбинирование
компонентов, которое называется композицией. В этом случае большие компоненты
включают в себя несколько маленьких компонентов. Большие компоненты так же
могут быть включены в какой-то компонент, который будет большим размером, чем
текущие компоненты.
Приложения на react выполняются в браузере, образуя так называемый сайт.
Пользователь заходит в браузер, набирает в адресной строке путь к сайту, после чего
перед ним появляется интерфейс. Если этот сайт написан на react, то, как правило, он
является приложением, потому что он помогает решать более сложные задачи, которые
непосильны обычным html-страничка. Если посмотреть в исходный код страницы, то
можно увидеть HTML разметку, как и в обычном сайте, однако эту разметку
разработчик не создает, а одна генерируется самим react на основе DOM-дерева.
Каждое визуальное изменение на странице соответствует изменению ее DOM
дерева. Не секрет, что все манипуляции с DOM деревом являются очень
251
ресурсоемкими операциями, так как изначально DOM дерево было статическим и
никакой динамики не предусматривало. Именно поэтому в React используется
виртуальный DOM. Это такая легковесная копия реального DOM дерева на JavaScript.
Таким образом, React манипулирует не с реальным DOM деревом, а с виртуальным. Он
сравнивает предыдущее состояние виртуального DOM дерева с его следующим
состоянием и находит минимальное количество манипуляций, которые можно
произвести уже с реальным DOM, чтобы обновить вид приложения согласно его
новому состоянию. Все это работает очень быстро.
Для рендеринга данных в React используется JSX. JSX нужен для JavaScript XML
- разметки в стиле XML внутри компонентов React. React работает и без JSX, но
именно JSX помогает сделать компоненты более читаемыми, поэтому рекомендуется
использовать его. JSX позволяет описывать структуру компонентов с помощью
понятного синтаксиса, а затем все написанное преобразуется в цепочку JavaScript
функций. В JSX можно использовать переменные, условные конструкции и вызывать
функции. Для этого нужно использовать фигурные скобки. 