Для того, чтобы провести мета-анализ современных подходов к
построению изоморфных веб-приложений в рамках работы необходимо
ограничить рамки исследования на уровне терминов, потому что термин
«изоморфные веб-приложения» достаточно новый и не имеет единого
лаконичного и моносемантичного и конкретного определения. Такие
недостатки терминологии могут обернуться методологическими ошибками
[1, с. 1], поэтому в рамках этой работы изоморфными веб-приложениями будут
называться приложения, обеспечивающие однородность функциональности, за
счет того, что их код выполняется как на клиентской стороне (браузер или
PWA — Progressive Web Application), так и на серверной стороне.
Изоморфные веб-приложения (также известные как универсальные или
серверные приложения) обладают рядом характеристик, которые делают их
уникальными и эффективными:
1. Однородность на клиенте и сервере: Изоморфные приложения
позволяют выполнять код как на стороне сервера, так и на стороне клиента. Это
обеспечивает единообразие в логике приложения и позволяет повторно
использовать код.
2. Улучшенная производительность: Изоморфные приложения могут
предварительно рендерить часть контента на сервере, что улучшает время
загрузки страницы и обеспечивает лучший пользовательский опыт.
3. SEO-дружественность: Изоморфные приложения предоставляют
предварительный рендеринг на сервере, они обеспечивают лучшую
индексацию поисковыми системами, что положительно сказывается на SEOпоказателях.
4. Удобство разработки: Перенос части логики на сервер упрощает
процесс разработки и поддержки кода. Это также позволяет использовать
единый код для решения задач как на клиенте, так и на сервере.
5. Отзывчивость и масштабируемость: Изоморфные приложения
обеспечивают отзывчивость благодаря более быстрой загрузке страниц и
лучшему распределению нагрузки на сервере, что делает их более
масштабируемыми.
6. Клиент-серверная навигация: Изоморфные приложения позволяют
плавно переключаться между клиентской и серверной навигацией, обеспечивая
более гармоничный пользовательский опыт.
Из отличительных характеристик изоморфных веб-приложений так же
следует и ряд критериев, учитывающих аспекты их производительности,
эффективности и удобства применения (developer experience):
1. Удобство разработки и поддержки;
2. Производительность;
3. Экосистема;
По последним опросам наиболее популярные фреймворки для построения
веб-приложений это [2]:
 React;
 Vue.js;
 Angular;
 Svelte.
Проанализируем каждый из фреймворков в разрезе перечисленных
критериев и сделаем вывод о том, какие решение применяются в том или ином
решении.
React, хоть и формально представляет из себя библиотеку для построения
пользовательских интерфейсов, обладает богатой экосистемой из полноценных
мета-фреймворков таких как Next.js или tramvai, а так же внутренних решений
для серверного рендеринга — серверные компоненты, что позволяет ему
безусловно считать инструментов для построение изоморфного UI [3, с. 36].
Кроме того, существует множество решений, облегчающих разработку
приложений на React, например, React DevTools, Redux DevTools, система
сборки Vite и многообразие различных библиотек UI-компонентов [4, с. 905].
С точки зрения удобства разработки и поддержки React обладает
следующими ключевыми особенностями:
 Декларативный синтаксис.
React использует JSX для того, чтобы облегчить восприятие
шаблонизируемого кода, а также такую концепцию как хуки —
функциональную имплементацию методов жизненного цикла UI-компонентов,
которые делают код более читаемым и легко поддерживаемым.
 Компонентный подход.
Мощная концепция компонентов позволяет разделять интерфейс на
небольшие переиспользуемые части (шаблоны), упрощая поддержку и расширяя возможности по разбиению приложений на независимые модули,
причем степень этого разбиения будет настолько велика, что набор
компонентов может представлять собой крайне изолированную сущность —
микрофронтенд. пользовательских интерфейсов и позитивно влияет на их
производительность.
Для улучшения производительности React предлагает следующие
инструменты:
 Виртуальный DOM.
Использование виртуальной объектной модели документа обеспечивает
эффективное обновление интерфейса, что снимает с разработчиков обязанность
по ручному управлению рендерами, что упрощает построение
 Жизненный цикл компонентов.
Благодаря изящность системе жизненного цикла компонентов, React
позволяет проводить тонкие ручные оптимизации процесса рендеринга,
предотвращая лишние перерисовки пользовательского интерфейса.
 React Fiber.
Это особенный механизм согласования состояния пользовательского
интерфейса, который проводит его асинхронное обновление, способствуя
снижению блокировок UI.
 Suspense и Lazy Loading.
Применение Suspense для отображение заглушек на время ленивой
загрузки компонентов позволяет улучшить пользовательский опыт, благодаря
отложенной on-demand загрузки не блокирующего контента.
Экосистема Vue.js представляет собой богатый и разнообразный набор
инструментов, библиотек и ресурсов, созданных сообществом разработчиков
вокруг фреймворка. Важными её частями являются Vue CLI, Vuex, Vue
DevTools, мета-фреймворк Nuxt.js, обеспечивающий возможность построения
изоморфных пользовательских интерфейсов, и множество библиотек UIкомпонентов.
С точки зрения удобства разработки и поддержки Vue.js предоставляет
возможность постепенного внедрения, реактивность и компонентный подход.
Как и React, Vue.js реализует концепции виртуального DOM и хуков, а
также обладает компактным размером, что обеспечивает быструю загрузку на
стороне клиента. Кроме того, он позволяет динамически импортировать
компоненты и поддерживает различные стратегии кэширования компонентов и данных, позволяя разработчикам выбрать оптимальный подход для решения
бизнес-задач [5, с. 304].
Популярный фреймворк Angular, созданный для построения динамичных
веб-приложений, его экосистема включает в себя множество инструментов,
библиотек и ресурсов, которые обеспечивает полный цикл разработки [6, с. 70].
Основные компоненты экосистемы Angular пересекаются с Vue.js и React по
части CLI (Angular CLI), разнообразия библиотек UI-компонентов, но уступает
другим библиотекам по части независимых от разработчиков фреймворка
инструментов, потому что уже «из коробки» предоставляет почти все
необходимые для разработки современных изоморфных веб-приложений
функции.
С точки зрения удобства разработки и поддержки, а также
производительности Angular реализует те же концепции, что и другие
фреймворки для построения изоморфных пользовательских интерфейсов,
однако делает это без применения дополнительных инструментов от сторонних
разработчиков.
По выбранных характеристикам фреймворк Svelte от перечисленных
выше отличается тем, что в нем отсутствует виртуальный DOM. Кроме того, это
компилируемый фреймворк, который собирается в нативный и легковесный
JavaScript-код, за счет этого он не включается в себя код фреймворка на
клиентской стороне, что существенно ускоряет скорость загрузки исполняемых
файлов и ещё более позитивно влияет на время до отображения первого
контента. К тому же, Svelte использует статический анализ изменений на этапе
компиляции, что позволяет определить, какие данные в приложении
подвержены мутации, что позволяет генерировать соответствующий код для
обновления интерфейса только там, где это необходимо. Как и в случае React и
Vue.js в экосистеме Svelte существует мета-фреймворк SvelteKit,
предоставляющий возможность серверного рендеринга.
Таким образом, можно сделать вывод о том, что текущее состоянии
индустрии и используемых в ней инструментов таково, что доминирующими
инструментами для построения изоморфных веб-приложений являются метафреймворки Next.js, Nuxt.js и Svelte-Kit, основанные на популярных библиотека
для построения пользовательских интерфейсов React, Vue.js и Svelte
соответственно. Особняком здесь стоит фреймворк Angular, который без
дополнительных инструментов предоставляет возможности для серверного
рендеринга. Все современные платформы для построения изоморфных веб-приложений обладают богатыми экосистемами и широким сообществом
программистов, постоянно расширяющих их возможности. Кроме того, каждая
из этих платформ основана на компонентной архитектуре, разбивая
пользовательский интерфейс на множество небольших и переиспользуемых
компонентов, что облегчает управление кодом и обеспечивает модульность.
С точки зрения средств обеспечения производительности разработчиками
часто имплементируется концепция виртуального DOM, однако наблюдается
тенденция к статической компиляции приложений, что позволяет уменьшить
размер клиентской сборки без ущерба производительности.
