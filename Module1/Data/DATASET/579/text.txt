Эффективность рендеринга является актуальной проблемой для современной вебразработки. Скорость рендеринга влияет на удовлетворенность пользователей при
посещении сайта. Современный пользователь не готов долго ждать получения
информации или возможности взаимодействия со страницей. Данный факт не только
снижает заинтересованность пользователей, но и приносит компаниям крупные убытки.
В том числе с каждым годом растет число интернет-магазинов и сайтов с высоким
содержанием интерактивных элементов, замедляющих рендеринг, таких как
изображения, видео, анимации, что увеличивает вероятность возникновения проблемы
производительности.
Большинство компаний при разработке пользовательских интерфейсов включает в
список используемых технологий фреймворки. Они позволяют разработчикам
увеличить скорость работы, создавать масштабируемые приложения, структурировать
код. Каждый фреймворк имеет свои подходы к оптимизации и показатели
эффективности рендеринга. Svelte – относительно молодой фреймворк и был
представлен в качестве принципиально нового подхода к разработке пользовательских
интерфейсов. Svelte представляет собой компонентный фреймворк, в котором
компиляция компонентов происходит при сборке [1].
Одним из теоретических подходов к оптимизации рендеринга является
уменьшение конечного размера веб-приложения, его отдельных компонентов и
дополнительных файлов. Svelte в принципе требует меньшее количество кода в
сравнении с другими фреймворками. Конечный размер файлов, которые отправляются
клиенту, является в сравнении также малым. В то же время, например, в React
необходимо отправлять дополнительный код для работы в браузере.
Операции с Document Object Model (DOM) имеют значительный вес в
производительности веб-приложений. Для увеличения эффективности рендеринга
основным подходом будет уменьшение количества взаимодействий с DOM, а также их
упрощение. Фреймворки используют различные подходы к обновлению модели DOM.
Одним из наиболее известных алгоритмов является Virtual DOM. Данный подход
использует React. Модель виртуального DOM хранится в памяти, является легковесной
копией реального DOM и синхронизируется с ней [2]. Для обновления элементов
реального DOM используется алгоритм диффинга (diffing). При изменении некоторых частей интерфейса производится сравнение моделей до и после изменений, затем
определяются те элементы, которые должны быть обновлены. В итоге точечно
производится повторный рендеринг.
Svelte предлагает иной подход, аргументируя это тем, что Virtual DOM требует
дополнительных вычислений, что влияет на оптимизацию [1]. Svelte – компилятор,
который преобразует приложение в код JavaScript, не используя при этом лишний код
для запуска в браузере. С помощью быстродействующих библиотек для работы с
парсингом и трансформацией, файлы “.svelte” приводятся к общей структуре AST
(абстрактное дерево синтаксиса), но со своими особенностями: для селекторов css –
уникальные идентификаторы, для разметки html – описание тегов, для JavaScript –
извлечение реактивных тегов [3]. Анализируя полученный оптимизированный код,
строится дерево зависимостей, и затем в JavaScript коде обновляются только
необходимые части DOM.
Для оценки производительности приложений используются различные
инструменты веб-аудита. Самый доступный – Lighthouse, который включен в Chrome и
предоставляет возможность оценки в том числе метрик эффективности рендеринга.
Существует большое число типов метрик, при этом не все могут объективно отражать
производительность приложений. Для решения этой проблемы Google и W3C запустили
инициативу Web Vitals, где наиболее важными показателями эффективности являются
Core Web Vitals: Largest Contentful Paint (LCP) – скорость загрузки основного контента,
First Input Delay (FID) – время ожидания до первого взаимодействия с контентом,
Cumulative Layout Shift (CLS) – измеряет визуальную стабильность [4].
В качестве экспериментального исследования было решено измерить и сравнить
рассмотренные метрики эффективности рендеринга для двух приложений. Первое
приложение разработано с помощью React, так как данная технология использует подход
Virtual DOM, который был описан выше. Второе приложение создано на Svelte. Оба
приложения представляют собой страницу, которая содержит набор анимированных
элементов, также к каждому элементу применено свойство градиента. Данные
особенности накладывают определенную нагрузку на браузер пользователя.
Основываясь на проведенном анализе веб-метрик, для эксперимента были выбраны
метрика FID, описанная выше, а также взяты следующие метрики для исследования:
1. First Contentful Paint – время, за которое отобразится какое-то содержимое
страницы.
2. Time to Interactive – время, за которое страница станет полностью
интерактивной.
3. Total Blocking Time – количество времени между First Contentful Paint и Time
to Interactive, когда страница практически не реагирует на ввод.
4. DOM Content Loaded – время, за которое HTML загружен, не дожидаясь стилей
или изображений.
5. Load end – время, за которое страница загружается полностью, включая стили
и изображения.
6. Byte Weight – общий размер всех ресурсов, запрошенных страницей.
Для проведения эксперимента подготовлено приложение-оркестратор,
разработанное на платформе Node.js и использующее тандем популярных инструментов
для тестирования в браузере Jest и Puppeteer. Jest – инструмент с собственным API для
конфигурации и автоматического проведения тестов. Puppeteer – библиотека,
реализующая API для автоматизации управления браузером на основе движка Chromium
по протоколу DevTools. Puppeteer в нашем случае открывает страницу и собирает
метрики с помощью официальных библиотек web-vitals и lighthouse, а Jest организует
запуск теста на протяжении 50 итераций и обрабатывает данные. Затем полученные
данные об аудите усредняются и записываются в файл в формате JSON.
