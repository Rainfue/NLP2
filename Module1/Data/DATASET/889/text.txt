В современном мире стремительно развивается цифровизация во всех сферах жизни.
Это происходит благодаря огромному количеству приложений и различных программ.
Программисты создают разработки на разных языках, которых на сегодняшний день более
700. Выбор может зависеть от таких факторов, как функционал, производительность,
объектно-ориентированность, простота.
Существуют языки программирования, связанные между собой. Например, один
появился в следствии другого и имеет похожий функционал. Примером таких языков
являются javascript (JS) и typescript (TS).
JS – популярный язык программирования, на котором написаны практически все сайты
и программы [1]. Да, он довольно сложный для изучения, поэтому разработчики либо ищут
другие языки, либо пробуют похожие, либо просто принимают его со всеми недостатками.
Рассмотрим ситуацию, когда программисты ищут идентичные javascript. Здесь на помощь
приходит typescript. Это язык программирования, в котором исправлены все недочеты
предшественника [2]. Код у них выглядит одинаково, никаких изменений нет. Данный язык
довольно быстро развивается, т.к. является более новым и функциональным. Была замечена
закономерность в том, что изменения, которые появляются в TS, затем перетекают и со
временем функционируют в JS. Например, стрелочные функции [3].
Выделим главные достоинства TS в сравнении с javascript [4]: различная типизация,
строгая; улучшенное объектно-ориентированное программирование; применение библиотек.
В typescript типизация статическая, что позволяет избавиться от множества проблем в
то время, когда в javascript – динамическая [5]. Вообще в JS происходит странное поведение
данных. В TS присутствуют числовой тип, строковый, логический и многие другие. Есть
возможность описывать свои типы данных с помощью enum.
В обоих языках программирования присутствует поддержка ООП: классы,
наследование и др. Разработчики TS шагнули вглубь и раскрыли больше функционала для
пользователей. Например, интерфейсы. Также в TS доступны три модификатора доступа:
public, private и protected. Есть и другие возможности: обобщение, абстрактные классы,
определение полей в конструкторе, преобразование типов.
Поддержка библиотек является значимым преимуществом. Можно пользоваться
различными дополнениями и проверками, но отсюда и возникает первый минус TS.
Библиотеки присутствуют, но их не так много. При работе может возникнуть проблема с
тем, что фреймворк не портирован на TS. Здесь JS является лучше прошлого языка.
Знаний по программированию typescript и коду мало, нужно обязательно владеть
навыками использования типов данных и объектно-ориентированного программирования,
чтобы пользоваться всеми преимуществами языка и свободно владеть им.
Маловероятно, что typescript станет популярнее javascript: на TS разработка вебприложений стоит намного дороже, чем на JS, и занимает больше времени, что не выгодно
разработчикам. Программисты ценят typescript больше, чем javascript, но вряд ли когда-то
перейдут на него. Достоинств у TS намного больше, чем у JS, однако присутствуют b
недостатки, которые перекрывают все плюсы и не выводят язык на популярность и новый
уровень использования.