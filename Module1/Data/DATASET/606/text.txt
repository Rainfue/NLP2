Целью статьи является исследование одной из основных уязвимостей вебсервисов, методов и инструментов тестирования на проникновение.
Рассматриваемая уязвимость возникла из-за использования языка PHP, который создавался для разработки веб-приложений, а в дальнейшем эволюционировал в
язык общего направления.
PHP - язык с динамической типизацией, тип данных в нем определяется не при
объявлении переменной, а при присваивании ей значения. Данный язык исполняется на
сервере, написанные на PHP программы получают данные от пользователей сайта, обрабатывают их, взаимодействуют с базами данных, возвращают на сайт обработанную
информацию [1].
Статья посвящена рассмотрению веб-уязвимости PHP Code Injection, по той
причине, что веб-уязвимости до сих пор занимают лидирующие позиции в списке самых опасных уязвимостей.
Принцип действия атаки. PHP Code Injection - уязвимость ввода вредоносного кода на языке PHP, который исполняется на стороне сервера. Данная уязвимость
возникает, когда приложение включает управляемые пользователем данные строкой
URL, которая динамически оценивается интерпретатором кода. Если пользовательские
данные строго не проверены, злоумышленник может использовать специально созданный ввод для изменения кода, который должен быть выполнен и ввести произвольный
код, исполняемый сервером.
PHP-инъекция становится возможной, если входные параметры принимаются и
используются без проверки [1].
Уязвимость внедрения кода на стороне сервера как правило приводит к полной
компрометации данных и функциональности приложения, а также сервера, на котором
размещается приложение. Кроме этого появляется возможность использовать сервер в
качестве платформы для дальнейших атак на другие системы.
Процесс эксплуатации уязвимости происходит только в строке URL с помощью функций, вводя которые появляется возможность изменить код и функционал вебстраницы ради личной выгоды или забавы. Все начинается с тестирования вебстраницы на возможность ответа от сервера. 
С помощью функции «?message» можно проверить страницу на возможность
ответа. В первую очередь главное определить возможность проведения атак и
сохранения самостоятельно написанных функций на языке PHP.
Так мы проверили возможность проведения данной атаки на веб-странице. Использование функции «?message» является первым шагом в эксплуатации инъекций на
языке PHP.
Существует несколько «опасных», чаще используемых функций для данного
вида атак:
- eval() - принимает к исполнению строку PHP-кода [2].
- preg_replace() (с модификатором «e») – означает замещающую строку, которая после подстановки будет считаться PHP-кодом. И если в этой строке имеются
ненадёжные входные данные, то они смогут внедрить исполняемый PHP-код.
- require_once() – Позволяет включать удаленные файлы.
- include_once() - включает и выполняет указанный файл во время выполнения
скрипта.
- include() – Включает и выполняет указанный файл, в заранее написанной директории.
- require() – Однократное включение определенного файла.
- create_function() - Создаёт анонимную функцию из переданных параметров и
возвращает её уникальное имя, функция внутри себя делает вызов функции eval().
Демонстрация PHP Code Injection. Для демонстрации уязвимости выберем
стенд bwapp (buggy web application). Данный стенд – веб-приложение, находящееся в
открытом доступе, свободное для скачивания, был выбран из-за его легкости в обучении специалистов по информационной безопасности. На выбор предоставлено порядка
100 способов атак на веб-приложения, классифицированных «OWASP топ-10», которые можно детально проработать [3].
Для начала работы необходимо ввести в поле «Login» bee, в поле «Password»
bug.
Переходим во вкладку с выбором уязвимостей. Используя данный стенд, можно проводить атаки разного уровня “low”, “medium”, “high”. Выберем уровень low, для
демонстрации.
Среди предложенных уязвимостей, готовых для эксплуатации выберем «PHP
Code Injection».
После перехода к уязвимости видим, что не появилось поля ввода данных для
проведения тестирования уязвимости. Единственный способ, провести атаку,
используя строку URL, на которой расположено имя сайта [3]. 
Эксплуатировать уязвимость придется только в строке URL, для этого сначала
протестируем ответ с сервера, а после начнем писать функции, которые будут выполнять для нас полезную нагрузку.
Как описано выше, напишем в строке адреса сайта функцию «?message», которая выведет на экран сообщение «Это_научная_статья».
Мы удостоверились в том, что есть ответ с сервера, поэтому продолжим эксплуатировать уязвимость и дальше. 
В данном случае мы получили критически важную информацию о вебстранице. Зная версии языков программирования, приложений можно найти для них
эксплоиты (скрипты, для эксплуатации конкретной уязвимости), используя которые
злоумышленник может с легкостью навредить и использовать ради личной выгоды
данные с сервера, на котором находится сайт. Существует база данных эксплоитов
«Exploit Database», находящаяся в открытом доступе по адресу https://www.exploitdb.com [4]. Где есть заранее написанный вредоносный код для нашей версии PHP –
5.2.4.
Так как версия PHP – 5.2.4 является устаревшей, то для нее уже написано много скриптов с целью эксплуатации. В каждом обновлении разработчики устраняют
проблемы с безопасностью, поэтому чтобы не быть подверженным легким атакам, надо
своевременно обновлять версии ПО, с которым вы имеете дело.
Насколько уже понятно, на данном сайте нет ограничений, поэтому можно
вводить любые команды и получать на них ответы от сервера. Введем
«system(‘hostname’)», чтобы узнать имя целевого хоста.
Далее можем получить обратное соединение с уязвимой веб-страницы. Получение обратного соединения «Reverse Shell», схемы взаимодействия с удаленным компьютером. При её использовании нужно, чтобы атакующий сначала запустил на своей
машине сервер, при этом целевая машина будет играть роль клиента, который подключается к этому серверу, после чего атакующий получает доступ к оболочке целевого
компьютера. Обратный шелл используется, если удалённый компьютер находится за
NAT (имеет только локальный IP адрес), либо если файервол блокирует входящие соединения — большинство файерволов настроены пропускать исходящие соединения.
Другими словами, мы получим полный доступ к управлению и возможностью
просмотра всех папок и файлов, содержащихся на сервере.
Для этого напишем в строке URL: «system('nc -lvp 4444 -e /bin/bash')». Используя утилиту netcat, позволяющую установить соединение TCP и UDP, принимать оттуда данные и передавать их обратно. С помощью команды дадим доступ к хосту жертвы
на 4444 порт.
Заходим в терминал, используем команду «nc –nv 192.168.1.35 4444» для получения доступа к файлам целевой машины. В этой команде:
«192.168.1.35 4444» – ip-адрес и порт целевого хоста.
«nc –nv» - команда в netcat, для взаимодействия с ip-адресом напрямую. 
Как итог получили доступ ко всем файлам целевого хоста. Фактически имеем
полную власть над файлами. Разбирая особенности данного вида атаки, мы понимаем
насколько большой спектр возможностей для эксплуатации открывается любому человеку, который способен провести такую цепочку действий.
Методы предотвращения PHP Code Injection. Показанная последовательность действий является лишь небольшим примером того, как злоумышленники атакуют веб-сайты каждый день. Из-за того, что информация обновляется каждый день, постоянно выходят обновления, а разработчики придумывают более серьезные способы
защиты, хакеры придумывают новые, изощренные цепочки атак и возможностей эксплуатации целевого веб-приложения.
Для защиты веб-приложений необходимо при их создании и модификации соблюдать правила:
- PHP конфигурация должна пользоваться преимуществом встроенных механизмов защиты [5].
- PHP сценарии должены быть выполнены в chrooted среде.
- Apache сервер должен отклонять все запросы (GET и POST), которые содержат HTML-тэги (возможная атака межсайтового скриптинга), знаки апострофа “`” и
двойные кавычки (возможная SQL-injection атака).
- Ни одно из PHP предупреждений или сообщений об ошибках не должно быть
доступно пользовательским Web приложениям.
- Должна быть реализована возможность сохранения входящих GET и POST
запросов, в текстовом файле, что позволит использовать дополнительную Host-based
систему обнаружения взлома (HIDS).
- Кодирование — это способ который позволяет произвести ввод данных пользователем только как данные и не позволяет браузеру обработку как кода.
- Валидация — способ фильтрующий пользовательский ввод так, что браузер
интерпретирует данный код, как код без вредоносных команд.
- Content Security Policy (CSP, политика защиты контента).
CSP используются для ограничения использования браузером веб-страницы
таким образом, что он может использовать только ресурсы, загруженные из надежных
источников. Ресурсы представляют собой сценарии, таблицы стилей, изображения, или какие-либо другие типы файлов, на которые есть ссылки на странице. Это означает, что
даже если злоумышленнику удастся провести инъекцию вредоносного контента на вашем сайте, CSP сможет предотвратить его исполнение [6]. 