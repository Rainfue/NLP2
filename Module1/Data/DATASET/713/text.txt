React – это JavaScript библиотека для построения пользовательских
интерфейсов. React разрабатывается и поддерживается Facebook, Instagram, а
также сообществом отдельных разработчиков и корпораций. React
используется для разработки одностраничных и мобильных приложений. Его
цель — предоставить высокую скорость, простоту и масштабируемость. В
качестве библиотеки для разработки пользовательских интерфейсов React
часто используется с другими библиотеками, такими как Redux.
React предоставляет пользователю язык шаблонов и некоторые
callback-функции для отрисовки HTML. Весь результат работы React — это
HTML.
Рисунок 1 – HTML код.
____«Актуальные научные исследования в современном мире» ISCIENCE.IN.UA__
Выпуск 10(66) ч. 1 ISSN 2524-0986
130
Связки HTML/JavaScript, называемые компонентами, занимаются тем,
что хранят свое внутреннее состояние в памяти (например: какая закладка
выбрана), но в итоге просто реализуется HTML.
Рисунок 2 – JS код
Преимущества и недостатки библиотеки React
В библиотеке React js имеется преимущества и недостатки, в данной
работе будут рассмотрены несколько из них.
Сейчас начнем описать преимущества этой библиотеки:
 посмотрев на исходный код, будет видно как компонент выстроится.
Это может быть важным преимуществом, хотя оно ничем не отличается от
шаблонов фреймворка Angular. например нужно изменить название сайта на
имя пользователя после входа в систему. Если не используется какой-либо
фреймворк MVC, то можно сделать, как приведено на(Рисунок 1) и (рисунок 2),
а на рисунке 3 представлен повторно предыдущий пример только на React js.
Рисунок 3 – Реакт код
 Связывание JavaScript и HTML в JSX упрощает понимание
компонентов.
 Странное сочетание HTML / JavaScript может сбить вас с толку из-за
неприятной ситуации работы без библиотеки реакта. Обычно вы разделяете
представления (HTML) и функциональность (Javascript). Это приводит к
монолитному файлу JavaScript, содержащему все функциональные
возможности для одной страницы, и вы должны следить за сложным потоком
JS->HTML->JS ->.
 Связывание функциональности непосредственно с разметкой и
упаковка ее в портативный, автономный "компонент" сделает вас счастливее, а
ваш код в целом лучше. Ваш Javascript "знаком" с вашим HTML, поэтому имеет
смысл смешивать их.
Рендеринг на сервере
В типичном сайте на PHP или WordPress страница загружается из
контента, поступающего через HTTP, который был отображен на сервере и
представлен в виде полностью визуализированного HTML-файла. Это в
__ ISCIENCE.IN.UA «Актуальные научные исследования в современном мире» ___
Выпуск 10(66) ч. 1 ISSN 2524-0986
131
отличие от приложения React, созданного с помощью CRA, которое просто
отправляет файл js клиенту, а JavaScript-движок клиентского браузера создает
разметку после загрузки файла js.:
 Отсутствие официальной документации. Сверхбыстрое развитие
React.js не оставляет места для надлежащей документации, которая сейчас
немного хаотична, так как многие разработчики вносят в нее индивидуальные
изменения без какого-либо системного подхода;
 Реакт не имеет ясной цели. Это означает, что разработчики иногда
имеют слишком большой выбор;
 Долго овладеть им. React JS требует глубокого понимания того, как
интегрировать пользовательский интерфейс в структуру MVC.
Рисунок 4 – Реакт код
Этот синтаксис в виде тегов на (рисунок 4) не является ни строкой, ни
HTML. Это синтаксический сахар JavaScript, называемый JSX.
Настоятельно рекомендуется использовать JSX вместе с React, так как
он максимально четко описывает внешний вид пользовательского интерфейса,
а также включает в себя всю мощь JavaScript.
 причины использования JSX с реакт:
React не требует использования JSX. Однако это считается крайне
полезным, поскольку JSX обеспечивает абсолютную видимость при работе с
пользовательским интерфейсом внутри кода JavaScript. Он также позволяет
React отображать полезные предупреждения и сообщения об ошибках.
Встроенные выражения в JSX
В приведенном ниже примере (рисунок 5) объявляется переменная с
именем name, а затем используется внутри JSX, заключая в фигурные скобки.
Компоненты позволяют разделить пользовательский интерфейс на
независимые, многократно используемые части и работать с каждой частью
отдельно. Компоненты разделяются на:
Рисунок 5 – Встроенные выражения в JSX
____«Актуальные научные исследования в современном мире» ISCIENCE.IN.UA__
Выпуск 10(66) ч. 1 ISSN 2524-0986
132
Компоненты-функции и компоненты-классы
Самый простой способ объявить компонент – это написать функцию
JavaScript (рисунок 6).
Рисунок 6 – Компоненты-функции
Но компонент можно объявить другим способом. Для этого используется
класс ES6 (рисунок 7).
Рисунок 7 – Компонент на ES6
Композиция компонентов
Компоненты могут ссылаться на другие компоненты в своих выходных
данных (результат отрисовки). К примеру на (рисунок 8) приведен способ
создать компонент (App), который отображает компонент (Welcome) много раз:
Рисунок 8 – Композиция компонентов
__ ISCIENCE.IN.UA «Актуальные научные исследования в современном мире» ___
Выпуск 10(66) ч. 1 ISSN 2524-0986
133
Реакт Router
Реакт Router является переработанной версии популярного дополнения
React.
Рендеринг Router
Компонент Router ожидает только один элемент в качестве дочернего.
Чтобы работать в рамках этого условия, удобно создать компонент <App/>
который рендерит всё ваше приложение(это так же важно для серверного
рендеринга) (рисунок 9).
Рисунок 9 – Рендеринг Router
Routes - <Route/> компонент является основным строительным блоком
React Router. Если требуется рендерить элемент в зависимости от пути к urlадресу, следует использовать компонент <Route/>.
Path — путь - принимает path в качестве prop, который описывает
определенный путь и отображает location.pathname..
Сопоставление пути
NPM пакет path-to-regexp proppath компилируется prop path в регулярное
выражение и сопоставляет его с location.pathname. Строки path имеют
более сложные параметры форматирования.
Когда пути сопоставляются создается объект match который содержит
свойства:
 url – сопоставляемая часть текущего location.pathname
 path – путь в компоненте Route
 isExact – path в Route === location.pathname
 params – объект содержит значения из path которые возвращает
модуль path-to-regexp.
Заключение
В данной работе приведен анализ особенностей библиотеки React.
Выделены положительные стороны, позволяющие более стороны комфортно
создавать приложения, с одной, и отмечены недостатки, присутствующие в
библиотеке. Приведены примеры, показывающие сильные стороны этой
библиотеки.