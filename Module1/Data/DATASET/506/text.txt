Одной из важнейших проблем качественной
организации учебного процесса в высшем учебном
заведении является задача создания
автоматизированного учебного расписания.
Правильно и точно составленное расписание
обеспечивает равномерную загрузку студенческих
групп и профессорско-преподавательского состава
[1].
Задача построения оптимального расписания для
крупных вузов является достаточно сложной и
трудоемкой, поэтому автоматизация такого процесса
является актуальной. Кроме этого, чем крупнее вуз,
тем актуальность в автоматизации названного
процесса выше [2].
Данная система планируется к работе с
разрабатываемой в университете системой ЕИОС, по
этой причине привлечение сторонних разработчиков
затруднено. Практическая значимость работы данной
работы можно обосновать потребностью в данной
системы университета.кспериментальная часть
Разработано клиент-серверное приложение,
процесс взаимодействия в сети между базой данных и
интерфейсом автоматизированного расписания в
компьютерной сети производится при помощи 
программного интерфейса приложения, который
соединяет «сервер» и «клиент» через HTTP протокол.
При помощи HTTP протокола браузер отправляет
специальное HTTP сообщение, в котором указано
какую информацию и в каком виде он хочет получить
от сервера. Сервер, получив такое сообщение,
посылает браузеру в ответ похожее по структуре
сообщение (или несколько сообщений), где
содержится нужная информация.
HTTP запрос состоит из трех основных частей,
которые идут в определенном порядке. Между
заголовками и телом сообщения находится пустая
строка (в качестве разделителя), она представляет
собой символ перевода строки:
1. Строка запроса (Request Line);
2. Заголовки (Message Headers);
3. Пустая строка (разделитель);
4. Тело сообщения (Entity Body) – необязательный
параметр.
Строка запроса указывает метод передачи, URLадрес, к которому нужно обратиться, и версию
протокола HTTP.
Заголовки – это набор пар имя-значение,
разделенных двоеточием. В заголовках передается
различная служебная информация: кодировка
сообщения, название и версия браузера, адрес, с
которого пришел клиент, и так далее.Сообщения, которые посылают клиенты,
получили названия HTTP запросов. Запросы имеют
специальные методы, которые говорят серверу о том,
как обрабатывать сообщение. Сообщения же,
которые посылает сервер, получили название HTTP
ответов, они содержат, помимо полезной
информации, еще и специальные коды состояния,
которые позволяют браузеру узнать как сервер понял
его запрос. Таким образом, происходит
взаимодействие «серверной» и «клиентской» частями
проекта.
Также стоит заметить, что в основе
взаимодействия клиент-сервер лежит принцип того,
что такое взаимодействие начинает клиент, сервер
лишь отвечает клиенту и сообщает о том, может ли он
предоставить услугу клиенту, и если может, то на
каких условиях. Клиентское программное
обеспечение и серверное программное обеспечение
обычно установлено на разных машинах, но также
они могут работать и на одном компьютере.
Данная концепция взаимодействия была
разработана в первую очередь для того, чтобы
разделить нагрузку между участниками процесса
обмена информацией, а также для того, чтобы
разделить программный код поставщика и заказчика.
Ниже на рис.1 можно видеть упрощенную схему
взаимодействия клиент - серверЦель работы состоит в разработке программного
обеспечения для управления процессом
автоматизации создания учебного расписания.
Для реализации целей были поставлены
следующие задачи:
1. Разработать рабочую архитектуру базы
данных на основе ORM Django и PostgreSQL
для хранения информации об учебном
расписании на уровне кафедры с
потенциальной возможностью расширения на
весь университет.
2. Описать и реализовать серверную часть для
формирования учебного расписания, в
результате которой реализуется API для
взаимодействия клиентской части
приложения с базой данных посредством
запросов http, содержащих данные в формате
JSON.
Для разработки использовались: СУБД
PostgreSQL, язык программирования Python,
фреймворки Django и Django REST.Создание расписания – неотъемлемая часть
образовательного процесса. На данный момент не
реализована идея по исполнению данного процесса в
виде информационного продукта, которая была бы
доступна и достаточно легка в адаптации к
технологической среде университета. В настоящее
время расписание создается полностью вручную или
с использованием электронных таблиц.
Задача реализации автоматизированного
расписания – это процесс некоторого набора событий
тогда уж за определенный промежуток времени в
ресурсных условиях и других ограничений. Так как во
многих вузах России расписание занятий создается в
ручном режиме, необходимо реализовать данную
идею в клиент-серверном приложении, как минимум,
автоматизировать ввод и хранение информации о
нем, с помощью веб-сервисов и баз данных.
Конечный пользователь взаимодействует с
приложением через интерфейс пользователя, который
предлагает автозаполнение полей и предупреждает о
возможных ошибках, по факту являясь помощником.
Существует несколько уровней доступа, которые
предоставляют определенные права на просмотр,
редактирование и изменение структуры базы данных:
студент, преподаватель и диспетчер расписания.
В настоящий момент, как первая пробная модель,
база данных работает на уровне одной кафедры,
однако планируется ее расширение целиком на весь
университет.
В инфологической модели базы данных на рис.2
представлены следующие таблицы: кафедра,
направление, группа, подгруппа, предмет, аудитория,
преподаватель, рабочее время преподавателя. Каждая
таблица в достаточной мере характеризует свою
сущность в архитектуре расписания и имеет
логические связи и ключи с другими таблицами. Так
у таблицы с предметом есть атрибут «Аудитория»,
который ссылается на таблицу, описывающую
конкретную аудиторию с ее номером, вместимостью,
типом и т.д.
Сущность – это любой объект, отличающийся от
другого, информацию о котором необходимо
сохранить. Связь – ассоциирование нескольких
сущностей с целью отыскания одних из них по
значениям других. Атрибут является
характеристикой сущности, это может быть числовой
характеристикой, классификацией, идентификацией.
Его наименование должно быть уникальным для
конкретного типа сущностей и может совпадать с
атрибутами других сущностей. Ключ представляет
собой минимальное количество атрибутов, с
помощью которого можно отыскать необходимый
экземпляр сущности [3].
Целью инфологического моделирования является
обеспечение оптимального способа сбора и
представления информации, хранимой в базе данных.
Инфологическая модель данных строится в
соответствии с естественным языком, который
невозможно использовать в чистом виде ввиду
сложности обработки текстов с помощью компьютера
и неоднозначности естественного языка [4].