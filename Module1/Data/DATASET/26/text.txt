Написание программного кода и тестирование это две взаимосвязанные 
процедуры. Например, если речь идет о функции, то ее можно вызвать с 
разными аргументами и смотреть что она вернет. Разработчик проверяет 
работу программы – такой метод называется ручное тестирование.
Тестирование повышает надежность программного обеспечения. К 
тому же, гораздо лучше находить ошибки на стадии разработки и исправлять 
их до релиза, чем когда ошибки находит пользователь. 
Тестирование особенно полезно при разработке больших приложений в 
команде разработчиков, когда есть вероятность случайно нарушить работу 
какой-то функции, которую делал другой человек или при доработках в уже 
существующий проект [1].
В больших компаниях создают отдельные группы людей, обычно их 
называют QA (QualityAssurance) – они занимаются только тестированием.
Рассмотрим основные подходы к тестированию программного 
продукта на стадии написания кода [2]. 
Модульное тестирование (юнит-тестирование) — это тестирование 
одного модуля кода (обычно это одна функция или один класс, в случае 
ООП-кода) в изолированном окружении. Это значит, что если код использует 
какие-то сторонние классы, то вместо них подсовываются классы-заглушки 
(моки и стабы), код не должен работать с сетью (и внешними серверами), 
файлами, базой данных (иначе мы тестируем не саму функцию или класс, а 
еще и диск, базу).
Стабы — это классы-заглушки, которые вместо выполнения действия 
возвращают какие-то данные (по сути, функция состоит из одного return). 
Например, стаб класса работы с базой данных может вместо реального 
обращения к базе данных возвращать, что запрос успешно выполнен. А при 
попытке прочитать что-то из нее возвращает заранее подготовленный массив 
с данными.
Моки — это классы-заглушки, которые используются чтобы проверить, 
что определенная функция была вызвана (по-моему, они не очень часто 
нужны).
Обычно юнит-тест передает функции разные входные данные и 
проверяет, вернет ли она ожидаемый результат. Например, если у нас есть 
функция проверки правильности номера телефона, вызывается функция в 
качестве аргументов передаются заранее подготовленные номера, и 
проверяем что она определит их правильно. Если есть функция перевода в 
транслит кириллицы, мы проверяем, что она возвращает и сравниваем с 
заранее подготовленным списком правильных вариантов. 
Юнит-тесты сложно реализовать в функциях, где мало логики, а в 
основном обращения к сторонним классам. Они хорошо тестируют такой 
код, в котором много логики.
Интеграционные тесты обычно используют, когда тестируют 
компонент ПО, состоящий из многих модулей. Например, при создании чата 
можно тестировать, что при вызове функции отправки сообщения – данные 
сообщения сохраняются в базе данных. 
Чтобы не завить от внешних условий, интеграционное тестирование 
производится в контролируемом окружении. Например, при каждом 
тестировании создается временная база данных с заранее подготовленными 
данными, вместо запросов к внешним сервисам используются заглушки, 
возвращающие уже подготовленные ответы. 
Что важно помнить. Основные правила при использовании 
автоматизированного ПО:
 Тесты должны быть повторяемыми, например, при подстановке 
случайных чисел мы не сможем повторить тест в случае ошибки;
 Тесты должны выполняться в контролируемом окружении;
 Тест должен работать по алгоритму отличному от проверяемой 
функции;
 Тестировать нужно как позитивные сценарии, так и негативные. 
Нужно проверять как поведёт себя программа при получении неверных 
данных;
 Тесты должны быть в легком доступе для запуска (в идеале одной 
командой).
Инструменты. Тесты гораздо удобнее писать на основе готовых 
библиотек и фреймворков. Некоторые из них интегрируются с IDE и 
позволяют запускать тесты простым нажатием кнопки. 
Популярные инструменты для тестирования веб-приложений на PHP.
PHPUnit. В настоящее время PHPUnit наиболее популярный 
фреймворк для юнит-тестирования в PHP. Кроме наличия таких 
возможностей, как моки (подделки) объектов, он также может анализировать 
покрытие кода, логирование и предоставляет тысячи других возможностей. 
Несмотря на название, PHPUnit подходит также для интеграционных тестов.
Преимущества PHPUnit:
 Он был выпущен давно, очень популярен, поэтому к нему 
подготовлена хорошая документационная база.
 Очень простой в использовании инструмент, с него легко начинать, 
если разработчик впервые сталкивается с автоматизированным 
тестированием. 
Минусы PHPUnit:
 Возможности PHPUnit очень ограничены. По мере того, как в 
проекте будет необходимо тестировать новые уровни, придется 
комбинировать различные инструменты с PHPUnit, чтобы, например, 
протестировать API.
Behat - Библиотека для написания тестов в стиле BDD. Это означает, 
что тесты написаны человеческими читабельными приложениями, которые 
описывают характеристики вашего приложения.
Плюсы Behat:
 Behat – это фреймворк BDD, его язык настолько удобен для 
человека, что даже тот, у кого нет опыта в программировании, сможет легко 
написать его функционал.
 Тестирование Behat проходит очень гладко, обслуживать тесты в 
Behat легко, поскольку описание тестов и сами тесты осуществляется на 
разных уровнях.
Минусы Behat
 Для проведения API тестирования, возможно, понадобится больше 
инструментов.
 Если в команде нет отдела Q&A и программиста для написания 
тестов, процесс написания сценариев и их определений будет достаточно 
сложным.
 По причине своей многослойности, программисту, который ранее 
не использовал Behat, может понадобиться больше времени для написания 
тестов и понимания этого инструмента.
 При выборе инструмента не идет речь о том, что лучше, а что хуже, 
все зависит от ситуации, в которой находится программист. Чтобы корректно 
выбрать инструмент следует всегда взвесить все плюсы и минусы, и ответ 
будет на поверхности.
Ручное тестирование можно рассматривать как взаимодействие 
профессионального тестировщика и ПО с целью поиска ошибок. Ручное 
тестирование может занимать много времени, зато в краткосрочной 
перспективе сэкономит в разы больше денег. Его стоимость зависит только 
от тестировщика, а не инструментов для автоматизации.
Автоматизированное тестирование — это написание кода. С его 
помощью ожидаемые сценарии сравниваются с тем, что получает 
пользователь, указываются расхождения. Автоматизированное тестирование 
играет важную роль в тяжёлых приложениях с большим количеством 
функций. 
Оба вида тестирования имеют как преимущества, так и недостатки. 
Комбинация обоих — идеальный способ получить от тестирования 
максимальный результат.
Автоматизированное тестирование это всегда интересно. Чтобы 
работать тестировщиком ПО, желательно иметь высшее техническое 
образование. В высших учебных заведениях по специальности 
"Информационные системы и технологии" или "Автоматизация систем 
обработки информации и управления" студенты проходят специальное 
обучение. Специалист тестировщик должен быть продвинутым ПКпользователем. Ему необходимо уметь пользоваться языком SQL, работать с 
такими базами данных, как MSSQL, Oracle. Если речь идет об 
автоматизированном тестировании, то специалисту необходимо знать такие 
программы, как Silk Test или Rational Robot. Профессиональному 
тестировщику нужно в совершенстве владеть техническим английским 
языком.