	
Vuex — это реализация Flux архитектуры, паттерн управления состоянием и библиотека для приложений на Vue.js, которая позволяет отделять
данные от логики, тем самым делая разработку интерфейса более удобной,
сам интерфейс перестает быть перегруженным вызовами API. Vuex служит
централизованным хранилищем данных для всех компонентов приложения
с правилами, гарантирующими, что состояние может быть изменено только предсказуемым образом.
Хранилище содержит и реактивно обновляет состояние приложения на
клиенте, полученное с помощью API предоставленное фреймворком
Laravel или же напрямую из контроллера через шаблонизатор Blade.
15-16 апреля 2021 года Сборник научных трудов 11-й Всероссийской конференции 167
Рисунок 1 – Логика работы клиентской части
Таким образом модули Vuex являются единственным местом в архитектуре, где хранятся и обрабатываются данные, что позволяет компонентам
Vue.js заботиться исключено о бизнес логике, тем самым упрощая разработку и масштабирование пользовательских интерфейсов.
Существует множество вариантов, как разделять данные на Vuex модули, рассмотрим три наиболее применяемых:
Один Vuex модуль – одна страница (путь)
Каждый модуль обслуживает одно представление (один путь в приложении).
Геттер 2
Геттер 3
Геттер 4
Страница
Состояние
Геттер 1
Действия
Мутации
Vuex модуль страницы
Вызывает
Вызывает
Обновляет
состояние Компонент 2
Компонент 1
Компонент 3
Компонент 4
Рисунок 2 – Разделение данных по типу
«Один Vuex модуль – одна страница (путь)»
Данный подход удобен и прост в использовании, а также разделяет приложение и компоненты на модули основываясь на Vuex модулях, что так
же позволяет легко понять, что происходит в приложении не читая код.
Главный компонент страницы вызывает действие, которое в свою очередь
получает данные и обновляет хранилище. Компоненты также могут вызывать мутации, если это необходимо. По итогу, каждой странице будут доступны геттеры, которые может использовать каждый компонент, без необ-
168 11-я ВНТК "СОВРЕМЕННЫЕ ИННОВАЦИИ В НАУКЕ И ТЕХНИКЕ"
ходимости передавать данные по цепочке от компонента в компонент, а
также каждый компонент подписан на изменение данных и реактивно реагирует, обновляя представление, если, например данные как-то изменились. Такой подход немного усложняет структуру, но также позволяет более наглядно разделить компоненты приложения.
Один Vuex модуль – один компонент
Каждый модуль обслуживает один компонент в приложении.
Вызывает
Действия
Мутации
Состояние
Vuex модуль
Вызывает
Обновляет
состояние Компонент 1 Геттеры
Рисунок 3 – Разделение данных по типу «Один Vuex модуль – один компонент»
Данный подход более гибок, так как каждый атомарный компонент становится независимым. Так, например каждая форма в приложении будет
обслуживаться независимо. Но, часто возникает необходимость общения
компонентов на уровне страницы или даже всего приложения, что становится не удобным при таком подходе. Также в разных компонентах могут
возникнуть запросы на одинаковые данные, что также приведет к увеличению времени загрузки страницы.
Один Vuex модуль – одна модель данных
Каждый модуль обслуживает одну модель данных в приложении, например, модель «Товары» в интернет-магазине.
Вызывает
Действия
Мутации
Состояние
Vuex модуль
Вызывает
Обновляет
Модель данных состояние Геттеры
Рисунок 4 – Разделение данных по типу «Один Vuex модуль – одна модель
данных»
Такой способ использования модулей Vuex удобен для создания определённых приложений, где необходимо часто переиспользовать компоненты,
15-16 апреля 2021 года Сборник научных трудов 11-й Всероссийской конференции 169
выводящие одну и ту же информацию, которую необходимо изменить везде одинаково, так как если компоненты используют и изменяют одни и те
же данные по разному, например данные о товарах, то это накладывает необходимость хранить их отдельно, что может привести к сильному разрастанию модуля Vuex, что становится довольно неудобным и плохо читаемым, а также тяжелым для хранения на стороне клиента.
Основываясь на всех плюсах и минусах, предпочтение было отдано первому варианту разделения данных, как более удобному в поддержке и
масштабированию и позволяющему оптимально разделить приложение по
составным частям.
Подводя итоге, стоит сказать, что использование Vuex оправдано в приложениях, где больше, чем один маршрут, так как позволяет четко разделить структуру приложения и в дальнейшем легко добавлять новые элементы приложения. Самое главное преимущество подобного подхода – это
разделение бизнес-логики и деталей реализации. Vue.js компоненты не заботятся о том, как и откуда получить данные, они только опрашивают
нужный им Vuex модуль и потом описывают исключительно бизнеслогику приложения, что соответствуют принципам SOLID и KISS, делает
каждый компонент относительно простым для понимания, делегируя ему
только какую-то одну задачу